(window.webpackJsonp=window.webpackJsonp||[]).push([[31,27,29,33,41,56],{"013z":function(e,t,a){"use strict";var n=a("q1tI"),b=a.n(n),r=a("NmYn"),l=a.n(r),c=a("Wbzz"),o=a("Xrax"),i=a("k4MR"),m=a("TSYQ"),p=a.n(m),s=a("QH2O"),d=a.n(s),O=a("qKvR");var j=e=>{let{title:t,theme:a,tabs:n=[]}=e;return Object(O.b)("div",{className:p()(d.a.pageHeader,{[d.a.withTabs]:n.length,[d.a.darkMode]:"dark"===a})},Object(O.b)("div",{className:"bx--grid"},Object(O.b)("div",{className:"bx--row"},Object(O.b)("div",{className:"bx--col-lg-12"},Object(O.b)("h1",{id:"page-title",className:d.a.text},t)))))},u=a("BAC9");var g=e=>{let{relativePagePath:t,repository:a}=e;const{site:{siteMetadata:{repository:n}}}=Object(c.useStaticQuery)("1364590287"),{baseUrl:b,subDirectory:r,branch:l}=a||n,o=b+"/edit/"+l+r+"/src/pages"+t;return b?Object(O.b)("div",{className:"bx--row "+u.row},Object(O.b)("div",{className:"bx--col"},Object(O.b)("a",{className:u.link,href:o},"Edit this page on GitHub"))):null},N=a("FCXl"),h=a("dI71"),f=a("I8xM");var y=function(e){function t(){return e.apply(this,arguments)||this}return Object(h.a)(t,e),t.prototype.render=function(){const{title:e,tabs:t,slug:a}=this.props,n=a.split("/").filter(Boolean).slice(-1)[0],b=t.map(e=>{const t=l()(e,{lower:!0,strict:!0}),b=t===n,r=new RegExp(n+"/?(#.*)?$"),o=a.replace(r,t);return Object(O.b)("li",{key:e,className:p()({[f.selectedItem]:b},f.listItem)},Object(O.b)(c.Link,{className:f.link,to:""+o},e))});return Object(O.b)("div",{className:f.tabsContainer},Object(O.b)("div",{className:"bx--grid"},Object(O.b)("div",{className:"bx--row"},Object(O.b)("div",{className:"bx--col-lg-12 bx--col-no-gutter"},Object(O.b)("nav",{"aria-label":e},Object(O.b)("ul",{className:f.list},b))))))},t}(b.a.Component),w=a("MjG9"),v=a("CzIb"),A=a("Asxa"),k=a("OIbQ"),x=a.n(k);var M=e=>{let{date:t}=e;const a=new Date(t);return t?Object(O.b)(A.c,{className:x.a.row},Object(O.b)(A.a,null,Object(O.b)("div",{className:x.a.text},"Page last updated: ",a.toLocaleDateString("en-GB",{day:"2-digit",year:"numeric",month:"long"})))):null};t.a=e=>{let{pageContext:t,children:a,location:n,Title:b}=e;const{frontmatter:r={},relativePagePath:m,titleType:p}=t,{tabs:s,title:d,theme:u,description:h,keywords:f,date:A}=r,{interiorTheme:k}=Object(v.a)(),{site:{pathPrefix:x}}=Object(c.useStaticQuery)("2456312558"),q=x?n.pathname.replace(x,""):n.pathname,C=s?q.split("/").filter(Boolean).slice(-1)[0]||l()(s[0],{lower:!0}):"",T=u||k;return Object(O.b)(i.a,{tabs:s,homepage:!1,theme:T,pageTitle:d,pageDescription:h,pageKeywords:f,titleType:p},Object(O.b)(j,{title:b?Object(O.b)(b,null):d,label:"label",tabs:s,theme:T}),s&&Object(O.b)(y,{title:d,slug:q,tabs:s,currentTab:C}),Object(O.b)(w.a,{padded:!0},a,Object(O.b)(g,{relativePagePath:m}),Object(O.b)(M,{date:A})),Object(O.b)(N.a,{pageContext:t,location:n,slug:q,tabs:s,currentTab:C}),Object(O.b)(o.a,null))}},BAC9:function(e,t,a){e.exports={bxTextTruncateEnd:"EditLink-module--bx--text-truncate--end--2pqje",bxTextTruncateFront:"EditLink-module--bx--text-truncate--front--3_lIE",link:"EditLink-module--link--1qzW3",row:"EditLink-module--row--1B9Gk"}},I8xM:function(e,t,a){e.exports={bxTextTruncateEnd:"PageTabs-module--bx--text-truncate--end--267NA",bxTextTruncateFront:"PageTabs-module--bx--text-truncate--front--3xEQF",tabsContainer:"PageTabs-module--tabs-container--8N4k0",list:"PageTabs-module--list--3eFQc",listItem:"PageTabs-module--list-item--nUmtD",link:"PageTabs-module--link--1mDJ1",selectedItem:"PageTabs-module--selected-item--YPVr3"}},OIbQ:function(e,t,a){e.exports={bxTextTruncateEnd:"last-modified-date-module--bx--text-truncate--end--123zi",bxTextTruncateFront:"last-modified-date-module--bx--text-truncate--front--3xeKz",text:"last-modified-date-module--text--24m-4",row:"last-modified-date-module--row--2BquN"}},QH2O:function(e,t,a){e.exports={bxTextTruncateEnd:"PageHeader-module--bx--text-truncate--end--mZWeX",bxTextTruncateFront:"PageHeader-module--bx--text-truncate--front--3zvrI",pageHeader:"PageHeader-module--page-header--3hIan",darkMode:"PageHeader-module--dark-mode--hBrwL",withTabs:"PageHeader-module--with-tabs--3nKxA",text:"PageHeader-module--text--o9LFq"}},uZBU:function(e,t,a){"use strict";a.r(t),a.d(t,"_frontmatter",(function(){return o})),a.d(t,"default",(function(){return d}));var n=a("wx14"),b=a("Ff2n"),r=(a("q1tI"),a("7ljp")),l=a("013z");a("qKvR");const c=["components"],o={},i=(m="FeatureCard",function(e){return console.warn("Component "+m+" was not imported, exported, or provided by MDXProvider as global scope"),Object(r.b)("div",e)});var m;const p={_frontmatter:o},s=l.a;function d(e){let{components:t}=e,a=Object(b.a)(e,c);return Object(r.b)(s,Object(n.a)({},p,a,{components:t,mdxType:"MDXLayout"}),Object(r.b)(i,{title:"Horizontally scaling IBM MQ with Uniform Clusters - Demo Script",color:"dark",mdxType:"FeatureCard"},Object(r.b)("img",{src:"./images/mq-banner.jpg",alt:"banner"})),Object(r.b)("span",{id:"place1"}),Object(r.b)("details",null,Object(r.b)("summary",null,"Introduction"),Object(r.b)("br",null),"We’re running a cluster of IBM MQ queue managers in Red Hat OpenShift, together with a large number of client applications putting and getting messages to them. This workload will vary over time, so we need flexibility in how we scale all of this.",Object(r.b)("br",null),Object(r.b)("br",null),"Simplifying your messaging solution deployment is very important for your Operations team, but it is good for your business too. Increased business high availability can provide the difference between a satisfied customer who wants to do more business with you or a disappointed customer who is looking for an alternative option. In addition, it improves innovation, because a team that is used to quickly shipping experiments and getting back user-validated results fast, will soon find itself naturally innovating.",Object(r.b)("br",null),Object(r.b)("br",null),"This demo will show how we can easily scale the number of instances of our client applications up and down, without having to reconfigure their connection details and without needing to manually distribute or load balance them.",Object(r.b)("br",null),Object(r.b)("br",null),"It will also show how to quickly and easily grow the queue manager cluster – adding a new queue manager to the cluster without a complex, new, custom configuration. In this demo, we will see the Uniform Cluster capability of IBM MQ in action.",Object(r.b)("br",null),Object(r.b)("br",null),"Let's get started!",Object(r.b)("br",null),Object(r.b)("br",null),Object(r.b)("p",null,"(Demo Slides ",Object(r.b)("a",{href:"https://github.com/ibm-integration/learninghub/blob/main/src/pages/demos/mq-techsales/files/MQUniformSlides.pptx",target:"_blank",rel:"noreferrer"},"here"),")"),Object(r.b)("br",null)),Object(r.b)("details",null,Object(r.b)("summary",null,"1 - Accessing the environment"),Object(r.b)("br",null),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",{parentName:"tr",align:"left"},Object(r.b)("strong",{parentName:"th"},"1.1")),Object(r.b)("th",{parentName:"tr",align:"left"},Object(r.b)("strong",{parentName:"th"},"Log in to Cloud Pak for Integration")))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:"left"},Object(r.b)("strong",{parentName:"td"},"Narration")),Object(r.b)("td",{parentName:"tr",align:"left"},"Let’s see how to scale the IBM MQ cluster and client applications in OpenShift. Here we have an IBM Cloud Pak for Integration environment with IBM MQ operator installed. We have a cloud version of the product on IBM Cloud. Let me log in here.  "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," ")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:"left"},Object(r.b)("strong",{parentName:"td"},"Action")," "," "," 1.1.1"),Object(r.b)("td",{parentName:"tr",align:"left"},"Open ",Object(r.b)("strong",{parentName:"td"},"Cloud Pak for Integration page")," and ",Object(r.b)("strong",{parentName:"td"},"log in")," with your ",Object(r.b)("strong",{parentName:"td"},"username")," and ",Object(r.b)("strong",{parentName:"td"},"password"),". ",Object(r.b)("br",null),Object(r.b)("br",null),Object(r.b)("img",{parentName:"td",src:"images/access-env-1-1.png",alt:null}),Object(r.b)("br",null))))),Object(r.b)("br",null),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",{parentName:"tr",align:"left"},Object(r.b)("strong",{parentName:"th"},"1.2")),Object(r.b)("th",{parentName:"tr",align:"left"},Object(r.b)("strong",{parentName:"th"},"View the Cloud Pak for Integration instances")))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:"left"},Object(r.b)("strong",{parentName:"td"},"Narration")),Object(r.b)("td",{parentName:"tr",align:"left"},"Welcome to IBM Cloud Pak for Integration! We’re now at the home screen showing all the capabilities of the Pak, brought together in one place. Specialized integration capabilities — for API management, application integration, messaging, and more — are built on top of powerful automation services. ",Object(r.b)("br",null),Object(r.b)("br",null),"As you can see, you are able to access all the integration capabilities your team needs through a single interface.  By now, we have a basic MQ instance here. IBM MQ is a universal messaging backbone with robust connectivity for flexible and reliable messaging for applications and the integration of existing IT assets. In this demo, to scale our IBM MQ Cluster, we will create a Uniform cluster.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:"left"},Object(r.b)("strong",{parentName:"td"},"Action")," "," "," 1.2.1"),Object(r.b)("td",{parentName:"tr",align:"left"},"Show the ",Object(r.b)("strong",{parentName:"td"},"Instances page"),". ",Object(r.b)("br",null),Object(r.b)("br",null),Object(r.b)("img",{parentName:"td",src:"images/new-access-env-1-2.png",alt:null}),Object(r.b)("br",null))))),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",{parentName:"tr",align:"left"},Object(r.b)("strong",{parentName:"th"},"1.3")),Object(r.b)("th",{parentName:"tr",align:"left"},Object(r.b)("strong",{parentName:"th"},"Access OpenShift Web Console")))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:"left"},Object(r.b)("strong",{parentName:"td"},"Narration")),Object(r.b)("td",{parentName:"tr",align:"left"},"Let’s check our environment on the OpenShift Web Console. On the Installed Operators page, we can confirm that IBM MQ operator is installed. But we have only one queue manager so far. Next step is to create our Uniform Cluster in MQ.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:"left"},Object(r.b)("strong",{parentName:"td"},"Action")," "," "," 1.3.1"),Object(r.b)("td",{parentName:"tr",align:"left"},"Open the ",Object(r.b)("strong",{parentName:"td"},"OpenShift Web Console")," and ",Object(r.b)("strong",{parentName:"td"},"log in"),". ",Object(r.b)("br",null),Object(r.b)("br",null),Object(r.b)("img",{parentName:"td",src:"images/access-env-1-3-1.png",alt:null}),Object(r.b)("br",null))),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:"left"},Object(r.b)("strong",{parentName:"td"},"Action")," "," "," 1.3.2"),Object(r.b)("td",{parentName:"tr",align:"left"},"Open the ",Object(r.b)("strong",{parentName:"td"},"Operators")," (A) > ",Object(r.b)("strong",{parentName:"td"},"Installed Operators")," (B). ",Object(r.b)("br",null),Object(r.b)("br",null),Object(r.b)("img",{parentName:"td",src:"images/access-env-1-3-2.png",alt:null}),Object(r.b)("br",null))),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:"left"},Object(r.b)("strong",{parentName:"td"},"Action")," "," "," 1.3.3"),Object(r.b)("td",{parentName:"tr",align:"left"},"Open the ",Object(r.b)("strong",{parentName:"td"},"IBM MQ")," operator. ",Object(r.b)("br",null),Object(r.b)("br",null),Object(r.b)("img",{parentName:"td",src:"images/access-env-1-3-3.png",alt:null}),Object(r.b)("br",null))),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:"left"},Object(r.b)("strong",{parentName:"td"},"Action")," "," "," 1.3.4"),Object(r.b)("td",{parentName:"tr",align:"left"},"Open the ",Object(r.b)("strong",{parentName:"td"},"Queue Manager")," tab. ",Object(r.b)("br",null),Object(r.b)("br",null),Object(r.b)("img",{parentName:"td",src:"images/access-env-1-3-4.png",alt:null}),Object(r.b)("br",null))),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:"left"},Object(r.b)("strong",{parentName:"td"},"Action")," "," "," 1.3.5"),Object(r.b)("td",{parentName:"tr",align:"left"},"Show the queue manager available ",Object(r.b)("br",null),Object(r.b)("br",null),Object(r.b)("img",{parentName:"td",src:"images/access-env-1-3-5.png",alt:null}),Object(r.b)("br",null))))),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},Object(r.b)("a",{parentName:"strong",href:"#place1"},"Go to top")))),Object(r.b)("details",null,Object(r.b)("summary",null,"2 - Deploy Uniform Cluster configuration"),Object(r.b)("br",null),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",{parentName:"tr",align:"left"},Object(r.b)("strong",{parentName:"th"},"2.1")),Object(r.b)("th",{parentName:"tr",align:"left"},Object(r.b)("strong",{parentName:"th"},"Create configurations")))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:"left"},Object(r.b)("strong",{parentName:"td"},"Narration")),Object(r.b)("td",{parentName:"tr",align:"left"},"The objective of a uniform cluster deployment is that applications can be designed for scale and availability and can connect to any of the queue managers within the uniform cluster. This removes any dependency on a specific queue manager, resulting in better availability and workload balancing of messaging traffic.",Object(r.b)("br",null),Object(r.b)("br",null),"Let’s create it now. First, we need to create our uniform cluster configurations. ",Object(r.b)("br",null),Object(r.b)("br",null)," Let’s start the configuration to create a queue manager uniform cluster with two queue managers. ",Object(r.b)("br",null),Object(r.b)("br",null)," A ConfigMap with a config.ini is used by all three queue managers. This identifies which of the queue managers are going to maintain the full repository of information about the cluster. ",Object(r.b)("br",null),Object(r.b)("br",null)," Another ConfigMap holds the MQSC commands that all queue managers use to define the channel they will need to be members of the cluster. ",Object(r.b)("br",null),Object(r.b)("br",null)," Each queue manager then has it’s own ConfigMap with an additional MQSC file defining the addresses for the channels it will use to join the cluster.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:"left"},Object(r.b)("strong",{parentName:"td"},"Action")," "," "," 2.1.1"),Object(r.b)("td",{parentName:"tr",align:"left"},"On a terminal windows, ",Object(r.b)("strong",{parentName:"td"},"log in")," on your OpenShift environment and run the command below. ",Object(r.b)("br",null)," ",Object(r.b)("inlineCode",{parentName:"td"},"oc apply -f resources/03d-qmgr-uniform-cluster-config.yaml"))))),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",{parentName:"tr",align:"left"},Object(r.b)("strong",{parentName:"th"},"2.2")),Object(r.b)("th",{parentName:"tr",align:"left"},Object(r.b)("strong",{parentName:"th"},"Deploy Queue Managers")))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:"left"},Object(r.b)("strong",{parentName:"td"},"Narration")),Object(r.b)("td",{parentName:"tr",align:"left"},"Uniform clusters are a specific pattern of an IBM MQ cluster that provides a highly available and horizontally scaled small collection of queue managers. These queue managers are configured almost identically, so that an application can interact with them as a single group. This makes it easier to ensure each queue manager in the cluster is being used, by automatically ensuring application instances are spread evenly across the queue managers.",Object(r.b)("br",null),Object(r.b)("br",null),"Now we need to create our two queue Managers. The QueueManager specifications for each of the queue managers just need to point to the ConfigMaps created earlier. Let’s do it!",Object(r.b)("br",null),Object(r.b)("br",null),"Great, now let’s confirm the instances have been deployed successfully before moving to the next step.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:"left"},Object(r.b)("strong",{parentName:"td"},"Action")," "," "," 2.2.1"),Object(r.b)("td",{parentName:"tr",align:"left"},"Run the command below.",Object(r.b)("inlineCode",{parentName:"td"},"oc apply -f instances/${CP4I_VER}/${OCP_TYPE}/13a-qmgr-uniform-cluster-qm1.yaml -n cp4i"))),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:"left"},Object(r.b)("strong",{parentName:"td"},"Action")," "," "," 2.2.2"),Object(r.b)("td",{parentName:"tr",align:"left"},"Run the command below.",Object(r.b)("inlineCode",{parentName:"td"},"oc apply -f instances/${CP4I_VER}/${OCP_TYPE}/13b-qmgr-uniform-cluster-qm2.yaml -n cp4i"))),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:"left"},Object(r.b)("strong",{parentName:"td"},"Action")," "," "," 2.2.3"),Object(r.b)("td",{parentName:"tr",align:"left"},"Run the command below.",Object(r.b)("inlineCode",{parentName:"td"},"oc get queuemanager -n cp4i")," ",Object(r.b)("br",null),Object(r.b)("br",null)," ",Object(r.b)("inlineCode",{parentName:"td"},"Note")," this will take few minutes, but at the end you should get a response like this. ",Object(r.b)("br",null),Object(r.b)("br",null),Object(r.b)("img",{parentName:"td",src:"images/uniform-cluster-2-2-3.png",alt:null}),Object(r.b)("br",null))))),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",{parentName:"tr",align:"left"},Object(r.b)("strong",{parentName:"th"},"2.3")),Object(r.b)("th",{parentName:"tr",align:"left"},Object(r.b)("strong",{parentName:"th"},"Deploy NGINX to serve CCDT")))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:"left"},Object(r.b)("strong",{parentName:"td"},"Narration")),Object(r.b)("td",{parentName:"tr",align:"left"},"When one application want to connect multiple Queue Managers this can be done using Client connection channel table(CCDT). Queue managers store client connection channel information in a client channel definition table. This information includes authentication rules you have defined for channels on the queue manager. The table is updated whenever a client connection channel is defined or altered.",Object(r.b)("br",null),Object(r.b)("br",null)," For this demo, we need to create the Client Channel Definition Table (CCDT) to be used by our application and we need to deploy a NGINX instance to serve CCDT.  ",Object(r.b)("br",null),Object(r.b)("br",null),"Voilá, the NGINX service was created to be used by our application. Now we can deploy our application.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:"left"},Object(r.b)("strong",{parentName:"td"},"Action")," "," "," 2.3.1"),Object(r.b)("td",{parentName:"tr",align:"left"},"Run the command below to create CCDT to be used by App. ",Object(r.b)("br",null)," ",Object(r.b)("inlineCode",{parentName:"td"},"oc apply -f resources/04a-nginx-ccdt-configmap.yaml"))),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:"left"},Object(r.b)("strong",{parentName:"td"},"Action")," "," "," 2.3.2"),Object(r.b)("td",{parentName:"tr",align:"left"},"Run the command below to deploy NGINX instance to serve CCDT. ",Object(r.b)("br",null)," ",Object(r.b)("inlineCode",{parentName:"td"},"oc apply -f resources/04b-nginx-deployment.yaml"))),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:"left"},Object(r.b)("strong",{parentName:"td"},"Action")," "," "," 2.3.3"),Object(r.b)("td",{parentName:"tr",align:"left"},"Confirm the instances has been deployed successfully before moving to the next step running the following command. ",Object(r.b)("br",null),Object(r.b)("br",null),"  ",Object(r.b)("b",null,"oc get pods -n cp4i ","|"," grep nginx  ")," ",Object(r.b)("br",null),Object(r.b)("br",null)," You should get a response like this. ",Object(r.b)("br",null),Object(r.b)("br",null),Object(r.b)("img",{parentName:"td",src:"images/uniform-cluster-2-3-3.png",alt:null}),Object(r.b)("br",null))),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:"left"},Object(r.b)("strong",{parentName:"td"},"Action")," "," "," 2.3.4"),Object(r.b)("td",{parentName:"tr",align:"left"},"Run the command below to create service for NGINX to be used by App. ",Object(r.b)("inlineCode",{parentName:"td"},"oc apply -f resources/04c-nginx-service.yaml"))))),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},Object(r.b)("a",{parentName:"strong",href:"#place1"},"Go to top")))),Object(r.b)("details",null,Object(r.b)("summary",null,"3 - Deploy MQ Application"),Object(r.b)("br",null),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",{parentName:"tr",align:"left"},Object(r.b)("strong",{parentName:"th"},"3.1")),Object(r.b)("th",{parentName:"tr",align:"left"},Object(r.b)("strong",{parentName:"th"},"Check the Topology")))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:"left"},Object(r.b)("strong",{parentName:"td"},"Narration")),Object(r.b)("td",{parentName:"tr",align:"left"},"Now that the uniform cluster is running, we can proceed to deploy the application that will be interacting with the queue managers. ",Object(r.b)("br",null),Object(r.b)("br",null)," First, we will switch to the “Developer” perspective. In this perspective you can view the queue managers. Here you will see the tiles representing each queue manager. ")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:"left"},Object(r.b)("strong",{parentName:"td"},"Action")," "," "," 3.1.1"),Object(r.b)("td",{parentName:"tr",align:"left"},"Back to the ",Object(r.b)("strong",{parentName:"td"},"OpenShift Web Console")," page, click on the ",Object(r.b)("strong",{parentName:"td"},"Administrator")," option (A) and select the ",Object(r.b)("strong",{parentName:"td"},"Developer")," (B) perspective. ",Object(r.b)("br",null),Object(r.b)("br",null),Object(r.b)("img",{parentName:"td",src:"images/mq-app-3-1-1.png",alt:null}),Object(r.b)("br",null),Object(r.b)("br",null),Object(r.b)("inlineCode",{parentName:"td"},"Note")," - If you see the Welcome to the Developer Perspective dialog, go ahead and close it.",Object(r.b)("br",null))),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:"left"},Object(r.b)("strong",{parentName:"td"},"Action")," "," "," 3.1.2"),Object(r.b)("td",{parentName:"tr",align:"left"},"Open the ",Object(r.b)("strong",{parentName:"td"},"Topology")," page.  ",Object(r.b)("br",null),Object(r.b)("br",null),Object(r.b)("img",{parentName:"td",src:"images/mq-app-3-1-2.png",alt:null}),Object(r.b)("br",null))),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:"left"},Object(r.b)("strong",{parentName:"td"},"Action")," "," "," 3.1.3"),Object(r.b)("td",{parentName:"tr",align:"left"},"Filter by ",Object(r.b)("strong",{parentName:"td"},"cp4i")," project (A) and show the topology (B).  ",Object(r.b)("br",null),Object(r.b)("br",null),Object(r.b)("img",{parentName:"td",src:"images/mq-app-3-1-3.png",alt:null}),Object(r.b)("br",null))))),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",{parentName:"tr",align:"left"},Object(r.b)("strong",{parentName:"th"},"3.2")),Object(r.b)("th",{parentName:"tr",align:"left"},Object(r.b)("strong",{parentName:"th"},"Deploy JAR file")))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:"left"},Object(r.b)("strong",{parentName:"td"},"Narration")),Object(r.b)("td",{parentName:"tr",align:"left"},"For demo purposes, we have pre-created the JMS application that will use our Queue Managers. Let’s deploy it.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:"left"},Object(r.b)("strong",{parentName:"td"},"Action")," "," "," 3.2.1"),Object(r.b)("td",{parentName:"tr",align:"left"},"Click on ",Object(r.b)("strong",{parentName:"td"},"+Add")," on left menu. ",Object(r.b)("br",null),Object(r.b)("br",null),Object(r.b)("img",{parentName:"td",src:"images/mq-app-3-2-1.png",alt:null}),Object(r.b)("br",null))),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:"left"},Object(r.b)("strong",{parentName:"td"},"Action")," "," "," 3.2.2"),Object(r.b)("td",{parentName:"tr",align:"left"},"Click on ",Object(r.b)("strong",{parentName:"td"},"Upload JAR file"),". ",Object(r.b)("br",null),Object(r.b)("br",null),Object(r.b)("img",{parentName:"td",src:"images/mq-app-3-2-2.png",alt:null}),Object(r.b)("br",null))),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:"left"},Object(r.b)("strong",{parentName:"td"},"Action")," "," "," 3.2.3"),Object(r.b)("td",{parentName:"tr",align:"left"},"Select ",Object(r.b)("strong",{parentName:"td"},"Browse")," (A) and follow the dialogs to select the ",Object(r.b)("strong",{parentName:"td"},"jmsproducer-jgr-demo.jar")," file (B) (check the demo preparation document about how to get the jar file).  ",Object(r.b)("br",null),Object(r.b)("br",null),Object(r.b)("img",{parentName:"td",src:"images/mq-app-3-2-3.png",alt:null}),Object(r.b)("br",null))),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:"left"},Object(r.b)("strong",{parentName:"td"},"Action")," "," "," 3.2.4"),Object(r.b)("td",{parentName:"tr",align:"left"},"Scroll down and uncheck ",Object(r.b)("strong",{parentName:"td"},"Create a route")," (A), then click ",Object(r.b)("strong",{parentName:"td"},"Create")," button (B).  ",Object(r.b)("br",null),Object(r.b)("br",null),Object(r.b)("img",{parentName:"td",src:"images/mq-app-3-2-4.png",alt:null}),Object(r.b)("br",null))),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:"left"},Object(r.b)("strong",{parentName:"td"},"Action")," "," "," 3.2.5"),Object(r.b)("td",{parentName:"tr",align:"left"},"Show the tile representing the deployment in the Topology view. ",Object(r.b)("br",null),Object(r.b)("br",null),Object(r.b)("img",{parentName:"td",src:"images/mq-app-3-2-5.png",alt:null}),Object(r.b)("br",null))))),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",{parentName:"tr",align:"left"},Object(r.b)("strong",{parentName:"th"},"3.3")),Object(r.b)("th",{parentName:"tr",align:"left"},Object(r.b)("strong",{parentName:"th"},"Review Deployment")))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:"left"},Object(r.b)("strong",{parentName:"td"},"Narration")),Object(r.b)("td",{parentName:"tr",align:"left"},"Now, let’s review our application connection. From here, we can easily check the application log. Great, our application was able to connect to a queue manager and it is sending messages.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:"left"},Object(r.b)("strong",{parentName:"td"},"Action")," "," "," 3.3.1"),Object(r.b)("td",{parentName:"tr",align:"left"},"After a few second click on the tile representing the deployment to display the pod. ",Object(r.b)("br",null),Object(r.b)("br",null),Object(r.b)("img",{parentName:"td",src:"images/mq-app-3-3-1.png",alt:null}),Object(r.b)("br",null))),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:"left"},Object(r.b)("strong",{parentName:"td"},"Action")," "," "," 3.3.2"),Object(r.b)("td",{parentName:"tr",align:"left"},"Click on the pod name. ",Object(r.b)("br",null),Object(r.b)("br",null),Object(r.b)("img",{parentName:"td",src:"images/mq-app-3-3-2.png",alt:null}),Object(r.b)("br",null))),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:"left"},Object(r.b)("strong",{parentName:"td"},"Action")," "," "," 3.3.3"),Object(r.b)("td",{parentName:"tr",align:"left"},"In the pod page go to the ",Object(r.b)("strong",{parentName:"td"},"Logs")," tab (1) and click ",Object(r.b)("strong",{parentName:"td"},"Expand")," (2) to get a full view of the log. ",Object(r.b)("br",null),Object(r.b)("br",null),Object(r.b)("img",{parentName:"td",src:"images/mq-app-3-3-3.png",alt:null}),Object(r.b)("br",null)," ")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:"left"},Object(r.b)("strong",{parentName:"td"},"Action")," "," "," 3.3.4"),Object(r.b)("td",{parentName:"tr",align:"left"},"Take your time reviewing the log, and at the bottom you will find a message saying “Sending…” confirming the application was able to connect to a queue manager and it is sending messages (A).  When done, ",Object(r.b)("strong",{parentName:"td"},"collapse")," the log window. (B) ",Object(r.b)("br",null),Object(r.b)("br",null),Object(r.b)("img",{parentName:"td",src:"images/mq-app-3-3-4.png",alt:null}),Object(r.b)("br",null))))),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},Object(r.b)("a",{parentName:"strong",href:"#place1"},"Go to top")))),Object(r.b)("details",null,Object(r.b)("summary",null,"4 - Validate Uniform Cluster connectivity"),Object(r.b)("br",null),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",{parentName:"tr",align:"left"},Object(r.b)("strong",{parentName:"th"},"4.1")),Object(r.b)("th",{parentName:"tr",align:"left"},Object(r.b)("strong",{parentName:"th"},"Explore the Queue Manager 2")))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:"left"},Object(r.b)("strong",{parentName:"td"},"Narration")),Object(r.b)("td",{parentName:"tr",align:"left"},"Now that the MQ application is deployed let’s check the behavior with the Uniform Cluster. Let’s open Queue Manager 2.  The pod ending with 0 is by default the active instance, let’s explore it.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:"left"},Object(r.b)("strong",{parentName:"td"},"Action")," "," "," 4.1.1"),Object(r.b)("td",{parentName:"tr",align:"left"},"Navigate back to the ",Object(r.b)("strong",{parentName:"td"},"Topology")," page. ",Object(r.b)("br",null),Object(r.b)("br",null),Object(r.b)("img",{parentName:"td",src:"images/valid-uniform-4-1-1.png",alt:null}),Object(r.b)("br",null))),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:"left"},Object(r.b)("strong",{parentName:"td"},"Action")," "," "," 4.1.2"),Object(r.b)("td",{parentName:"tr",align:"left"},"Select the tile that represent ",Object(r.b)("strong",{parentName:"td"},"QM02"),". ",Object(r.b)("br",null),Object(r.b)("br",null),Object(r.b)("img",{parentName:"td",src:"images/valid-uniform-4-1-2.png",alt:null}),Object(r.b)("br",null))),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:"left"},Object(r.b)("strong",{parentName:"td"},"Action")," "," "," 4.1.3"),Object(r.b)("td",{parentName:"tr",align:"left"},"Select the pod ending with ",Object(r.b)("strong",{parentName:"td"},"0")," that by default is the active instance. ",Object(r.b)("br",null),Object(r.b)("br",null),Object(r.b)("img",{parentName:"td",src:"images/valid-uniform-4-1-3.png",alt:null}),Object(r.b)("br",null))))),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",{parentName:"tr",align:"left"},Object(r.b)("strong",{parentName:"th"},"4.2")),Object(r.b)("th",{parentName:"tr",align:"left"},Object(r.b)("strong",{parentName:"th"},"Review connections to QM02")))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:"left"},Object(r.b)("strong",{parentName:"td"},"Narration")),Object(r.b)("td",{parentName:"tr",align:"left"},"In order to check the connection status, we will use the command “display connections” and we will filter by the MQ App name that is “MY-PRODUCER”. We will execute the command directly from the terminal in each MQ pod. ",Object(r.b)("br",null),Object(r.b)("br",null),"Right now, we don’t have any connection in this pod. But in the next step we will get a better picture on how the connections are distributed. ")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:"left"},Object(r.b)("strong",{parentName:"td"},"Action")," "," "," 4.2.1"),Object(r.b)("td",{parentName:"tr",align:"left"},"Open the ",Object(r.b)("strong",{parentName:"td"},"Terminal")," tab (A) and click ",Object(r.b)("strong",{parentName:"td"},"Expand")," (B) ",Object(r.b)("br",null),Object(r.b)("br",null),Object(r.b)("img",{parentName:"td",src:"images/valid-uniform-4-2-1.png",alt:null}),Object(r.b)("br",null))),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:"left"},Object(r.b)("strong",{parentName:"td"},"Action")," "," "," 4.2.2"),Object(r.b)("td",{parentName:"tr",align:"left"},"Enter the command below in your terminal windows (if your prefer, you can paste using the context menu) and hit enter to check how many active connections associated with our application are in this queue manager. ",Object(r.b)("br",null),Object(r.b)("br",null)," echo ‘dis conn(*)’ all ","|"," runmqsc ","|"," grep -i my  ",Object(r.b)("br",null))),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:"left"},Object(r.b)("strong",{parentName:"td"},"Action")," "," "," 4.2.3"),Object(r.b)("td",{parentName:"tr",align:"left"},"Show that there isn’t any connection in this Message queue (A). Once you are over you can ",Object(r.b)("strong",{parentName:"td"},"Collapse")," (B) the terminal again.  ",Object(r.b)("br",null),Object(r.b)("br",null),Object(r.b)("img",{parentName:"td",src:"images/valid-uniform-4-2-3.png",alt:null}),Object(r.b)("br",null))))),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",{parentName:"tr",align:"left"},Object(r.b)("strong",{parentName:"th"},"4.3")),Object(r.b)("th",{parentName:"tr",align:"left"},Object(r.b)("strong",{parentName:"th"},"Explore the Queue Manager 1")))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:"left"},Object(r.b)("strong",{parentName:"td"},"Narration")),Object(r.b)("td",{parentName:"tr",align:"left"},"Now let’s explore Queue Manager 1. Let’s repeat the same procedure as before to select the active pod.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:"left"},Object(r.b)("strong",{parentName:"td"},"Action")," "," "," 4.3.1"),Object(r.b)("td",{parentName:"tr",align:"left"},"Right click the ",Object(r.b)("strong",{parentName:"td"},"Topology")," menu (A) and select ",Object(r.b)("strong",{parentName:"td"},"Open Link in New Tab")," (B) to keep a window open for each queue manager since you may need to go back and forth. ",Object(r.b)("br",null),Object(r.b)("br",null),Object(r.b)("img",{parentName:"td",src:"images/valid-uniform-4-3-1.png",alt:null}),Object(r.b)("br",null))),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:"left"},Object(r.b)("strong",{parentName:"td"},"Action")," "," "," 4.3.2"),Object(r.b)("td",{parentName:"tr",align:"left"},"Select the tile that represent ",Object(r.b)("strong",{parentName:"td"},"QM01"),". ",Object(r.b)("br",null),Object(r.b)("br",null),Object(r.b)("img",{parentName:"td",src:"images/valid-uniform-4-3-2.png",alt:null}),Object(r.b)("br",null))),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:"left"},Object(r.b)("strong",{parentName:"td"},"Action")," "," "," 4.3.3"),Object(r.b)("td",{parentName:"tr",align:"left"},"Select the pod ending with ",Object(r.b)("strong",{parentName:"td"},"0"),". ",Object(r.b)("br",null),Object(r.b)("br",null),Object(r.b)("img",{parentName:"td",src:"images/valid-uniform-4-3-3.png",alt:null}),Object(r.b)("br",null))))),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",{parentName:"tr",align:"left"},Object(r.b)("strong",{parentName:"th"},"4.4")),Object(r.b)("th",{parentName:"tr",align:"left"},Object(r.b)("strong",{parentName:"th"},"Review connections to QM01")))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:"left"},Object(r.b)("strong",{parentName:"td"},"Narration")),Object(r.b)("td",{parentName:"tr",align:"left"},"Now let’s check the connection status in this MQ pod. ",Object(r.b)("br",null),Object(r.b)("br",null),"This time we see a couple of active connections, proving that the application we deployed is connected to the cluster.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:"left"},Object(r.b)("strong",{parentName:"td"},"Action")," "," "," 4.4.1"),Object(r.b)("td",{parentName:"tr",align:"left"},"Open the ",Object(r.b)("strong",{parentName:"td"},"Terminal")," tab (A) and click ",Object(r.b)("strong",{parentName:"td"},"Expand")," (B) ",Object(r.b)("br",null),Object(r.b)("br",null),Object(r.b)("img",{parentName:"td",src:"images/valid-uniform-4-4-1.png",alt:null}),Object(r.b)("br",null))),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:"left"},Object(r.b)("strong",{parentName:"td"},"Action")," "," "," 4.4.2"),Object(r.b)("td",{parentName:"tr",align:"left"},"Enter the command below in your terminal windows (if your prefer, you can paste using the context menu) and hit enter to check how many active connections associated with our application are in this queue manager.",Object(r.b)("br",null),Object(r.b)("br",null)," echo ‘dis conn(*)’ all ","|"," runmqsc ","|"," grep -i my ",Object(r.b)("br",null))),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:"left"},Object(r.b)("strong",{parentName:"td"},"Action")," "," "," 4.4.3"),Object(r.b)("td",{parentName:"tr",align:"left"},"Show the ",Object(r.b)("strong",{parentName:"td"},"connections")," available (A). Once you are over you can ",Object(r.b)("strong",{parentName:"td"},"Collapse")," (B) the terminal again. ",Object(r.b)("br",null),Object(r.b)("br",null),Object(r.b)("img",{parentName:"td",src:"images/valid-uniform-4-4-3.png",alt:null})," ",Object(r.b)("br",null),Object(r.b)("br",null)," ",Object(r.b)("inlineCode",{parentName:"td"},"Note")," - In your case the result could potentially be the opposite since we have no affinity defined and the application will connect to any queue manager, but since we only have one instance there will only be a connection to one queue manager at a time. ")))),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},Object(r.b)("a",{parentName:"strong",href:"#place1"},"Go to top")))),Object(r.b)("details",null,Object(r.b)("summary",null,"5 - Scale MQ Application"),Object(r.b)("br",null),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",{parentName:"tr",align:"left"},Object(r.b)("strong",{parentName:"th"},"5.1")),Object(r.b)("th",{parentName:"tr",align:"left"},Object(r.b)("strong",{parentName:"th"},"Increase the number of instances")))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:"left"},Object(r.b)("strong",{parentName:"td"},"Narration")),Object(r.b)("td",{parentName:"tr",align:"left"},"At the moment, our application is running in a single pod and therefore it is only connected to one of the queue managers, but what if the workload increases and I need to scale my app. Let’s simulate the scenario and see how the connections are distributed. ",Object(r.b)("br",null),Object(r.b)("br",null),"Let’s explore the Deployments view of our application. Here we can see there is only one pod. Let’s increase it to have two instances.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:"left"},Object(r.b)("strong",{parentName:"td"},"Action")," "," "," 5.1.1"),Object(r.b)("td",{parentName:"tr",align:"left"},"Right click on the ",Object(r.b)("strong",{parentName:"td"},"RedHat OpenShift logo")," (A) and select ",Object(r.b)("strong",{parentName:"td"},"Open Link in New Tab")," (B) to keep a window open. ",Object(r.b)("br",null),Object(r.b)("br",null),Object(r.b)("img",{parentName:"td",src:"images/rebalance-connec-5-1-1.png",alt:null}),Object(r.b)("br",null))),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:"left"},Object(r.b)("strong",{parentName:"td"},"Action")," "," "," 5.1.2"),Object(r.b)("td",{parentName:"tr",align:"left"},"Change to ",Object(r.b)("strong",{parentName:"td"},"Administrator")," perspective. ",Object(r.b)("br",null),Object(r.b)("br",null),Object(r.b)("img",{parentName:"td",src:"images/rebalance-connec-5-1-2.png",alt:null}),Object(r.b)("br",null))),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:"left"},Object(r.b)("strong",{parentName:"td"},"Action")," "," "," 5.1.3"),Object(r.b)("td",{parentName:"tr",align:"left"},"Open the ",Object(r.b)("strong",{parentName:"td"},"Workloads")," menu (A) and select ",Object(r.b)("strong",{parentName:"td"},"Deployments")," (B). ",Object(r.b)("br",null),Object(r.b)("br",null),Object(r.b)("img",{parentName:"td",src:"images/rebalance-connec-5-1-3.png",alt:null}),Object(r.b)("br",null))),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:"left"},Object(r.b)("strong",{parentName:"td"},"Action")," "," "," 5.1.4"),Object(r.b)("td",{parentName:"tr",align:"left"},"Check that you are on ",Object(r.b)("strong",{parentName:"td"},"cp4i")," project (A). Click on the ",Object(r.b)("strong",{parentName:"td"},"jmsproducer")," deployment (B). ",Object(r.b)("br",null),Object(r.b)("br",null),Object(r.b)("img",{parentName:"td",src:"images/rebalance-connec-5-1-4.png",alt:null}),Object(r.b)("br",null))),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:"left"},Object(r.b)("strong",{parentName:"td"},"Action")," "," "," 5.1.5"),Object(r.b)("td",{parentName:"tr",align:"left"},"Click on the ",Object(r.b)("strong",{parentName:"td"},"arrow up")," icon to increase the number of instances to ",Object(r.b)("strong",{parentName:"td"},"two"),".  ",Object(r.b)("br",null),Object(r.b)("br",null),Object(r.b)("img",{parentName:"td",src:"images/rebalance-connec-5-1-5.png",alt:null}),Object(r.b)("br",null))),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:"left"},Object(r.b)("strong",{parentName:"td"},"Action")," "," "," 5.1.6"),Object(r.b)("td",{parentName:"tr",align:"left"},"Wait a few seconds. After a moment you will see the number of pods is updated to two. ",Object(r.b)("br",null),Object(r.b)("br",null),Object(r.b)("img",{parentName:"td",src:"images/rebalance-connec-5-1-6.png",alt:null}),Object(r.b)("br",null))))),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",{parentName:"tr",align:"left"},Object(r.b)("strong",{parentName:"th"},"5.2")),Object(r.b)("th",{parentName:"tr",align:"left"},Object(r.b)("strong",{parentName:"th"},"Review connectivity")))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:"left"},Object(r.b)("strong",{parentName:"td"},"Narration")),Object(r.b)("td",{parentName:"tr",align:"left"},"Now, let’s check how many connections we have per queue manager. This time we should see that each queue manager has a couple of connections. ")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:"left"},Object(r.b)("strong",{parentName:"td"},"Action")," "," "," 5.2.1"),Object(r.b)("td",{parentName:"tr",align:"left"},"Back to the ",Object(r.b)("strong",{parentName:"td"},"MQ1 browser tab"),", refresh the terminal page and enter the command below again and press ",Object(r.b)("strong",{parentName:"td"},"enter"),". ",Object(r.b)("br",null),Object(r.b)("br",null)," echo ‘dis conn(*)’ all ","|"," runmqsc ","|"," grep -i my  ",Object(r.b)("br",null))),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:"left"},Object(r.b)("strong",{parentName:"td"},"Action")," "," "," 5.2.2"),Object(r.b)("td",{parentName:"tr",align:"left"},"Show that you have ",Object(r.b)("strong",{parentName:"td"},"multiple connections")," in ",Object(r.b)("strong",{parentName:"td"},"MQ1"),". ",Object(r.b)("br",null),Object(r.b)("br",null),Object(r.b)("img",{parentName:"td",src:"images/rebalance-connec-5-2-2.png",alt:null}),Object(r.b)("br",null))),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:"left"},Object(r.b)("strong",{parentName:"td"},"Action")," "," "," 5.2.3"),Object(r.b)("td",{parentName:"tr",align:"left"},"Back to the ",Object(r.b)("strong",{parentName:"td"},"MQ2 browser tab"),", enter the command below again and press ",Object(r.b)("strong",{parentName:"td"},"enter"),". ",Object(r.b)("br",null),Object(r.b)("br",null)," echo ‘dis conn(*)’ all ","|"," runmqsc ","|"," grep -i my  ",Object(r.b)("br",null))),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:"left"},Object(r.b)("strong",{parentName:"td"},"Action")," "," "," 5.2.4"),Object(r.b)("td",{parentName:"tr",align:"left"},"Show that you have ",Object(r.b)("strong",{parentName:"td"},"multiple connections")," in ",Object(r.b)("strong",{parentName:"td"},"MQ2"),". ",Object(r.b)("br",null),Object(r.b)("br",null),Object(r.b)("img",{parentName:"td",src:"images/rebalance-connec-5-2-4.png",alt:null}),Object(r.b)("br",null))))),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},Object(r.b)("a",{parentName:"strong",href:"#place1"},"Go to top")))),Object(r.b)("details",null,Object(r.b)("summary",null,"6 - Rebalance connections"),Object(r.b)("br",null),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",{parentName:"tr",align:"left"},Object(r.b)("strong",{parentName:"th"},"6.1")),Object(r.b)("th",{parentName:"tr",align:"left"},Object(r.b)("strong",{parentName:"th"}," Delete Queue Manager")))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:"left"},Object(r.b)("strong",{parentName:"td"},"Narration")),Object(r.b)("td",{parentName:"tr",align:"left"},"We observed how each instance will connect to a different queue manager trying to keep a homogenous distribution, but what would happen if one of the queue managers goes down? Let’s find out. ",Object(r.b)("br",null),Object(r.b)("br",null),"Let’s check our queue managers in the installed operators’ page. ",Object(r.b)("br",null),Object(r.b)("br",null),"We could kill one of the active pods for any of the queue managers, but since we have configured Native HA, one of the standby instances will take over and at the end, each queue manager will keep a couple of connections, so in this case we will go ahead and fully delete the queue manager.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:"left"},Object(r.b)("strong",{parentName:"td"},"Action")," "," "," 6.1.1"),Object(r.b)("td",{parentName:"tr",align:"left"},"Back to the Administrator perspective browser tab, on the left navigator, open the ",Object(r.b)("strong",{parentName:"td"},"Operators")," (A) > ",Object(r.b)("strong",{parentName:"td"},"Installed Operators")," (B) menu. ",Object(r.b)("br",null),Object(r.b)("br",null),Object(r.b)("img",{parentName:"td",src:"images/rebalance-connec-6-1-1.png",alt:null}),Object(r.b)("br",null))),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:"left"},Object(r.b)("strong",{parentName:"td"},"Action")," "," "," 6.1.2"),Object(r.b)("td",{parentName:"tr",align:"left"},"Navigate to the ",Object(r.b)("strong",{parentName:"td"},"IBM MQ")," Operator again. ",Object(r.b)("br",null),Object(r.b)("br",null),Object(r.b)("img",{parentName:"td",src:"images/rebalance-connec-6-1-2.png",alt:null}),Object(r.b)("br",null))),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:"left"},Object(r.b)("strong",{parentName:"td"},"Action")," "," "," 6.1.3"),Object(r.b)("td",{parentName:"tr",align:"left"},"Open the ",Object(r.b)("strong",{parentName:"td"},"Queue Manager")," tab. ",Object(r.b)("br",null),Object(r.b)("br",null),Object(r.b)("img",{parentName:"td",src:"images/rebalance-connec-6-1-3.png",alt:null}),Object(r.b)("br",null))),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:"left"},Object(r.b)("strong",{parentName:"td"},"Action")," "," "," 6.1.4"),Object(r.b)("td",{parentName:"tr",align:"left"},"Click on the hamburger ",Object(r.b)("strong",{parentName:"td"},"menu")," for QM02 (A) and select ",Object(r.b)("strong",{parentName:"td"},"Delete Queue Manager")," (B). ",Object(r.b)("br",null),Object(r.b)("br",null),Object(r.b)("img",{parentName:"td",src:"images/rebalance-connec-6-1-4.png",alt:null}),Object(r.b)("br",null))),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:"left"},Object(r.b)("strong",{parentName:"td"},"Action")," "," "," 6.1.5"),Object(r.b)("td",{parentName:"tr",align:"left"},"Click the ",Object(r.b)("strong",{parentName:"td"},"Delete")," button on the warning dialog to confirm you want to delete the queue manager. ",Object(r.b)("br",null),Object(r.b)("br",null),Object(r.b)("img",{parentName:"td",src:"images/rebalance-connec-6-1-5.png",alt:null}),Object(r.b)("br",null))))),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",{parentName:"tr",align:"left"},Object(r.b)("strong",{parentName:"th"},"6.2")),Object(r.b)("th",{parentName:"tr",align:"left"},Object(r.b)("strong",{parentName:"th"},"Review connectivity ")))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:"left"},Object(r.b)("strong",{parentName:"td"},"Narration")),Object(r.b)("td",{parentName:"tr",align:"left"},"If we try to navigate back to the active pod for queue manager 2, we will get an error message since the queue manager and therefore its pods have been deleted already. ",Object(r.b)("br",null),Object(r.b)("br",null),"However, if we navigate to the active pod for queue manager one and submit the command to check the number of active connections, we will see all the connections are directed to the active queue manager assuring the client application can continue sending messages.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:"left"},Object(r.b)("strong",{parentName:"td"},"Action")," "," "," 6.2.1"),Object(r.b)("td",{parentName:"tr",align:"left"},"Back to the ",Object(r.b)("strong",{parentName:"td"},"MQ2 browser tab"),", show the error message: “",Object(r.b)("strong",{parentName:"td"},"404"),"”. ",Object(r.b)("br",null),Object(r.b)("br",null),Object(r.b)("img",{parentName:"td",src:"images/rebalance-connec-6-2-1.png",alt:null}),Object(r.b)("br",null))),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:"left"},Object(r.b)("strong",{parentName:"td"},"Action")," "," "," 6.2.2"),Object(r.b)("td",{parentName:"tr",align:"left"},"Back to the ",Object(r.b)("strong",{parentName:"td"},"MQ1 browser tab"),", refresh the terminal page and enter the command below again and press ",Object(r.b)("strong",{parentName:"td"},"enter"),". ",Object(r.b)("br",null),Object(r.b)("br",null),"  echo ‘dis conn(*)’ all ","|"," runmqsc ","|"," grep -i my ",Object(r.b)("br",null))),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:"left"},Object(r.b)("strong",{parentName:"td"},"Action")," "," "," 6.2.3"),Object(r.b)("td",{parentName:"tr",align:"left"},"Show that you have ",Object(r.b)("strong",{parentName:"td"},"all the connections")," now in ",Object(r.b)("strong",{parentName:"td"},"MQ1"),". ",Object(r.b)("br",null),Object(r.b)("br",null),Object(r.b)("img",{parentName:"td",src:"images/rebalance-connec-6-2-3.png",alt:null}),Object(r.b)("br",null))))),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",{parentName:"tr",align:"left"},Object(r.b)("strong",{parentName:"th"},"6.3")),Object(r.b)("th",{parentName:"tr",align:"left"},Object(r.b)("strong",{parentName:"th"},"Recreate Queue Manager 2")))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:"left"},Object(r.b)("strong",{parentName:"td"},"Narration")),Object(r.b)("td",{parentName:"tr",align:"left"},"Now let’s recreate Queue Manager 2. For this demo, we will recreate using the Command Line Interface, but in a production environment, we can use a gitOps approach.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:"left"},Object(r.b)("strong",{parentName:"td"},"Action")," "," "," 6.3.1"),Object(r.b)("td",{parentName:"tr",align:"left"},"Run the command below.",Object(r.b)("br",null),Object(r.b)("br",null)," ",Object(r.b)("inlineCode",{parentName:"td"},"oc apply -f instances/${CP4I_VER}/${OCP_TYPE}/13b-qmgr-uniform-cluster-qm2.yaml -n cp4i"))),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:"left"},Object(r.b)("strong",{parentName:"td"},"Action")," "," "," 6.3.2"),Object(r.b)("td",{parentName:"tr",align:"left"},"Run the command below.",Object(r.b)("br",null),Object(r.b)("br",null)," ",Object(r.b)("inlineCode",{parentName:"td"},"oc get queuemanager -n cp4i")," ",Object(r.b)("br",null),Object(r.b)("br",null),Object(r.b)("inlineCode",{parentName:"td"},"Note")," this will take few minutes, but at the end you should get a response like this. ",Object(r.b)("br",null),Object(r.b)("br",null),Object(r.b)("img",{parentName:"td",src:"images/rebalance-connec-6-3-2.png",alt:null}),Object(r.b)("br",null))),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:"left"},Object(r.b)("strong",{parentName:"td"},"Action")," "," "," 6.3.3"),Object(r.b)("td",{parentName:"tr",align:"left"},"Back to OpenShift Console browser tab with the Administrator profile, on the IBM MQ operator on the Queue Manager tab, check the new Queue Manager is ready. ",Object(r.b)("br",null),Object(r.b)("br",null),Object(r.b)("img",{parentName:"td",src:"images/rebalance-connec-6-3-3.png",alt:null}),Object(r.b)("br",null))))),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",{parentName:"tr",align:"left"},Object(r.b)("strong",{parentName:"th"},"6.4")),Object(r.b)("th",{parentName:"tr",align:"left"},Object(r.b)("strong",{parentName:"th"},"Review the final scenario")))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:"left"},Object(r.b)("strong",{parentName:"td"},"Narration")),Object(r.b)("td",{parentName:"tr",align:"left"},"Once we confirm both queue managers are up and running, we can go back to the terminal of the active pod for each queue manager to check the number of active connections. ",Object(r.b)("br",null),Object(r.b)("br",null)," And a similar behavior would happen if additional queue managers were added to the uniform cluster. The connection would be rebalanced providing a way to scale horizontally. ",Object(r.b)("br",null),Object(r.b)("br",null)," Great! Here, we have arrived at the conclusion of our demonstration.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:"left"},Object(r.b)("strong",{parentName:"td"},"Action")," "," "," 6.4.1"),Object(r.b)("td",{parentName:"tr",align:"left"},"Back to the ",Object(r.b)("strong",{parentName:"td"},"MQ1 browser tab"),", refresh the terminal page and enter the command below again and press ",Object(r.b)("strong",{parentName:"td"},"enter"),". ",Object(r.b)("br",null),Object(r.b)("br",null),"  echo ‘dis conn(*)’ all ","|"," runmqsc ","|"," grep -i my ",Object(r.b)("br",null))),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:"left"},Object(r.b)("strong",{parentName:"td"},"Action")," "," "," 6.4.2"),Object(r.b)("td",{parentName:"tr",align:"left"},"Show that you have ",Object(r.b)("strong",{parentName:"td"},"multiple connections")," in ",Object(r.b)("strong",{parentName:"td"},"MQ1")," (not all connections as presented in the previous section).  ",Object(r.b)("br",null),Object(r.b)("br",null),Object(r.b)("img",{parentName:"td",src:"images/rebalance-connec-6-4-2.png",alt:null}),Object(r.b)("br",null))),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:"left"},Object(r.b)("strong",{parentName:"td"},"Action")," "," "," 6.4.3"),Object(r.b)("td",{parentName:"tr",align:"left"},"Back to the ",Object(r.b)("strong",{parentName:"td"},"MQ2 browser tab"),", you need to reopen the MQ2 pod0 terminal page. Enter the command below again and press enter.",Object(r.b)("br",null),Object(r.b)("br",null)," echo ‘dis conn(*)’ all ","|"," runmqsc ","|"," grep -i my ",Object(r.b)("br",null))),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:"left"},Object(r.b)("strong",{parentName:"td"},"Action")," "," "," 6.4.4"),Object(r.b)("td",{parentName:"tr",align:"left"},"Show that you have ",Object(r.b)("strong",{parentName:"td"},"multiple connections")," in ",Object(r.b)("strong",{parentName:"td"},"MQ2")," again. ",Object(r.b)("br",null),Object(r.b)("br",null),Object(r.b)("img",{parentName:"td",src:"images/rebalance-connec-6-4-4.png",alt:null}),Object(r.b)("br",null))))),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},Object(r.b)("a",{parentName:"strong",href:"#place1"},"Go to top")))),Object(r.b)("details",null,Object(r.b)("summary",null,"Summary"),Object(r.b)("br",null),"Let’s summarize what we’ve done today.",Object(r.b)("br",null),Object(r.b)("br",null),"In the demo we:  accessed the Cloud Pak for Integration environment and explored the IBM MQ capabilities; deployed an uniform cluster; deployed an MQ Application; validated the uniform cluster connectivity; scaled the MQ application and rebalanced the connections.",Object(r.b)("br",null),Object(r.b)("br",null),"From an operations perspective, we showed how we can easily scale the number of instances of your client applications up and down, without having to reconfigure their connection details and without needing to manually distribute or load balance them.",Object(r.b)("br",null),Object(r.b)("br",null),"And here we demonstrated how to quickly and easily grow the queue manager cluster – adding a new queue manager to the cluster without complex configuration.",Object(r.b)("br",null),Object(r.b)("br",null),"Thank you for your attention.",Object(r.b)("br",null),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},Object(r.b)("a",{parentName:"strong",href:"#place1"},"Go to top")))))}d.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-demos-apic-graphql-demo-script-mdx-92156d0bef385f93c7f7.js.map