{"componentChunkName":"component---src-pages-contributions-mdx","path":"/contributions/","result":{"pageContext":{"frontmatter":{"title":"Contributions","description":"Instructions for developing and contributing to the theme"},"relativePagePath":"/contributions.mdx","titleType":"page","MdxNode":{"id":"509d3ba4-12a0-5a85-8530-ab485f870bb7","children":[],"parent":"3efd89be-9b19-5b49-b567-bde8f8594738","internal":{"content":"---\r\ntitle: Contributions\r\ndescription: Instructions for developing and contributing to the theme\r\n---\r\n\r\n<PageDescription>\r\n\r\nUse this guide to contribute to the theme. We'll show you how to get the development environment set up as quickly as possible so you can start contributing.\r\n\r\n</PageDescription>\r\n\r\n<AnchorLinks>\r\n  <AnchorLink>Project setup</AnchorLink>\r\n  <AnchorLink>Development</AnchorLink>\r\n  <AnchorLink>Work in a branch</AnchorLink>\r\n  <AnchorLink>Sass and CSS Modules</AnchorLink>\r\n  <AnchorLink>VS Code</AnchorLink>\r\n  <AnchorLink>Test pages</AnchorLink>\r\n  <AnchorLink>Publishing</AnchorLink>\r\n</AnchorLinks>\r\n\r\n## Project setup\r\n\r\n1. Go to [gatsby-theme-carbon](https://github.com/carbon-design-system/gatsby-theme-carbon) and click the `Fork` button in the top-right corner.\r\n\r\n1. After it's finished, click on the `Clone or Download` button and copy the contents.\r\n\r\n1. In your terminal, clone the repo into your directory of choice\r\n\r\n   ```sh\r\n   git clone [PASTE_URL_HERE]\r\n   cd gatsby-theme-carbon\r\n   ```\r\n\r\n1. When you clone your forked repo the `origin` is set to your fork by default. You'll want to add a remote that points to the upstream repo.\r\n\r\n   ```sh\r\n   git remote add upstream git@github.com:carbon-design-system/gatsby-theme-carbon.git\r\n   ```\r\n\r\n1. In your terminal, verify that the remotes have been set\r\n\r\n   ```sh\r\n   git remote -v\r\n   ```\r\n\r\n## Development\r\n\r\nWe use [yarn](https://yarnpkg.com/lang/en/docs/install/) and yarn workspaces to develop the Carbon Gatsby theme. This allows us to have a development environment that's closely linked to the theme with minimal setup. Run `yarn install` to install all of the projects dependencies.\r\n\r\nThis project has two packages: the actual theme package (`gatsby-theme-carbon`) and the `example` package. The example package emulates a project which uses the theme. Its only dependencies are Gatsby, React, and the adjacent theme package. The `example` package also serves as the theme's documentation and [website](https://gatsby-theme-carbon.now.sh); it's deployed on every merge to master.\r\n\r\nNew theme development will happen in the theme package while documentation and testing of that change will occur through changes in the example directory.\r\n\r\n### Development scripts\r\n\r\n- `yarn dev` – start the development environment\r\n- `yarn dev:clean` – clear cache and restart dev\r\n- `yarn format` – format your code with prettier\r\n- `yarn lint` - check for errors in your javascript\r\n- `yarn test:prefix` – build and serve with a path prefix\r\n\r\n## Work in a branch\r\n\r\nYou should always start a new project by pulling upstream changes into master and then creating a new branch. This workflow ensures you don't accidentally commit anything to your master branch and get stuck when trying to open a pull request.\r\n\r\n```sh\r\ngit checkout master\r\ngit pull upstream master\r\ngit checkout -b my-branch-name\r\n```\r\n\r\nWhen you're ready to open a pull request, push to your origin remote.\r\n\r\n```sh\r\ngit push origin my-branch-name\r\n```\r\n\r\nYou'll get a message in your terminal with a URL to open up a pull request in the upstream repository. Navigate to that URL and be sure to give a detailed summary of your pull request in the title and body section of the form.\r\n\r\n## Sass and CSS Modules\r\n\r\nFor internal theme components we use [Sass](https://sass-lang.com/documentation/syntax) and [CSS Modules](https://github.com/css-modules/css-modules#css-modules). This allows us to take advantage of the Carbon Design System resources while not worrying about className collisions. By default, each `.scss` file will be supplied with all of the Carbon Sass [variables](https://github.com/carbon-design-system/carbon/blob/master/packages/components/src/globals/scss/_vars.scss): color, spacing, theme, and motion, as well as type and layout mixins, are imported automatically.\r\n\r\nYou should colocate your stylesheet with the component(s) that import it. If the component is `TreeView` then the stylesheet should be `TreeView.module.scss`. All contained within the `TreeView` directory.\r\n\r\n### CSS Modules\r\n\r\nYou don't need to prefix your classes as CSS Modules will generate unique class names for you. Import the class from the `.scss` file.\r\n\r\n```scss path=TreeView.module.scss\r\n.treeView {\r\n  color: $text-01;\r\n}\r\n```\r\n\r\n```jsx path=TreeView.js\r\nimport { treeView } from './style.css';\r\n\r\nconst TreeView = props => <div className={treeView} />;\r\n```\r\n\r\nFor conditionally applying class names, use the `classname` library. Note how we're using a [computed property name](https://tylermcginnis.com/computed-property-names/) for the property being based to `cx`. That's because the className isn't literally `\"long\"` it's a value generated by CSS Modules and placed in the `long` variable.\r\n\r\n```jsx path=TreeView.js\r\nimport cx from 'classname';\r\nimport { treeView, long } from './style.css';\r\n\r\nconst TreeView = props => {\r\n  const className = cx(treeView, {\r\n    [long]: props.long,\r\n  });\r\n  const TreeView = props => <div className={className} />;\r\n};\r\n```\r\n\r\nIf you need to target a global class not processed by CSS Modules, you can do so with the [global selector](https://github.com/css-modules/css-modules#exceptions).\r\n\r\n```scss\r\n:global(.bx--grid) .codeBlock {\r\n  @include carbon--type-style('code-01');\r\n}\r\n```\r\n\r\n## VS Code\r\n\r\nTo get linting error feedback while writing javascript and SCSS in VS Code, install the [stylelint](https://marketplace.visualstudio.com/items?itemName=shinnn.stylelint) and [ESlint](https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint) extensions. We use ESLint's Prettier rules to format and lint all of our JavaScript in one pass. To get your code to format properly on save, add the following to a `.vscode/settings.json` in the root of your project\r\n\r\n```json path=.vscode/settings.json\r\n{\r\n  \"editor.formatOnSave\": true,\r\n  \"[javascript]\": {\r\n    \"editor.formatOnSave\": false\r\n  },\r\n  \"[javascriptreact]\": {\r\n    \"editor.formatOnSave\": false\r\n  },\r\n  \"eslint.autoFixOnSave\": true,\r\n  \"prettier.disableLanguages\": [\"javascript\", \"javascriptreact\"]\r\n}\r\n```\r\n\r\nTo lint the entire project and get errors in your `Problems` tray, you can add the following to a `.vscode/tasks.json` file in the root of your project. You can run these tasks with `cmd+shift+d`\r\n\r\n```json path=.vscode/tasks.json\r\n{\r\n  \"version\": \"2.0.0\",\r\n  \"tasks\": [\r\n    {\r\n      \"type\": \"npm\",\r\n      \"script\": \"lint:js\",\r\n      \"problemMatcher\": \"$eslint-stylish\"\r\n    },\r\n    {\r\n      \"type\": \"npm\",\r\n      \"script\": \"lint:scss\",\r\n      \"problemMatcher\": {\r\n        \"owner\": \"stylelint\",\r\n        \"fileLocation\": [\"relative\", \"${workspaceFolder}\"],\r\n        \"pattern\": [\r\n          {\r\n            \"regexp\": \"^([^\\\\s].*)$\",\r\n            \"file\": 1\r\n          },\r\n          {\r\n            \"regexp\": \"^\\\\s+(\\\\d+):(\\\\d+)\\\\s+(✖|warning)\\\\s+(.*)\\\\s\\\\s+(.*)$\",\r\n            \"line\": 1,\r\n            \"column\": 2,\r\n            \"severity\": 3,\r\n            \"message\": 4,\r\n            \"code\": 5,\r\n            \"loop\": true\r\n          }\r\n        ]\r\n      }\r\n    }\r\n  ]\r\n}\r\n```\r\n\r\n## Test pages\r\n\r\nIf you want to add examples of what you are working on or see changes you've made, you can add an MDX file to `packages/src/pages/test` that will be visible at `(your-server-name)/test/(added-file)` during development. If you do add a page to the `/test` directory, update the below list with the file you added and its purpose to be included with your pull request.\r\n\r\n- [`Spacing audit`](/test/spacing-audit): use this page to test spacing around components when combined in common patterns.\r\n\r\n## Publishing\r\n\r\n1. figure out if it’s patch or feature\r\n2. from the root of the package run `lerna publish patch` or `lerna publish minor`\r\n3. git push upstream master --follow-tags\r\n4. In the project’s [release tab](https://github.com/carbon-design-system/gatsby-theme-carbon/releases), edit the new release to include a summary of new changes\r\n","type":"Mdx","contentDigest":"2bd23e427e87f7591def6bfcd6adf588","owner":"gatsby-plugin-mdx","counter":1375},"frontmatter":{"title":"Contributions","description":"Instructions for developing and contributing to the theme"},"exports":{},"rawBody":"---\r\ntitle: Contributions\r\ndescription: Instructions for developing and contributing to the theme\r\n---\r\n\r\n<PageDescription>\r\n\r\nUse this guide to contribute to the theme. We'll show you how to get the development environment set up as quickly as possible so you can start contributing.\r\n\r\n</PageDescription>\r\n\r\n<AnchorLinks>\r\n  <AnchorLink>Project setup</AnchorLink>\r\n  <AnchorLink>Development</AnchorLink>\r\n  <AnchorLink>Work in a branch</AnchorLink>\r\n  <AnchorLink>Sass and CSS Modules</AnchorLink>\r\n  <AnchorLink>VS Code</AnchorLink>\r\n  <AnchorLink>Test pages</AnchorLink>\r\n  <AnchorLink>Publishing</AnchorLink>\r\n</AnchorLinks>\r\n\r\n## Project setup\r\n\r\n1. Go to [gatsby-theme-carbon](https://github.com/carbon-design-system/gatsby-theme-carbon) and click the `Fork` button in the top-right corner.\r\n\r\n1. After it's finished, click on the `Clone or Download` button and copy the contents.\r\n\r\n1. In your terminal, clone the repo into your directory of choice\r\n\r\n   ```sh\r\n   git clone [PASTE_URL_HERE]\r\n   cd gatsby-theme-carbon\r\n   ```\r\n\r\n1. When you clone your forked repo the `origin` is set to your fork by default. You'll want to add a remote that points to the upstream repo.\r\n\r\n   ```sh\r\n   git remote add upstream git@github.com:carbon-design-system/gatsby-theme-carbon.git\r\n   ```\r\n\r\n1. In your terminal, verify that the remotes have been set\r\n\r\n   ```sh\r\n   git remote -v\r\n   ```\r\n\r\n## Development\r\n\r\nWe use [yarn](https://yarnpkg.com/lang/en/docs/install/) and yarn workspaces to develop the Carbon Gatsby theme. This allows us to have a development environment that's closely linked to the theme with minimal setup. Run `yarn install` to install all of the projects dependencies.\r\n\r\nThis project has two packages: the actual theme package (`gatsby-theme-carbon`) and the `example` package. The example package emulates a project which uses the theme. Its only dependencies are Gatsby, React, and the adjacent theme package. The `example` package also serves as the theme's documentation and [website](https://gatsby-theme-carbon.now.sh); it's deployed on every merge to master.\r\n\r\nNew theme development will happen in the theme package while documentation and testing of that change will occur through changes in the example directory.\r\n\r\n### Development scripts\r\n\r\n- `yarn dev` – start the development environment\r\n- `yarn dev:clean` – clear cache and restart dev\r\n- `yarn format` – format your code with prettier\r\n- `yarn lint` - check for errors in your javascript\r\n- `yarn test:prefix` – build and serve with a path prefix\r\n\r\n## Work in a branch\r\n\r\nYou should always start a new project by pulling upstream changes into master and then creating a new branch. This workflow ensures you don't accidentally commit anything to your master branch and get stuck when trying to open a pull request.\r\n\r\n```sh\r\ngit checkout master\r\ngit pull upstream master\r\ngit checkout -b my-branch-name\r\n```\r\n\r\nWhen you're ready to open a pull request, push to your origin remote.\r\n\r\n```sh\r\ngit push origin my-branch-name\r\n```\r\n\r\nYou'll get a message in your terminal with a URL to open up a pull request in the upstream repository. Navigate to that URL and be sure to give a detailed summary of your pull request in the title and body section of the form.\r\n\r\n## Sass and CSS Modules\r\n\r\nFor internal theme components we use [Sass](https://sass-lang.com/documentation/syntax) and [CSS Modules](https://github.com/css-modules/css-modules#css-modules). This allows us to take advantage of the Carbon Design System resources while not worrying about className collisions. By default, each `.scss` file will be supplied with all of the Carbon Sass [variables](https://github.com/carbon-design-system/carbon/blob/master/packages/components/src/globals/scss/_vars.scss): color, spacing, theme, and motion, as well as type and layout mixins, are imported automatically.\r\n\r\nYou should colocate your stylesheet with the component(s) that import it. If the component is `TreeView` then the stylesheet should be `TreeView.module.scss`. All contained within the `TreeView` directory.\r\n\r\n### CSS Modules\r\n\r\nYou don't need to prefix your classes as CSS Modules will generate unique class names for you. Import the class from the `.scss` file.\r\n\r\n```scss path=TreeView.module.scss\r\n.treeView {\r\n  color: $text-01;\r\n}\r\n```\r\n\r\n```jsx path=TreeView.js\r\nimport { treeView } from './style.css';\r\n\r\nconst TreeView = props => <div className={treeView} />;\r\n```\r\n\r\nFor conditionally applying class names, use the `classname` library. Note how we're using a [computed property name](https://tylermcginnis.com/computed-property-names/) for the property being based to `cx`. That's because the className isn't literally `\"long\"` it's a value generated by CSS Modules and placed in the `long` variable.\r\n\r\n```jsx path=TreeView.js\r\nimport cx from 'classname';\r\nimport { treeView, long } from './style.css';\r\n\r\nconst TreeView = props => {\r\n  const className = cx(treeView, {\r\n    [long]: props.long,\r\n  });\r\n  const TreeView = props => <div className={className} />;\r\n};\r\n```\r\n\r\nIf you need to target a global class not processed by CSS Modules, you can do so with the [global selector](https://github.com/css-modules/css-modules#exceptions).\r\n\r\n```scss\r\n:global(.bx--grid) .codeBlock {\r\n  @include carbon--type-style('code-01');\r\n}\r\n```\r\n\r\n## VS Code\r\n\r\nTo get linting error feedback while writing javascript and SCSS in VS Code, install the [stylelint](https://marketplace.visualstudio.com/items?itemName=shinnn.stylelint) and [ESlint](https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint) extensions. We use ESLint's Prettier rules to format and lint all of our JavaScript in one pass. To get your code to format properly on save, add the following to a `.vscode/settings.json` in the root of your project\r\n\r\n```json path=.vscode/settings.json\r\n{\r\n  \"editor.formatOnSave\": true,\r\n  \"[javascript]\": {\r\n    \"editor.formatOnSave\": false\r\n  },\r\n  \"[javascriptreact]\": {\r\n    \"editor.formatOnSave\": false\r\n  },\r\n  \"eslint.autoFixOnSave\": true,\r\n  \"prettier.disableLanguages\": [\"javascript\", \"javascriptreact\"]\r\n}\r\n```\r\n\r\nTo lint the entire project and get errors in your `Problems` tray, you can add the following to a `.vscode/tasks.json` file in the root of your project. You can run these tasks with `cmd+shift+d`\r\n\r\n```json path=.vscode/tasks.json\r\n{\r\n  \"version\": \"2.0.0\",\r\n  \"tasks\": [\r\n    {\r\n      \"type\": \"npm\",\r\n      \"script\": \"lint:js\",\r\n      \"problemMatcher\": \"$eslint-stylish\"\r\n    },\r\n    {\r\n      \"type\": \"npm\",\r\n      \"script\": \"lint:scss\",\r\n      \"problemMatcher\": {\r\n        \"owner\": \"stylelint\",\r\n        \"fileLocation\": [\"relative\", \"${workspaceFolder}\"],\r\n        \"pattern\": [\r\n          {\r\n            \"regexp\": \"^([^\\\\s].*)$\",\r\n            \"file\": 1\r\n          },\r\n          {\r\n            \"regexp\": \"^\\\\s+(\\\\d+):(\\\\d+)\\\\s+(✖|warning)\\\\s+(.*)\\\\s\\\\s+(.*)$\",\r\n            \"line\": 1,\r\n            \"column\": 2,\r\n            \"severity\": 3,\r\n            \"message\": 4,\r\n            \"code\": 5,\r\n            \"loop\": true\r\n          }\r\n        ]\r\n      }\r\n    }\r\n  ]\r\n}\r\n```\r\n\r\n## Test pages\r\n\r\nIf you want to add examples of what you are working on or see changes you've made, you can add an MDX file to `packages/src/pages/test` that will be visible at `(your-server-name)/test/(added-file)` during development. If you do add a page to the `/test` directory, update the below list with the file you added and its purpose to be included with your pull request.\r\n\r\n- [`Spacing audit`](/test/spacing-audit): use this page to test spacing around components when combined in common patterns.\r\n\r\n## Publishing\r\n\r\n1. figure out if it’s patch or feature\r\n2. from the root of the package run `lerna publish patch` or `lerna publish minor`\r\n3. git push upstream master --follow-tags\r\n4. In the project’s [release tab](https://github.com/carbon-design-system/gatsby-theme-carbon/releases), edit the new release to include a summary of new changes\r\n","fileAbsolutePath":"C:/Users/ruffa/Documents/GitHub/learninghub/src/pages/contributions.mdx"}}},"staticQueryHashes":["1364590287","137577622","137577622","2102389209","2102389209","2456312558","2746626797","2746626797","3018647132","3018647132","3037994772","3037994772","768070550","768070550"]}