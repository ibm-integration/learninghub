{"componentChunkName":"component---src-pages-labs-installing-ea-index-mdx","path":"/labs/installing-ea/","result":{"pageContext":{"frontmatter":{"title":"Installing IBM Event-led solution using CP4I on IBM Cloud"},"relativePagePath":"/labs/installing-ea/index.mdx","titleType":"page","MdxNode":{"id":"8fe6bf6c-fb0f-54ed-b2fa-bd9fcda28adc","children":[],"parent":"6e015d02-f15e-5940-bb5d-071c96448c1b","internal":{"content":"---\r\ntitle: Installing IBM Event-led solution using CP4I on IBM Cloud\r\n---\r\n\r\n\r\n<FeatureCard\r\n  title=\"Installing IBM Event-led solution using CP4I on IBM Cloud\"\r\n  color=\"dark\"\r\n  >\r\n\r\n![banner](images/install-cp4i-banner.jpg)\r\n\r\n</FeatureCard>\r\n\r\n<AnchorLinks>\r\n  <AnchorLink>Lab Overview</AnchorLink>\r\n  <AnchorLink>Prerequisites</AnchorLink>\r\n  <AnchorLink>Installation Overview</AnchorLink>\r\n  <AnchorLink>1 - OpenShift Installation</AnchorLink>\r\n  <AnchorLink>2 – Clone Repositories</AnchorLink>\r\n  <AnchorLink>3 – Set Context</AnchorLink>\r\n  <AnchorLink>4 – Add the Catalog Sources</AnchorLink>\r\n  <AnchorLink>5 – Install the Operators</AnchorLink>\r\n  <AnchorLink>6 – Deploy the Platform UI</AnchorLink>\r\n  <AnchorLink>7 - Deploy Automation Assets</AnchorLink>\r\n  <AnchorLink>8 - Deploy API Connect</AnchorLink>\r\n  <AnchorLink>9 - Deploy App Connect</AnchorLink>\r\n  <AnchorLink>Summary</AnchorLink>\r\n</AnchorLinks>\r\n\r\n***\r\n\r\n## Lab Overview\r\n\r\nA basic knowledge to deliver an Event-led Integration PoC is to know how to install IBM Event Automation solution. There are different deployment model of Event Automation, you can use Event Automation as part of Cloud Pak for Integration or as a standalone solution. In this document we will walk you through applying yaml and running scripts from the command line to install Event Automation on Cloud Pak for Integration. Having a good understand of interacting with your cluster from the CLI is essential when delivering a PoC.\r\n\r\nThe first main goal of this session is to provide you the knowledge about how to install CP4I using command line interface from scratch. Here you will use a Openshift environment provided by TechZone team on IBM Cloud (VMware). However, you are welcome to use any supported OpenShift environment.\r\n\r\nThe second goal is to provide some demo assets (based on Event Automation tutorials) to be ready to progress your PoC.\r\n\r\nIn this session you will learn:\r\n  - how to install and configure a basic IBM Event-led integration solution by deploying CP4I using command line interface from scratch\r\n  - how to deploy Event Streams, Event Endpoint Management, Event Processing and MQ instances.\r\n\r\n***\r\n\r\n## Prerequisites\r\n\r\n- You need to have installed in your machine:\r\n  - <a href=\"https://docs.openshift.com/container-platform/4.8/cli_reference/openshift_cli/getting-started-cli.html\" target=\"_blank\">oc CLI</a> v4.6+.\r\n  - github CLI\r\n  - Bash Shell\r\n  - JAVA v8+\r\n  - <a href=\"https://www.ibm.com/docs/en/api-connect/10.0.x?topic=configuration-installing-toolkit\" target=\"_blank\">apic CLI</a>\r\n\r\nNote some of the tools will be available after you deploy an instance of the capability you are working on. And you also need an account in the folllowing email service to configure APIC:\r\n  - <a href=\"https://mailtrap.io/\" target=\"_blank\">mailtrap</a>\r\n\r\n***\r\n\r\n## Installation Overview\r\n\r\nA IBM Cloud Pak® for Integration installation consists of a Red Hat® OpenShift® Container Platform cluster with one or more Cloud Pak for Integration operators installed and one or more instances of Platform UI deployed.\r\n\r\nIn this document, we will follow the steps below to install Event Automation on CP4I. If you need more details about the CP4I Installation process, please check the product documentation <a href=\"https://www.ibm.com/docs/en/cloud-paks/cp-integration/2022.4?topic=installing-overview-installation\" target=\"_blank\">here</a>.\r\n\r\n  - 1 - OpenShift Installation\r\n  - 2 - Access your OpenShift cluster\r\n  - 3 – Clone Repositories\r\n  - 4 – Set Context\r\n  - 5 – Install Foundational Services\r\n  - 6 – Deploy the Platform Navigator UI\r\n  - 7 - Deploy Event Streams\r\n  - 8 - Deploy Event Endpoint Management (EEM)\r\n  - 9 - Deploy the Enterprise Messaging (MQ)\r\n  - 10 - Deploy Event Processing\r\n\r\n***\r\n\r\n## 1 - OpenShift Installation\r\n\r\nIBM Cloud Pak for Integration brings together IBM’s market-leading middleware capabilities to support a broad range of integration styles and use cases. With powerful deployment, lifecycle management, and production services running on Red Hat OpenShift, it enables clients to leverage the latest agile integration practices, simplify the management of their integration architecture, and reduce cost. Cloud Pak for Integration demands an OpenShift cluster.\r\n\r\nFollow the steps below to provision a Red Hat OpenShift Container Platform cluster on VMware on IBM Cloud.\r\n\r\n1.1. To request an OpenShift Cluster on VMware on IBM Cloud, go <a href=\"https://techzone.ibm.com/my/reservations/create/63a3a25a3a4689001740dbb3\" target=\"_blank\">here</a> and complete the form with the follow details.\r\n\r\n| Field  | Value |\r\n| ------------- | ------------- |\r\n| Purpose  | If you are doing the L4 course, select **Practice/Self Enablement**. <br/> If you are delivering a PoC, select:**Proof-of-Concept** and inform the Sales opportunity.  |\r\n| Purpose Description  | If you are doing the L4 course, enter: **Event-led Integration L4 Course**. <br/> If you are delivering a POC, enter the PoC details.  |\r\n| Preferred Geography  | You are welcome to select the preferred Geography |\r\n\r\n![](images/ocp-install-1.png)\r\n\r\n| Field  | Value |\r\n| ------------- | ------------- |\r\n| OpenShift Version | 4.15 |\r\n| OCS/ODF Size  | ODF - 2 TB |\r\n| Worker Node Count  | 5 |\r\n| Worker Node Flavor  | 16 vCPU x 64 GB - 100 GB ephemeral storage |\r\n\r\n![](images/ocp-install-2.png)\r\n\r\n\r\n1.2 **Agree** with the TechZone Terms and Conditions (A) and click **Submit** (B).\r\n![](images/ocp-install-2.png)\r\n\r\n1.3 You will receive an email confirming the instance is provisioning.\r\n![](images/ocp-install-3.png)\r\n\r\n1.4 You will receive a second email once the environment is provisioned. You should expect this to take between 30 and 120 minutes. Now the status update changed to **Ready**.  Click on **Reservation ID** to open the details page of your new reservation environment.\r\n![](images/ocp-install-4.png)\r\n\r\n1.5 Copy your **Cluster Admin Username** (A) and **Cluster Admin Password** (B). Copy the **OCP Console link** (C).\r\n![](images/ocp-install-5.png)\r\n\r\n***\r\n\r\n## 2 - Access your OpenShift cluster\r\n\r\nIn this section, you access your OpenShift cluster and install the OpenShift command line tool.\r\n\r\n2.1 In a Browser, open the OCP Console link and paste the **Cluster Admin Username** (A) and **Password** (B) copied in the previous step and click **Log in** (C).\r\n![](images/oc-cli-1.png)\r\n\r\n2.2 Great, you are almost ready for the demo. Last but not least important, let’s copy login command to access the cluster by CLI. On the top right, click your **username** (A) and select **Copy login command** (B).\r\n![](images/oc-cli-2.png)\r\n\r\n2.3 Click **Display Token**.\r\n![](images/oc-cli-3.png)\r\n\r\n2.4 Copy the **Log in with this token command** and **paste** on a terminal window.\r\n![](images/oc-cli-4.png)\r\n\r\n![](images/oc-cli-4-2.png)\r\n\r\nThat is it! Now you are ready for the Cloud Pak for Integration installation. Take a breath and let's start to install the Pak.\r\n\r\n***\r\n\r\n## 3 - Clone Repositories\r\n\r\nTo use this guide you will need to clone the demo repo to your workstation. Let's do it now!\r\n\r\n3.1 Open a terminal window and **run** the command below.\r\n```\r\ngh repo clone github.ibm.com/joel-gomez/cp4i-demo\r\n```\r\n\r\n3.2 Open the **cp4i-demo** folder.\r\n```\r\ncd cp4i-demo\r\n```\r\n\r\n***\r\n\r\n## 4 - Set Context\r\n\r\nBased on where you have deployed your OCP cluster you will need to set up some environment variables to inform the installation script about your environment. Let’s do it here!\r\n\r\n4.1 First, you need to define an environment variable to inform CP4I version.\r\n```\r\nexport CP4I_VER=16.1.0\r\n```\r\n\r\n4.2 Now let’s set the OCP type based on the storage classes in your cluster.\r\n```\r\nexport OCP_TYPE=ODF\r\n```\r\n\r\n`Note`: If you are using ROKS cluster, use export OCP_TYPE=ROKS.\r\n\r\n4.3 Set mailtap credentials.\r\n```\r\nexport MAILTRAP_USER=<my-mailtrap-user>\r\nexport MAILTRAP_PWD=<my-mailtrap-pwd>\r\n```\r\n\r\n4.4 If you have provisioned your OCP cluster in Tech Zone you can use the following script to set the proper default storage class.\r\n```\r\nscripts/99-odf-tkz-set-scs.sh\r\n```\r\n\r\n4.5 Your cluster will also need access to pull the container software required to deploy the Cloud Pak. Your Entitlement Key is used to grant access. You can download you entitlement key from My IBM. Click Copy.\r\n\r\n4.6 The IBM Entitled Registry contains software images for the capabilities in IBM Cloud Pak® for Integration. To allow the Cloud Pak for Integration operators to automatically pull those software images, you must first obtain your entitlement key, then add your entitlement key in a pull secret. Replace the my-key with your IBM entitlement key.\r\n```\r\nexport ENT_KEY=<my-key>\r\n```\r\n\r\n4.7 Now, you need a namespace where you will deploy the different capabilities.\r\n```\r\nscripts/02a-cp4i-ns-key-config.sh\r\n```\r\n\r\n***\r\n\r\n## 5 - Install Foundational Services\r\nThe IBM Cloud Pak foundational services operator is no longer installed automatically. Install this operator manually if you need to create an instance that uses identity and access management. That is exactly, what you will do in this section.\r\n\r\n5.1 First you need to have a certificate manager, otherwise, the IBM Cloud Pak foundational services operator installation will not complete. Let’s do it!\r\n```\r\noc apply -f resources/00-cert-manager-namespace.yaml\r\noc apply -f resources/00-cert-manager-operatorgroup.yaml\r\noc apply -f resources/00-cert-manager-subscription.yaml\r\n```\r\n\r\n5.2 Confirm the subscription has been completed successfully before moving to the next step running the following command.\r\n```\r\nSUB_NAME=$(oc get deployment cert-manager-operator-controller-manager -n cert-manager-operator --ignore-not-found -o jsonpath='{.metadata.labels.olm\\.owner}');if [ ! -z \"$SUB_NAME\" ]; then oc get csv/$SUB_NAME -n cert-manager-operator --ignore-not-found -o jsonpath='{.status.phase}';fi;echo\r\n```\r\n\r\nYou should get a response like this:\r\n```\r\nSucceeded\r\n```\r\n\r\n5.3 Now, you need to install Postgress SQL Catalog Source.\r\n```\r\noc apply -f catalog-sources/${CP4I_VER}/01-postgress-sql-catalog-source.yaml\r\n```\r\n\r\n5.4 Confirm the catalog source has been deployed successfully before moving to the next step running the following command.\r\n```\r\noc get catalogsources cloud-native-postgresql-catalog -n openshift-marketplace -o jsonpath='{.status.connectionState.lastObservedState}';echo\r\n```\r\n\r\nYou should get a response like this:\r\n```\r\nREADY\r\n```\r\n\r\n5.5 Ok, now you need to install Common Services Catalog source.\r\n```\r\noc apply -f catalog-sources/${CP4I_VER}/02-common-services-catalog-source.yaml\r\n```\r\n\r\n5.6 Confirm the catalog source has been deployed successfully before moving to the next step running the following command:\r\n```\r\noc get catalogsources opencloud-operators -n openshift-marketplace -o jsonpath='{.status.connectionState.lastObservedState}';echo\r\n```\r\n\r\nYou should get a response like this:\r\n```\r\nREADY\r\n```\r\n\r\n5.7 Create the Common Services namespace.\r\n```\r\noc new-project ibm-common-services\r\n```\r\n\r\n5.8 Now, let’s intall the Foundational Services operator (former Common Services).\r\n```\r\noc apply -f subscriptions/${CP4I_VER}/00-common-service-subscription.yaml\r\n```\r\n\r\n5.9 Confirm the operator has been deployed successfully before moving to the next step running the following command:\r\n```\r\nSUB_NAME=$(oc get deployment/ibm-common-service-operator -n openshift-operators --ignore-not-found -o jsonpath='{.metadata.labels.olm\\.owner}');if [ ! -z \"$SUB_NAME\" ]; then oc get csv/$SUB_NAME --ignore-not-found -o jsonpath='{.status.phase}';fi;echo\r\n```\r\n\r\nYou should get a response like this:\r\n```\r\nSucceeded\r\n```\r\n\r\n***\r\n\r\n## 6 - Deploy the Platform UI\r\n\r\nDeploying the Platform UI allows you to deploy and manage instances from a central location.\r\n\r\n6.1 First, let’s install Platform UI Catalog source.\r\n```\r\noc apply -f catalog-sources/${CP4I_VER}/03-platform-navigator-catalog-source.yaml\r\n```\r\n\r\n6.2 Confirm the catalog source has been deployed successfully before moving to the next step running the following command.\r\n```\r\noc get catalogsources ibm-integration-platform-navigator-catalog -n openshift-marketplace -o jsonpath='{.status.connectionState.lastObservedState}';echo\r\n```\r\n\r\nYou should get a response like this:\r\n```\r\nREADY\r\n```\r\n\r\n6.3 Now, let’s install the Platform UI Operator.\r\n```\r\noc apply -f subscriptions/${CP4I_VER}/01-platform-navigator-subscription.yaml\r\n```\r\n\r\n6.4 Confirm the operator has been deployed successfully before moving to the next step running the following command.\r\n```\r\nSUB_NAME=$(oc get deployment ibm-integration-platform-navigator-operator -n openshift-operators --ignore-not-found -o jsonpath='{.metadata.labels.olm\\.owner}');if [ ! -z \"$SUB_NAME\" ]; then oc get csv/$SUB_NAME --ignore-not-found -o jsonpath='{.status.phase}';fi;echo\r\n```\r\n\r\nYou should get a response like this:\r\n```\r\nSucceeded\r\n```\r\n\r\n6.5 Let’s deploy a Platform UI instance.\r\n```\r\noc apply -f instances/${CP4I_VER}/common/01-platform-navigator-instance.yaml\r\n```\r\n\r\n6.6 Confirm the instance has been deployed successfully before moving to the next step running the following command.\r\n```\r\noc get platformnavigator cp4i-navigator -n tools -o jsonpath='{.status.conditions[0].type}';echo\r\n```\r\n\r\nYou should get a response like this:\r\n```\r\nReady\r\n```\r\n\r\n6.7 Once the Platform UI instance is up and running get the access info.\r\n```\r\nscripts/03b-cp4i-access-info.sh\r\n```\r\n\r\n6.8 Open the Platform UI URL and log in. Note the password is temporary and you will be required to change it. Take note of your new password, you will use it multiple times.\r\n\r\n***\r\n\r\n## 7 - Deploy Event Streams\r\n\r\n7.1 First, let’s intall the Event Streams Catalog Source.\r\n```\r\noc apply -f catalog-sources/${CP4I_VER}/08-event-streams-catalog-source.yaml\r\n```\r\n\r\n7.2 Confirm the catalog source has been deployed successfully before moving to the next step running the following command.\r\n```\r\noc get catalogsources ibm-eventstreams-catalog -n openshift-marketplace -o jsonpath='{.status.connectionState.lastObservedState}';echo\r\n```\r\n\r\nYou should get a response like this:\r\n```\r\nREADY\r\n```\r\n\r\n7.3 Now, let’s install the Event Streams Operator.\r\n```\r\noc apply -f subscriptions/${CP4I_VER}/05-event-streams-subscription.yaml\r\n```\r\n\r\n7.4 Confirm the operator has been deployed successfully before moving to the next step running the following command.\r\n```\r\nSUB_NAME=$(oc get deployment eventstreams-cluster-operator -n openshift-operators --ignore-not-found -o jsonpath='{.metadata.labels.olm\\.owner}');if [ ! -z \"$SUB_NAME\" ]; then oc get csv/$SUB_NAME --ignore-not-found -o jsonpath='{.status.phase}';fi;echo\r\n```\r\n\r\nYou should get a response like this:\r\n```\r\nSucceeded\r\n```\r\n\r\n7.5 Deploy Event Streams instance.\r\n```\r\noc apply -f instances/${CP4I_VER}/${OCP_TYPE}/05-event-streams-instance.yaml\r\n```\r\n\r\n7.6 Confirm the instance has been deployed successfully before moving to the next step running the following command.\r\n```\r\noc get eventstreams es-demo -n tools -o jsonpath='{.status.phase}';echo\r\n```\r\n\r\n`Note`: this will take few minutes, so be patient, and at some point you may see some errors (it is common to receive FAILED message in the first 15 minutes), but at the end (you need to wait few minutes 15/30 minutes) you should get a response like this :\r\n```\r\nReady\r\n```\r\n\r\n7.7 Create topics and users.\r\n```\r\noc apply -f resources/02a-es-initial-config-jgr-topics.yaml\r\noc apply -f resources/02a-es-initial-config-jgr-users.yaml\r\noc apply -f resources/02a-es-initial-config-ea-topics.yaml -n tools\r\noc apply -f resources/02a-es-initial-config-watsonx-topics.yaml -n tools\r\n```\r\n\r\n7.8 Enable Kafka Connect base.\r\n```\r\nscripts/08c-event-streams-kafka-connect-config.sh\r\n```\r\n\r\n7.9 Confirm the instance has been deployed successfully before moving to the next step running the following command.\r\n```\r\noc get kafkaconnects jgr-connect-cluster -n tools -o jsonpath='{.status.conditions[0].type}';echo\r\n```\r\n\r\nNote this will take few minutes, but at the end you should get a response like this:\r\n```\r\nReady\r\n```\r\n\r\n7.10 Enable Kafka Connector Datagen.\r\n```\r\nscripts/08e-event-streams-kafka-connector-datagen-config.sh\r\n```\r\n\r\n7.11 Confirm the instances has been deployed successfully before moving to the next step running the following command.\r\n```\r\noc get kafkaconnector -n tools\r\n```\r\n\r\nNote this will take few minutes, but at the end you should get a response like this.\r\n```\r\nNAME                 CLUSTER               CONNECTOR CLASS                                                         MAX TASKS   READY\r\nkafka-datagen        jgr-connect-cluster   com.ibm.eventautomation.demos.loosehangerjeans.DatagenSourceConnector   1           True\r\nkafka-datagen-avro   jgr-connect-cluster   com.ibm.eventautomation.demos.loosehangerjeans.DatagenSourceConnector   1           True\r\nkafka-datagen-reg    jgr-connect-cluster   com.ibm.eventautomation.demos.loosehangerjeans.DatagenSourceConnector   1           True\r\n```\r\n\r\n***\r\n\r\n## 8 - Deploy Event Endpoint Management (EEM)\r\n\r\n8.1 First, let’s intall the EEM Catalog Source.\r\n```\r\noc apply -f catalog-sources/${CP4I_VER}/13-eem-catalog-source.yaml\r\n```\r\n\r\n8.2 Confirm the catalog source has been deployed successfully before moving to the next step running the following command.\r\n```\r\noc get catalogsources ibm-eventendpointmanagement-catalog -n openshift-marketplace -o jsonpath='{.status.connectionState.lastObservedState}';echo\r\n```\r\n\r\nYou should get a response like this:\r\n```\r\nREADY\r\n```\r\n\r\n8.3 Install EEM Operator.\r\n```\r\noc apply -f subscriptions/${CP4I_VER}/09-eem-subscription.yaml\r\n```\r\n\r\n8.4 Confirm the operator has been deployed successfully before moving to the next step running the following command.\r\n```\r\nSUB_NAME=$(oc get deployment ibm-eem-operator -n openshift-operators --ignore-not-found -o jsonpath='{.metadata.labels.olm\\.owner}');if [ ! -z \"$SUB_NAME\" ]; then oc get csv/$SUB_NAME --ignore-not-found -o jsonpath='{.status.phase}';fi;echo\r\n```\r\n\r\nYou should get a response like this:\r\n```\r\nSucceeded\r\n```\r\n\r\n8.5 Set passwords via environment variables:\r\n```\r\nexport EEM_ADMIN_PWD=<eem-admin-pwd>\r\nexport EEM_USER_PWD=<es-user-pwd>\r\n```\r\n\r\n8.6 Deploy EEM Manager instance:\r\n```\r\nscripts/19a-eem-manager-inst-deploy.sh\r\n```\r\n\r\n8.7 Confirm the instance has been deployed successfully before moving to the next step running the following command:\r\n```\r\noc get eventendpointmanagement eem-demo-mgr -n tools -o jsonpath='{.status.phase}';echo\r\n```\r\n\r\nNote this will take few minutes, so be patient, but at the end you should get a response like this:\r\n```\r\nRunning\r\n```\r\n\r\n8.8 Deploy EEM Gateway instance:\r\n```\r\nscripts/19b-eem-gateway-inst-deploy.sh\r\n```\r\n\r\n8.9 Confirm the instance has been deployed successfully before moving to the next step running the following command.\r\n```\r\noc get eventgateway eem-demo-gw -n tools -o jsonpath='{.status.phase}';echo\r\n```\r\n\r\nNote this will take few minutes, so be patient, but at the end you should get a response like this:\r\n```\r\nRunning\r\n```\r\n\r\n8.10 Integrate EEM with ES instance\r\n```\r\nscripts/19f-eem-es-config.sh\r\n```\r\n\r\n8.11 Get token for post deployment configuration.\r\n\r\na) Log in to your Event Endpoint Management UI from a supported web browser (use the cmd  oc get eem -n tools to determine the login URL for your Event Endpoint Management instance and log in with eem-admin and the password defined earlier).\r\n\r\nb) Click the user icon in the header, and then click Profile to open the Profile page.\r\n\r\nc) Within the Profile page, click Create token to open the dialog.\r\n\r\nd) Read the message and note that API access tokens expire.\r\n\r\ne) Provide a token description that can be used to identify your token and then click Create.\r\n\r\nf) To copy the token, click Copy token.\r\n\r\ng) Click Close to close the dialog.\r\n\r\n\r\n8.12 Set environment variable for token.\r\n```\r\nexport EEM_TOKEN=<my-eem-token>\r\n```\r\n\r\n8.13 Populate EEM Catalog.\r\n```\r\nscripts/19e-eem-manager-config.sh\r\n```\r\n\r\n***\r\n\r\n## 9 - Deploy the Enterprise Messaging (MQ)\r\n\r\n9.1 First, let’s intall the MQ Catalog Source.\r\n```\r\noc apply -f catalog-sources/${CP4I_VER}/09-mq-catalog-source.yaml\r\n```\r\n\r\n9.2 Confirm the catalog source has been deployed successfully before moving to the next step running the following command.\r\n```\r\noc get catalogsources ibmmq-operator-catalogsource -n openshift-marketplace -o jsonpath='{.status.connectionState.lastObservedState}';echo\r\n```\r\n\r\nYou should get a response like this:\r\n```\r\nREADY\r\n```\r\n\r\n9.3 Install MQ Operator.\r\n```\r\noc apply -f subscriptions/${CP4I_VER}/06-mq-subscription.yaml\r\n```\r\n\r\n9.4 Confirm the operator has been deployed successfully before moving to the next step running the following command.\r\n```\r\nSUB_NAME=$(oc get deployment ibm-mq-operator -n openshift-operators --ignore-not-found -o jsonpath='{.metadata.labels.olm\\.owner}');if [ ! -z \"$SUB_NAME\" ]; then oc get csv/$SUB_NAME --ignore-not-found -o jsonpath='{.status.phase}';fi;echo\r\n```\r\n\r\nYou should get a response like this:\r\n```\r\nSucceeded\r\n```\r\n\r\n9.5 Set MQ namespace environment variable.\r\n```\r\nexport MQ_NAMESPACE=cp4i-mq\r\n```\r\n\r\n9.6 Create certificates and extra route.\r\n```\r\nscripts/10a-qmgr-pre-config.sh\r\n```\r\n\r\n9.7 Create configmap with MQ configuration.\r\n```\r\noc apply -f resources/03c-qmgr-mqsc-config.yaml\r\n```\r\n\r\n9.8 Deploy MQ Queue Manager instance.\r\n```\r\nscripts/10b-qmgr-inst-deploy.sh\r\n```\r\n\r\n9.9 Confirm the instance has been deployed successfully before moving to the next step running the following command.\r\n```\r\noc get queuemanager qmgr-demo -n tools -o jsonpath='{.status.phase}';echo\r\n```\r\n\r\nNote this will take few minutes, but at the end you should get a response like this:\r\n```\r\nRunning\r\n```\r\n\r\n9.10 Create CCDT.\r\n```\r\nscripts/10c-qmgr-post-config.sh\r\n```\r\n\r\n9.11 Deploy MQ Source Connector.\r\n```\r\noc apply -f resources/02b-es-mq-source.yaml\r\n```\r\n\r\n9.12 Deploy MQ Sink Connector.\r\n```\r\noc apply -f resources/02c-es-mq-sink.yaml\r\n```\r\n\r\n***\r\n\r\n## 10 - Deploy Event Processing\r\n\r\n10.1 Install Apache Flink Catalog Source.\r\n```\r\noc apply -f catalog-sources/${CP4I_VER}/14-ea-flink-catalog-source.yaml\r\n```\r\n\r\n10.2 Confirm the catalog source has been deployed successfully before moving to the next step running the following command.\r\n```\r\noc get catalogsources ibm-eventautomation-flink-catalog -n openshift-marketplace -o jsonpath='{.status.connectionState.lastObservedState}';echo\r\n```\r\n\r\nYou should get a response like this:\r\n```\r\nREADY\r\n```\r\n\r\n10.3 Install Apache Flink Operator.\r\n```\r\noc apply -f subscriptions/${CP4I_VER}/10-ea-flink-subscription.yaml\r\n```\r\n\r\n10.4 Confirm the operator has been deployed successfully before moving to the next step running the following command.\r\n```\r\nSUB_NAME=$(oc get deployment flink-kubernetes-operator -n openshift-operators --ignore-not-found -o jsonpath='{.metadata.labels.olm\\.owner}');if [ ! -z \"$SUB_NAME\" ]; then oc get csv/$SUB_NAME --ignore-not-found -o jsonpath='{.status.phase}';fi;echo\r\n```\r\n\r\nYou should get a response like this:\r\n```\r\nSucceeded\r\n```\r\n\r\n10.5 Prepare TrustStore for Event Automation.\r\n```\r\nscripts/20d-ea-truststore-config.sh\r\n```\r\n\r\n10.6 Deploy Apache Flink instance.\r\n```\r\noc apply -f instances/${CP4I_VER}/common/21-ea-flink-instance.yaml\r\n```\r\n\r\n10.7 Confirm the instance has been deployed successfully before moving to the next step running the following command.\r\n```\r\noc get flinkdeployment ea-flink-demo -n tools -o jsonpath='{.status.jobManagerDeploymentStatus}';echo\r\n```\r\n\r\nYou should get a response like this:\r\n```\r\nREADY\r\n```\r\n\r\n10.8 Install Event Processing Catalog Source.\r\n```\r\noc apply -f catalog-sources/${CP4I_VER}/15-event-processing-catalog-source.yaml\r\n```\r\n\r\n10.9 Confirm the catalog source has been deployed successfully before moving to the next step running the following command.\r\n```\r\noc get catalogsources ibm-eventprocessing-catalog -n openshift-marketplace -o jsonpath='{.status.connectionState.lastObservedState}';echo\r\n```\r\n\r\nYou should get a response like this:\r\n```\r\nREADY\r\n```\r\n\r\n10.10 Install Event Processing Operator.\r\n```\r\noc apply -f subscriptions/${CP4I_VER}/11-event-processing-subscription.yaml\r\n```\r\n\r\n10.11 Confirm the operator has been deployed successfully before moving to the next step running the following command.\r\n```\r\nSUB_NAME=$(oc get deployment ibm-ep-operator -n openshift-operators --ignore-not-found -o jsonpath='{.metadata.labels.olm\\.owner}');if [ ! -z \"$SUB_NAME\" ]; then oc get csv/$SUB_NAME --ignore-not-found -o jsonpath='{.status.phase}';fi;echo\r\n```\r\n\r\nYou should get a response like this.\r\n```\r\nSucceeded\r\n```\r\n\r\n10.12 Set password via environment variables.\r\n```\r\nexport EP_ADMIN_PWD=<ep-admin-pwd>\r\n```\r\n\r\n10.13 Deploy Event Processing instance.\r\n```\r\nscripts/20b-ea-ep-inst-deploy.sh\r\n```\r\n\r\n10.14 Confirm the instance has been deployed successfully before moving to the next step running the following command.\r\n```\r\noc get eventprocessing ep-demo -n tools -o jsonpath='{.status.phase}';echo\r\n```\r\n\r\nYou should get a response like this:\r\n```\r\nRunning\r\n```\r\n\r\n10.15 Install PGSQL Operator.\r\n```\r\noc apply -f resources/12a-pgsql-subscription.yaml\r\n```\r\n\r\n10.16 Confirm the operator has been deployed successfully before moving to the next step running the following command.\r\n```\r\nSUB_NAME=$(oc get deployment pgo -n openshift-operators --ignore-not-found -o jsonpath='{.metadata.labels.olm\\.owner}');if [ ! -z \"$SUB_NAME\" ]; then oc get csv/$SUB_NAME --ignore-not-found -o jsonpath='{.status.phase}';fi;echo\r\n```\r\n\r\nYou should get a response like this:\r\n```\r\nSucceeded\r\n```\r\n\r\n10.17 Create configmap with db configuration.\r\n```\r\noc apply -f resources/12b-pgsql-config.yaml\r\n```\r\n\r\n10.18 Deploy a PGSQL DB instance.\r\n```\r\noc apply -f resources/12c-pgsql-db.yaml\r\n```\r\n\r\n10.19 Confirm the instance has been deployed successfully before moving to the next step running the following command.\r\n```\r\noc get pods -l \"postgres-operator.crunchydata.com/role=master\" -n tools -o jsonpath='{.items[0].status.conditions[1].status}';echo\r\n```\r\n\r\nAfter a few minutes you should get a response like this:\r\n```\r\nTrue\r\n```\r\n\r\n10.20 Get information to access EA instances.\r\n```\r\nscripts/20c-ea-access-info.sh\r\n```\r\n\r\n***\r\n## Summary\r\n\r\nYou have successfully completed this lab. In this lab you learned:\r\n  - how to install and configure a basic IBM Event-led solution by deploying CP4I using command line interface from scratch.\r\n  - how to deploy vent Streams, Event Endpoint Management, Event Processing and MQ instances.\r\n\r\nIn the <a href=\"https://yourlearning.ibm.com/activity/PLAN-85D073F5A7AA\" target=\"_blank\">IBM Event Automation Level 3 course</a>, you can learn how to demo the IBM Event Automation technology.\r\n","type":"Mdx","contentDigest":"ecbf3da3d280cae40637a1b03e6cd8a9","owner":"gatsby-plugin-mdx","counter":2073},"frontmatter":{"title":"Installing IBM Event-led solution using CP4I on IBM Cloud"},"exports":{},"rawBody":"---\r\ntitle: Installing IBM Event-led solution using CP4I on IBM Cloud\r\n---\r\n\r\n\r\n<FeatureCard\r\n  title=\"Installing IBM Event-led solution using CP4I on IBM Cloud\"\r\n  color=\"dark\"\r\n  >\r\n\r\n![banner](images/install-cp4i-banner.jpg)\r\n\r\n</FeatureCard>\r\n\r\n<AnchorLinks>\r\n  <AnchorLink>Lab Overview</AnchorLink>\r\n  <AnchorLink>Prerequisites</AnchorLink>\r\n  <AnchorLink>Installation Overview</AnchorLink>\r\n  <AnchorLink>1 - OpenShift Installation</AnchorLink>\r\n  <AnchorLink>2 – Clone Repositories</AnchorLink>\r\n  <AnchorLink>3 – Set Context</AnchorLink>\r\n  <AnchorLink>4 – Add the Catalog Sources</AnchorLink>\r\n  <AnchorLink>5 – Install the Operators</AnchorLink>\r\n  <AnchorLink>6 – Deploy the Platform UI</AnchorLink>\r\n  <AnchorLink>7 - Deploy Automation Assets</AnchorLink>\r\n  <AnchorLink>8 - Deploy API Connect</AnchorLink>\r\n  <AnchorLink>9 - Deploy App Connect</AnchorLink>\r\n  <AnchorLink>Summary</AnchorLink>\r\n</AnchorLinks>\r\n\r\n***\r\n\r\n## Lab Overview\r\n\r\nA basic knowledge to deliver an Event-led Integration PoC is to know how to install IBM Event Automation solution. There are different deployment model of Event Automation, you can use Event Automation as part of Cloud Pak for Integration or as a standalone solution. In this document we will walk you through applying yaml and running scripts from the command line to install Event Automation on Cloud Pak for Integration. Having a good understand of interacting with your cluster from the CLI is essential when delivering a PoC.\r\n\r\nThe first main goal of this session is to provide you the knowledge about how to install CP4I using command line interface from scratch. Here you will use a Openshift environment provided by TechZone team on IBM Cloud (VMware). However, you are welcome to use any supported OpenShift environment.\r\n\r\nThe second goal is to provide some demo assets (based on Event Automation tutorials) to be ready to progress your PoC.\r\n\r\nIn this session you will learn:\r\n  - how to install and configure a basic IBM Event-led integration solution by deploying CP4I using command line interface from scratch\r\n  - how to deploy Event Streams, Event Endpoint Management, Event Processing and MQ instances.\r\n\r\n***\r\n\r\n## Prerequisites\r\n\r\n- You need to have installed in your machine:\r\n  - <a href=\"https://docs.openshift.com/container-platform/4.8/cli_reference/openshift_cli/getting-started-cli.html\" target=\"_blank\">oc CLI</a> v4.6+.\r\n  - github CLI\r\n  - Bash Shell\r\n  - JAVA v8+\r\n  - <a href=\"https://www.ibm.com/docs/en/api-connect/10.0.x?topic=configuration-installing-toolkit\" target=\"_blank\">apic CLI</a>\r\n\r\nNote some of the tools will be available after you deploy an instance of the capability you are working on. And you also need an account in the folllowing email service to configure APIC:\r\n  - <a href=\"https://mailtrap.io/\" target=\"_blank\">mailtrap</a>\r\n\r\n***\r\n\r\n## Installation Overview\r\n\r\nA IBM Cloud Pak® for Integration installation consists of a Red Hat® OpenShift® Container Platform cluster with one or more Cloud Pak for Integration operators installed and one or more instances of Platform UI deployed.\r\n\r\nIn this document, we will follow the steps below to install Event Automation on CP4I. If you need more details about the CP4I Installation process, please check the product documentation <a href=\"https://www.ibm.com/docs/en/cloud-paks/cp-integration/2022.4?topic=installing-overview-installation\" target=\"_blank\">here</a>.\r\n\r\n  - 1 - OpenShift Installation\r\n  - 2 - Access your OpenShift cluster\r\n  - 3 – Clone Repositories\r\n  - 4 – Set Context\r\n  - 5 – Install Foundational Services\r\n  - 6 – Deploy the Platform Navigator UI\r\n  - 7 - Deploy Event Streams\r\n  - 8 - Deploy Event Endpoint Management (EEM)\r\n  - 9 - Deploy the Enterprise Messaging (MQ)\r\n  - 10 - Deploy Event Processing\r\n\r\n***\r\n\r\n## 1 - OpenShift Installation\r\n\r\nIBM Cloud Pak for Integration brings together IBM’s market-leading middleware capabilities to support a broad range of integration styles and use cases. With powerful deployment, lifecycle management, and production services running on Red Hat OpenShift, it enables clients to leverage the latest agile integration practices, simplify the management of their integration architecture, and reduce cost. Cloud Pak for Integration demands an OpenShift cluster.\r\n\r\nFollow the steps below to provision a Red Hat OpenShift Container Platform cluster on VMware on IBM Cloud.\r\n\r\n1.1. To request an OpenShift Cluster on VMware on IBM Cloud, go <a href=\"https://techzone.ibm.com/my/reservations/create/63a3a25a3a4689001740dbb3\" target=\"_blank\">here</a> and complete the form with the follow details.\r\n\r\n| Field  | Value |\r\n| ------------- | ------------- |\r\n| Purpose  | If you are doing the L4 course, select **Practice/Self Enablement**. <br/> If you are delivering a PoC, select:**Proof-of-Concept** and inform the Sales opportunity.  |\r\n| Purpose Description  | If you are doing the L4 course, enter: **Event-led Integration L4 Course**. <br/> If you are delivering a POC, enter the PoC details.  |\r\n| Preferred Geography  | You are welcome to select the preferred Geography |\r\n\r\n![](images/ocp-install-1.png)\r\n\r\n| Field  | Value |\r\n| ------------- | ------------- |\r\n| OpenShift Version | 4.15 |\r\n| OCS/ODF Size  | ODF - 2 TB |\r\n| Worker Node Count  | 5 |\r\n| Worker Node Flavor  | 16 vCPU x 64 GB - 100 GB ephemeral storage |\r\n\r\n![](images/ocp-install-2.png)\r\n\r\n\r\n1.2 **Agree** with the TechZone Terms and Conditions (A) and click **Submit** (B).\r\n![](images/ocp-install-2.png)\r\n\r\n1.3 You will receive an email confirming the instance is provisioning.\r\n![](images/ocp-install-3.png)\r\n\r\n1.4 You will receive a second email once the environment is provisioned. You should expect this to take between 30 and 120 minutes. Now the status update changed to **Ready**.  Click on **Reservation ID** to open the details page of your new reservation environment.\r\n![](images/ocp-install-4.png)\r\n\r\n1.5 Copy your **Cluster Admin Username** (A) and **Cluster Admin Password** (B). Copy the **OCP Console link** (C).\r\n![](images/ocp-install-5.png)\r\n\r\n***\r\n\r\n## 2 - Access your OpenShift cluster\r\n\r\nIn this section, you access your OpenShift cluster and install the OpenShift command line tool.\r\n\r\n2.1 In a Browser, open the OCP Console link and paste the **Cluster Admin Username** (A) and **Password** (B) copied in the previous step and click **Log in** (C).\r\n![](images/oc-cli-1.png)\r\n\r\n2.2 Great, you are almost ready for the demo. Last but not least important, let’s copy login command to access the cluster by CLI. On the top right, click your **username** (A) and select **Copy login command** (B).\r\n![](images/oc-cli-2.png)\r\n\r\n2.3 Click **Display Token**.\r\n![](images/oc-cli-3.png)\r\n\r\n2.4 Copy the **Log in with this token command** and **paste** on a terminal window.\r\n![](images/oc-cli-4.png)\r\n\r\n![](images/oc-cli-4-2.png)\r\n\r\nThat is it! Now you are ready for the Cloud Pak for Integration installation. Take a breath and let's start to install the Pak.\r\n\r\n***\r\n\r\n## 3 - Clone Repositories\r\n\r\nTo use this guide you will need to clone the demo repo to your workstation. Let's do it now!\r\n\r\n3.1 Open a terminal window and **run** the command below.\r\n```\r\ngh repo clone github.ibm.com/joel-gomez/cp4i-demo\r\n```\r\n\r\n3.2 Open the **cp4i-demo** folder.\r\n```\r\ncd cp4i-demo\r\n```\r\n\r\n***\r\n\r\n## 4 - Set Context\r\n\r\nBased on where you have deployed your OCP cluster you will need to set up some environment variables to inform the installation script about your environment. Let’s do it here!\r\n\r\n4.1 First, you need to define an environment variable to inform CP4I version.\r\n```\r\nexport CP4I_VER=16.1.0\r\n```\r\n\r\n4.2 Now let’s set the OCP type based on the storage classes in your cluster.\r\n```\r\nexport OCP_TYPE=ODF\r\n```\r\n\r\n`Note`: If you are using ROKS cluster, use export OCP_TYPE=ROKS.\r\n\r\n4.3 Set mailtap credentials.\r\n```\r\nexport MAILTRAP_USER=<my-mailtrap-user>\r\nexport MAILTRAP_PWD=<my-mailtrap-pwd>\r\n```\r\n\r\n4.4 If you have provisioned your OCP cluster in Tech Zone you can use the following script to set the proper default storage class.\r\n```\r\nscripts/99-odf-tkz-set-scs.sh\r\n```\r\n\r\n4.5 Your cluster will also need access to pull the container software required to deploy the Cloud Pak. Your Entitlement Key is used to grant access. You can download you entitlement key from My IBM. Click Copy.\r\n\r\n4.6 The IBM Entitled Registry contains software images for the capabilities in IBM Cloud Pak® for Integration. To allow the Cloud Pak for Integration operators to automatically pull those software images, you must first obtain your entitlement key, then add your entitlement key in a pull secret. Replace the my-key with your IBM entitlement key.\r\n```\r\nexport ENT_KEY=<my-key>\r\n```\r\n\r\n4.7 Now, you need a namespace where you will deploy the different capabilities.\r\n```\r\nscripts/02a-cp4i-ns-key-config.sh\r\n```\r\n\r\n***\r\n\r\n## 5 - Install Foundational Services\r\nThe IBM Cloud Pak foundational services operator is no longer installed automatically. Install this operator manually if you need to create an instance that uses identity and access management. That is exactly, what you will do in this section.\r\n\r\n5.1 First you need to have a certificate manager, otherwise, the IBM Cloud Pak foundational services operator installation will not complete. Let’s do it!\r\n```\r\noc apply -f resources/00-cert-manager-namespace.yaml\r\noc apply -f resources/00-cert-manager-operatorgroup.yaml\r\noc apply -f resources/00-cert-manager-subscription.yaml\r\n```\r\n\r\n5.2 Confirm the subscription has been completed successfully before moving to the next step running the following command.\r\n```\r\nSUB_NAME=$(oc get deployment cert-manager-operator-controller-manager -n cert-manager-operator --ignore-not-found -o jsonpath='{.metadata.labels.olm\\.owner}');if [ ! -z \"$SUB_NAME\" ]; then oc get csv/$SUB_NAME -n cert-manager-operator --ignore-not-found -o jsonpath='{.status.phase}';fi;echo\r\n```\r\n\r\nYou should get a response like this:\r\n```\r\nSucceeded\r\n```\r\n\r\n5.3 Now, you need to install Postgress SQL Catalog Source.\r\n```\r\noc apply -f catalog-sources/${CP4I_VER}/01-postgress-sql-catalog-source.yaml\r\n```\r\n\r\n5.4 Confirm the catalog source has been deployed successfully before moving to the next step running the following command.\r\n```\r\noc get catalogsources cloud-native-postgresql-catalog -n openshift-marketplace -o jsonpath='{.status.connectionState.lastObservedState}';echo\r\n```\r\n\r\nYou should get a response like this:\r\n```\r\nREADY\r\n```\r\n\r\n5.5 Ok, now you need to install Common Services Catalog source.\r\n```\r\noc apply -f catalog-sources/${CP4I_VER}/02-common-services-catalog-source.yaml\r\n```\r\n\r\n5.6 Confirm the catalog source has been deployed successfully before moving to the next step running the following command:\r\n```\r\noc get catalogsources opencloud-operators -n openshift-marketplace -o jsonpath='{.status.connectionState.lastObservedState}';echo\r\n```\r\n\r\nYou should get a response like this:\r\n```\r\nREADY\r\n```\r\n\r\n5.7 Create the Common Services namespace.\r\n```\r\noc new-project ibm-common-services\r\n```\r\n\r\n5.8 Now, let’s intall the Foundational Services operator (former Common Services).\r\n```\r\noc apply -f subscriptions/${CP4I_VER}/00-common-service-subscription.yaml\r\n```\r\n\r\n5.9 Confirm the operator has been deployed successfully before moving to the next step running the following command:\r\n```\r\nSUB_NAME=$(oc get deployment/ibm-common-service-operator -n openshift-operators --ignore-not-found -o jsonpath='{.metadata.labels.olm\\.owner}');if [ ! -z \"$SUB_NAME\" ]; then oc get csv/$SUB_NAME --ignore-not-found -o jsonpath='{.status.phase}';fi;echo\r\n```\r\n\r\nYou should get a response like this:\r\n```\r\nSucceeded\r\n```\r\n\r\n***\r\n\r\n## 6 - Deploy the Platform UI\r\n\r\nDeploying the Platform UI allows you to deploy and manage instances from a central location.\r\n\r\n6.1 First, let’s install Platform UI Catalog source.\r\n```\r\noc apply -f catalog-sources/${CP4I_VER}/03-platform-navigator-catalog-source.yaml\r\n```\r\n\r\n6.2 Confirm the catalog source has been deployed successfully before moving to the next step running the following command.\r\n```\r\noc get catalogsources ibm-integration-platform-navigator-catalog -n openshift-marketplace -o jsonpath='{.status.connectionState.lastObservedState}';echo\r\n```\r\n\r\nYou should get a response like this:\r\n```\r\nREADY\r\n```\r\n\r\n6.3 Now, let’s install the Platform UI Operator.\r\n```\r\noc apply -f subscriptions/${CP4I_VER}/01-platform-navigator-subscription.yaml\r\n```\r\n\r\n6.4 Confirm the operator has been deployed successfully before moving to the next step running the following command.\r\n```\r\nSUB_NAME=$(oc get deployment ibm-integration-platform-navigator-operator -n openshift-operators --ignore-not-found -o jsonpath='{.metadata.labels.olm\\.owner}');if [ ! -z \"$SUB_NAME\" ]; then oc get csv/$SUB_NAME --ignore-not-found -o jsonpath='{.status.phase}';fi;echo\r\n```\r\n\r\nYou should get a response like this:\r\n```\r\nSucceeded\r\n```\r\n\r\n6.5 Let’s deploy a Platform UI instance.\r\n```\r\noc apply -f instances/${CP4I_VER}/common/01-platform-navigator-instance.yaml\r\n```\r\n\r\n6.6 Confirm the instance has been deployed successfully before moving to the next step running the following command.\r\n```\r\noc get platformnavigator cp4i-navigator -n tools -o jsonpath='{.status.conditions[0].type}';echo\r\n```\r\n\r\nYou should get a response like this:\r\n```\r\nReady\r\n```\r\n\r\n6.7 Once the Platform UI instance is up and running get the access info.\r\n```\r\nscripts/03b-cp4i-access-info.sh\r\n```\r\n\r\n6.8 Open the Platform UI URL and log in. Note the password is temporary and you will be required to change it. Take note of your new password, you will use it multiple times.\r\n\r\n***\r\n\r\n## 7 - Deploy Event Streams\r\n\r\n7.1 First, let’s intall the Event Streams Catalog Source.\r\n```\r\noc apply -f catalog-sources/${CP4I_VER}/08-event-streams-catalog-source.yaml\r\n```\r\n\r\n7.2 Confirm the catalog source has been deployed successfully before moving to the next step running the following command.\r\n```\r\noc get catalogsources ibm-eventstreams-catalog -n openshift-marketplace -o jsonpath='{.status.connectionState.lastObservedState}';echo\r\n```\r\n\r\nYou should get a response like this:\r\n```\r\nREADY\r\n```\r\n\r\n7.3 Now, let’s install the Event Streams Operator.\r\n```\r\noc apply -f subscriptions/${CP4I_VER}/05-event-streams-subscription.yaml\r\n```\r\n\r\n7.4 Confirm the operator has been deployed successfully before moving to the next step running the following command.\r\n```\r\nSUB_NAME=$(oc get deployment eventstreams-cluster-operator -n openshift-operators --ignore-not-found -o jsonpath='{.metadata.labels.olm\\.owner}');if [ ! -z \"$SUB_NAME\" ]; then oc get csv/$SUB_NAME --ignore-not-found -o jsonpath='{.status.phase}';fi;echo\r\n```\r\n\r\nYou should get a response like this:\r\n```\r\nSucceeded\r\n```\r\n\r\n7.5 Deploy Event Streams instance.\r\n```\r\noc apply -f instances/${CP4I_VER}/${OCP_TYPE}/05-event-streams-instance.yaml\r\n```\r\n\r\n7.6 Confirm the instance has been deployed successfully before moving to the next step running the following command.\r\n```\r\noc get eventstreams es-demo -n tools -o jsonpath='{.status.phase}';echo\r\n```\r\n\r\n`Note`: this will take few minutes, so be patient, and at some point you may see some errors (it is common to receive FAILED message in the first 15 minutes), but at the end (you need to wait few minutes 15/30 minutes) you should get a response like this :\r\n```\r\nReady\r\n```\r\n\r\n7.7 Create topics and users.\r\n```\r\noc apply -f resources/02a-es-initial-config-jgr-topics.yaml\r\noc apply -f resources/02a-es-initial-config-jgr-users.yaml\r\noc apply -f resources/02a-es-initial-config-ea-topics.yaml -n tools\r\noc apply -f resources/02a-es-initial-config-watsonx-topics.yaml -n tools\r\n```\r\n\r\n7.8 Enable Kafka Connect base.\r\n```\r\nscripts/08c-event-streams-kafka-connect-config.sh\r\n```\r\n\r\n7.9 Confirm the instance has been deployed successfully before moving to the next step running the following command.\r\n```\r\noc get kafkaconnects jgr-connect-cluster -n tools -o jsonpath='{.status.conditions[0].type}';echo\r\n```\r\n\r\nNote this will take few minutes, but at the end you should get a response like this:\r\n```\r\nReady\r\n```\r\n\r\n7.10 Enable Kafka Connector Datagen.\r\n```\r\nscripts/08e-event-streams-kafka-connector-datagen-config.sh\r\n```\r\n\r\n7.11 Confirm the instances has been deployed successfully before moving to the next step running the following command.\r\n```\r\noc get kafkaconnector -n tools\r\n```\r\n\r\nNote this will take few minutes, but at the end you should get a response like this.\r\n```\r\nNAME                 CLUSTER               CONNECTOR CLASS                                                         MAX TASKS   READY\r\nkafka-datagen        jgr-connect-cluster   com.ibm.eventautomation.demos.loosehangerjeans.DatagenSourceConnector   1           True\r\nkafka-datagen-avro   jgr-connect-cluster   com.ibm.eventautomation.demos.loosehangerjeans.DatagenSourceConnector   1           True\r\nkafka-datagen-reg    jgr-connect-cluster   com.ibm.eventautomation.demos.loosehangerjeans.DatagenSourceConnector   1           True\r\n```\r\n\r\n***\r\n\r\n## 8 - Deploy Event Endpoint Management (EEM)\r\n\r\n8.1 First, let’s intall the EEM Catalog Source.\r\n```\r\noc apply -f catalog-sources/${CP4I_VER}/13-eem-catalog-source.yaml\r\n```\r\n\r\n8.2 Confirm the catalog source has been deployed successfully before moving to the next step running the following command.\r\n```\r\noc get catalogsources ibm-eventendpointmanagement-catalog -n openshift-marketplace -o jsonpath='{.status.connectionState.lastObservedState}';echo\r\n```\r\n\r\nYou should get a response like this:\r\n```\r\nREADY\r\n```\r\n\r\n8.3 Install EEM Operator.\r\n```\r\noc apply -f subscriptions/${CP4I_VER}/09-eem-subscription.yaml\r\n```\r\n\r\n8.4 Confirm the operator has been deployed successfully before moving to the next step running the following command.\r\n```\r\nSUB_NAME=$(oc get deployment ibm-eem-operator -n openshift-operators --ignore-not-found -o jsonpath='{.metadata.labels.olm\\.owner}');if [ ! -z \"$SUB_NAME\" ]; then oc get csv/$SUB_NAME --ignore-not-found -o jsonpath='{.status.phase}';fi;echo\r\n```\r\n\r\nYou should get a response like this:\r\n```\r\nSucceeded\r\n```\r\n\r\n8.5 Set passwords via environment variables:\r\n```\r\nexport EEM_ADMIN_PWD=<eem-admin-pwd>\r\nexport EEM_USER_PWD=<es-user-pwd>\r\n```\r\n\r\n8.6 Deploy EEM Manager instance:\r\n```\r\nscripts/19a-eem-manager-inst-deploy.sh\r\n```\r\n\r\n8.7 Confirm the instance has been deployed successfully before moving to the next step running the following command:\r\n```\r\noc get eventendpointmanagement eem-demo-mgr -n tools -o jsonpath='{.status.phase}';echo\r\n```\r\n\r\nNote this will take few minutes, so be patient, but at the end you should get a response like this:\r\n```\r\nRunning\r\n```\r\n\r\n8.8 Deploy EEM Gateway instance:\r\n```\r\nscripts/19b-eem-gateway-inst-deploy.sh\r\n```\r\n\r\n8.9 Confirm the instance has been deployed successfully before moving to the next step running the following command.\r\n```\r\noc get eventgateway eem-demo-gw -n tools -o jsonpath='{.status.phase}';echo\r\n```\r\n\r\nNote this will take few minutes, so be patient, but at the end you should get a response like this:\r\n```\r\nRunning\r\n```\r\n\r\n8.10 Integrate EEM with ES instance\r\n```\r\nscripts/19f-eem-es-config.sh\r\n```\r\n\r\n8.11 Get token for post deployment configuration.\r\n\r\na) Log in to your Event Endpoint Management UI from a supported web browser (use the cmd  oc get eem -n tools to determine the login URL for your Event Endpoint Management instance and log in with eem-admin and the password defined earlier).\r\n\r\nb) Click the user icon in the header, and then click Profile to open the Profile page.\r\n\r\nc) Within the Profile page, click Create token to open the dialog.\r\n\r\nd) Read the message and note that API access tokens expire.\r\n\r\ne) Provide a token description that can be used to identify your token and then click Create.\r\n\r\nf) To copy the token, click Copy token.\r\n\r\ng) Click Close to close the dialog.\r\n\r\n\r\n8.12 Set environment variable for token.\r\n```\r\nexport EEM_TOKEN=<my-eem-token>\r\n```\r\n\r\n8.13 Populate EEM Catalog.\r\n```\r\nscripts/19e-eem-manager-config.sh\r\n```\r\n\r\n***\r\n\r\n## 9 - Deploy the Enterprise Messaging (MQ)\r\n\r\n9.1 First, let’s intall the MQ Catalog Source.\r\n```\r\noc apply -f catalog-sources/${CP4I_VER}/09-mq-catalog-source.yaml\r\n```\r\n\r\n9.2 Confirm the catalog source has been deployed successfully before moving to the next step running the following command.\r\n```\r\noc get catalogsources ibmmq-operator-catalogsource -n openshift-marketplace -o jsonpath='{.status.connectionState.lastObservedState}';echo\r\n```\r\n\r\nYou should get a response like this:\r\n```\r\nREADY\r\n```\r\n\r\n9.3 Install MQ Operator.\r\n```\r\noc apply -f subscriptions/${CP4I_VER}/06-mq-subscription.yaml\r\n```\r\n\r\n9.4 Confirm the operator has been deployed successfully before moving to the next step running the following command.\r\n```\r\nSUB_NAME=$(oc get deployment ibm-mq-operator -n openshift-operators --ignore-not-found -o jsonpath='{.metadata.labels.olm\\.owner}');if [ ! -z \"$SUB_NAME\" ]; then oc get csv/$SUB_NAME --ignore-not-found -o jsonpath='{.status.phase}';fi;echo\r\n```\r\n\r\nYou should get a response like this:\r\n```\r\nSucceeded\r\n```\r\n\r\n9.5 Set MQ namespace environment variable.\r\n```\r\nexport MQ_NAMESPACE=cp4i-mq\r\n```\r\n\r\n9.6 Create certificates and extra route.\r\n```\r\nscripts/10a-qmgr-pre-config.sh\r\n```\r\n\r\n9.7 Create configmap with MQ configuration.\r\n```\r\noc apply -f resources/03c-qmgr-mqsc-config.yaml\r\n```\r\n\r\n9.8 Deploy MQ Queue Manager instance.\r\n```\r\nscripts/10b-qmgr-inst-deploy.sh\r\n```\r\n\r\n9.9 Confirm the instance has been deployed successfully before moving to the next step running the following command.\r\n```\r\noc get queuemanager qmgr-demo -n tools -o jsonpath='{.status.phase}';echo\r\n```\r\n\r\nNote this will take few minutes, but at the end you should get a response like this:\r\n```\r\nRunning\r\n```\r\n\r\n9.10 Create CCDT.\r\n```\r\nscripts/10c-qmgr-post-config.sh\r\n```\r\n\r\n9.11 Deploy MQ Source Connector.\r\n```\r\noc apply -f resources/02b-es-mq-source.yaml\r\n```\r\n\r\n9.12 Deploy MQ Sink Connector.\r\n```\r\noc apply -f resources/02c-es-mq-sink.yaml\r\n```\r\n\r\n***\r\n\r\n## 10 - Deploy Event Processing\r\n\r\n10.1 Install Apache Flink Catalog Source.\r\n```\r\noc apply -f catalog-sources/${CP4I_VER}/14-ea-flink-catalog-source.yaml\r\n```\r\n\r\n10.2 Confirm the catalog source has been deployed successfully before moving to the next step running the following command.\r\n```\r\noc get catalogsources ibm-eventautomation-flink-catalog -n openshift-marketplace -o jsonpath='{.status.connectionState.lastObservedState}';echo\r\n```\r\n\r\nYou should get a response like this:\r\n```\r\nREADY\r\n```\r\n\r\n10.3 Install Apache Flink Operator.\r\n```\r\noc apply -f subscriptions/${CP4I_VER}/10-ea-flink-subscription.yaml\r\n```\r\n\r\n10.4 Confirm the operator has been deployed successfully before moving to the next step running the following command.\r\n```\r\nSUB_NAME=$(oc get deployment flink-kubernetes-operator -n openshift-operators --ignore-not-found -o jsonpath='{.metadata.labels.olm\\.owner}');if [ ! -z \"$SUB_NAME\" ]; then oc get csv/$SUB_NAME --ignore-not-found -o jsonpath='{.status.phase}';fi;echo\r\n```\r\n\r\nYou should get a response like this:\r\n```\r\nSucceeded\r\n```\r\n\r\n10.5 Prepare TrustStore for Event Automation.\r\n```\r\nscripts/20d-ea-truststore-config.sh\r\n```\r\n\r\n10.6 Deploy Apache Flink instance.\r\n```\r\noc apply -f instances/${CP4I_VER}/common/21-ea-flink-instance.yaml\r\n```\r\n\r\n10.7 Confirm the instance has been deployed successfully before moving to the next step running the following command.\r\n```\r\noc get flinkdeployment ea-flink-demo -n tools -o jsonpath='{.status.jobManagerDeploymentStatus}';echo\r\n```\r\n\r\nYou should get a response like this:\r\n```\r\nREADY\r\n```\r\n\r\n10.8 Install Event Processing Catalog Source.\r\n```\r\noc apply -f catalog-sources/${CP4I_VER}/15-event-processing-catalog-source.yaml\r\n```\r\n\r\n10.9 Confirm the catalog source has been deployed successfully before moving to the next step running the following command.\r\n```\r\noc get catalogsources ibm-eventprocessing-catalog -n openshift-marketplace -o jsonpath='{.status.connectionState.lastObservedState}';echo\r\n```\r\n\r\nYou should get a response like this:\r\n```\r\nREADY\r\n```\r\n\r\n10.10 Install Event Processing Operator.\r\n```\r\noc apply -f subscriptions/${CP4I_VER}/11-event-processing-subscription.yaml\r\n```\r\n\r\n10.11 Confirm the operator has been deployed successfully before moving to the next step running the following command.\r\n```\r\nSUB_NAME=$(oc get deployment ibm-ep-operator -n openshift-operators --ignore-not-found -o jsonpath='{.metadata.labels.olm\\.owner}');if [ ! -z \"$SUB_NAME\" ]; then oc get csv/$SUB_NAME --ignore-not-found -o jsonpath='{.status.phase}';fi;echo\r\n```\r\n\r\nYou should get a response like this.\r\n```\r\nSucceeded\r\n```\r\n\r\n10.12 Set password via environment variables.\r\n```\r\nexport EP_ADMIN_PWD=<ep-admin-pwd>\r\n```\r\n\r\n10.13 Deploy Event Processing instance.\r\n```\r\nscripts/20b-ea-ep-inst-deploy.sh\r\n```\r\n\r\n10.14 Confirm the instance has been deployed successfully before moving to the next step running the following command.\r\n```\r\noc get eventprocessing ep-demo -n tools -o jsonpath='{.status.phase}';echo\r\n```\r\n\r\nYou should get a response like this:\r\n```\r\nRunning\r\n```\r\n\r\n10.15 Install PGSQL Operator.\r\n```\r\noc apply -f resources/12a-pgsql-subscription.yaml\r\n```\r\n\r\n10.16 Confirm the operator has been deployed successfully before moving to the next step running the following command.\r\n```\r\nSUB_NAME=$(oc get deployment pgo -n openshift-operators --ignore-not-found -o jsonpath='{.metadata.labels.olm\\.owner}');if [ ! -z \"$SUB_NAME\" ]; then oc get csv/$SUB_NAME --ignore-not-found -o jsonpath='{.status.phase}';fi;echo\r\n```\r\n\r\nYou should get a response like this:\r\n```\r\nSucceeded\r\n```\r\n\r\n10.17 Create configmap with db configuration.\r\n```\r\noc apply -f resources/12b-pgsql-config.yaml\r\n```\r\n\r\n10.18 Deploy a PGSQL DB instance.\r\n```\r\noc apply -f resources/12c-pgsql-db.yaml\r\n```\r\n\r\n10.19 Confirm the instance has been deployed successfully before moving to the next step running the following command.\r\n```\r\noc get pods -l \"postgres-operator.crunchydata.com/role=master\" -n tools -o jsonpath='{.items[0].status.conditions[1].status}';echo\r\n```\r\n\r\nAfter a few minutes you should get a response like this:\r\n```\r\nTrue\r\n```\r\n\r\n10.20 Get information to access EA instances.\r\n```\r\nscripts/20c-ea-access-info.sh\r\n```\r\n\r\n***\r\n## Summary\r\n\r\nYou have successfully completed this lab. In this lab you learned:\r\n  - how to install and configure a basic IBM Event-led solution by deploying CP4I using command line interface from scratch.\r\n  - how to deploy vent Streams, Event Endpoint Management, Event Processing and MQ instances.\r\n\r\nIn the <a href=\"https://yourlearning.ibm.com/activity/PLAN-85D073F5A7AA\" target=\"_blank\">IBM Event Automation Level 3 course</a>, you can learn how to demo the IBM Event Automation technology.\r\n","fileAbsolutePath":"C:/Users/ruffa/Documents/GitHub/learninghub/src/pages/labs/installing-ea/index.mdx"}}},"staticQueryHashes":["1364590287","137577622","137577622","2102389209","2102389209","2456312558","2746626797","2746626797","3018647132","3018647132","3037994772","3037994772","768070550","768070550"]}