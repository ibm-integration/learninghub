{"componentChunkName":"component---src-pages-demos-mq-ace-techsales-demo-script-mdx","path":"/demos/mq-ace-techsales/demo-script/","result":{"pageContext":{"frontmatter":{"title":"MQ and ACE Demo","description":"MQ and ACE Demo","tabs":["Demo preparation","Demo script"]},"relativePagePath":"/demos/mq-ace-techsales/demo-script.mdx","titleType":"page","MdxNode":{"id":"b7108dc8-0c6e-5f4f-913d-e4561341e8ee","children":[],"parent":"fa9bec76-075a-5b39-9d6a-680de163e0c1","internal":{"content":"---\r\ntitle: MQ and ACE Demo\r\ndescription: MQ and ACE Demo\r\ntabs: [ 'Demo preparation', 'Demo script']\r\n---\r\n\r\n\r\n<FeatureCard\r\n  title=\"Access backend systems using Messaging and Integration - Demo Script\"\r\n  color=\"dark\"\r\n  >\r\n\r\n![banner](./images/messaging-banner.jpg)\r\n\r\n</FeatureCard>\r\n\r\n<span id=\"place1\"></span>\r\n\r\n<details>\r\n\r\n<summary>Introduction</summary>\r\n<br/>\r\nEvery enterprise in today's markets must offer robust digital products and services, often requiring integration of complex capabilities and systems to deliver one coherent whole. IBM® Cloud Pak for Integration offers a simplified solution to this integration challenge, allowing the enterprise to modernize its processes while positioning itself for future innovation. Messaging is one of the key capabilities of IBM Cloud Pak for Integration.\r\n<br/><br/>\r\nIBM MQ provides a universal messaging backbone with robust connectivity for flexible and reliable messaging for applications and the integration of existing IT assets.  IBM MQ simplifies, accelerates and facilitates the reliable exchange of data with a flexible and security-rich messaging solution that’s trusted by some of the world’s most successful enterprises. With IBM MQ, you ensure you receive the information you need, when you need it — and receive it only once.\r\n<br/><br/>\r\nAutomating customer interactions effectively can mean the difference between a satisfied customer (one who will want to do more business with you in the future) or a disappointed customer (who will afterwards be looking for alternative options).\r\n<br/><br/>\r\nAutomation in this context can also reduce the manual steps involved in customer interactions, cut down on data entry into multiple different applications, and potentially eliminate errors and delays – all of which are additional costs to your business.\r\n<br/><br/>\r\nThe demo will showcase ways to automate customer interactions. To implement this automation, we will use both Messaging and Integrations to back-end applications.\r\n<br/><br/>\r\nLet's get started!<br/><br/>\r\n\r\n(Demo Slides <a href=\"https://github.com/ibm-integration/learninghub/blob/main/src/pages/demos/mq-ace-techsales/files/MQACESlides.pptx\" target=\"_blank\" rel=\"noreferrer\">here</a>)\r\n<br/>\r\n</details>\r\n\r\n<details>\r\n<summary>1 - Accessing the environment</summary>\r\n\r\n<br/>\r\n\r\n| **1.1** | **Log in to Cloud Pak for Integration** |\r\n| :--- | :--- |\r\n| **Narration** | Let’s see IBM MQ and IBM App Connect in action. Here we have an IBM Cloud Pak for Integration environment with IBM MQ and IBM App Connector operators installed. In our demonstration, we’re leveraging the cloud version of the product which is available from IBM Cloud. First, I’ll log into the environment. |\r\n| **Action** &nbsp; 1.1.1 | Open **Cloud Pak for Integration page** and **log in** with your **username** and **password**. <br/><br/>![](images/access-env-1-1.png)<br/>|\r\n\r\n<br/>\r\n\r\n| **1.2** | **View the Cloud Pak for Integration instances** |\r\n| :--- | :--- |\r\n| **Narration** | Welcome to IBM Cloud Pak for Integration! We’re now at the home screen showing all the capabilities of the Pak, brought together in one place. Specialized integration capabilities — for API management, application integration, messaging, and more — are built on top of powerful automation services. <br/><br/>As you can see, you are able to access all the integration capabilities your team needs through a single interface. In this demo, we will use App Connect for application integration to access our company’s backend systems. IBM MQ will serve as the universal messaging backbone, providing robust connectivity for flexible and reliable messaging between applications — as well as for integration of existing IT assets. |\r\n| **Action** &nbsp; 1.2.1 | Show the **Instances page** and open the **Messaging** capability (qmgr-demo).<br/><br/>'Note'- If you didn't complete the Uniform Clusters demo before this demo, you don't have the uniform clusters instance. No problem at all! Just ignore them in the picture below. You don't need them. In this demo you only use the qmgr-demo instance.<br/><br/>If necessary, accept the security risks.<br/><br/>![](images/access-env-1-2.png)<br/> |\r\n\r\n\r\n**[Go to top](#place1)**\r\n\r\n</details>\r\n\r\n<details>\r\n<summary>2 - Create a queue</summary>\r\n\r\n<br/>\r\n\r\n| **2.1** | **View the IBM MQ home screen** |\r\n| :--- | :--- |\r\n| **Narration** | Let’s examine the capabilities of IBM MQ on Cloud Pak for Integration. IBM MQ offers proven, enterprise-grade messaging capabilities that skillfully and safely move information between applications. You can run IBM MQ in the pre-packaged container provided in IBM Cloud Pak for Integration.<br/><br/>Here we are on MQ Console page of a pre-created Queue Manager. From here you can manage your local queues or create a new queue.<br/><br/>IBM MQ can be managed using a variety of tools: from the IBM MQ Explorer GUI; as well as through scripted or interactive command line tools; or programmatically.<br/><br/>Let’s explore how to create a new queue.<br/><br/> For demo purposes, we will create the queue using the Graphic User Interface, however in a production scenario you will create the queue using a ConfigMap that allows you to decouple environment-specific configuration from your container images, so that your applications are easily portable. |\r\n| **Action** &nbsp; 2.1.1 | Click **Create a queue**. <br/><br/>![](images/create-queue-2-1-1.png)<br/> |\r\n\r\n| **2.2** | **Choose queue type** |\r\n| :--- | :--- |\r\n| **Narration** | An IBM MQ messaging system is made up of one or more queue managers. Queue managers are where messaging resources, such as queues, are configured. Queue managers are also what applications connect to, either running on the same system as the queue manager itself or over the network.<br/><br/>A network of connected queue managers supports asynchronous routing of messages between systems, where producing and consuming applications are connected to different queue managers.<br/><br/>In this demo, we will use a Local queue that is on the queue manager we are connected to, QMGRDEMO.|\r\n| **Action** &nbsp; 2.2.1 | In Create a queue page. Choose **Local** as your queue type. <br/><br/>![](images/create-queue-2-2-1.png)<br/>|\r\n\r\n| **2.3** | **Define queue details** |\r\n| :--- | :--- |\r\n| **Narration** | Message queuing has been used in data processing for many years. It is most commonly used today in electronic mail. Without queuing, sending an electronic message over long distances requires every node on the route to be available for forwarding messages, and the addressees to be logged on and conscious of the fact that you are trying to send them a message. In a queuing system, messages are stored at intermediate nodes until the system is ready to forward them. At their final destination they are stored in an electronic mailbox until the addressee is ready to read them. <br/><br/> You can think of message queuing as being electronic mail for programs. In a message queuing environment, each program that makes up part of an application suite performs a well-defined, self-contained function in response to a specific request. To communicate with another program, a program must put a message on a predefined queue. The other program retrieves the message from the queue, and processes the requests and information contained in the message. So, message queuing is a style of program-to-program communication. <br/><br/> A message queue, known simply as a queue, is a named destination to which messages can be sent. Messages accumulate on queues until they are retrieved by programs that service those queues. <br/><br/> Here, we need to define the details of our new queue. Let’s define NEWORDER as the name of the queue and keep the default values as given. |\r\n| **Action** &nbsp; 2.3.1 | Enter **NEWORDER** as queue name (A), keep the **default values** (B) and the click **Create** (C). <br/><br/>![](images/create-queue-2-3-1.png)<br/> |\r\n\r\n| **2.4** | **Manage your new queue** |\r\n| :--- | :--- |\r\n| **Narration** | At this stage we now have a new local queue. From the Manage page, we can see all the queues available. Let’s open the NEWORDER queue. <br/><br/>In the Details page, let’s inspect the messages available in this queue. Right now, the NEWORDER queue is empty. Our next step will be to create an application for automatically generating messages for this queue. <br/><br/> Once that application is ready to go, return to the queue manager page.|\r\n| **Action** &nbsp; 2.4.1 | In the **Manage** page (A), open the **Queues** tab (B), click on Find button (lens icon) (C) <br/><br/>![](images/create-queue-2-4-1.png)<br/> |\r\n| **Action** &nbsp; 2.4.2 | Search for **NEWORDER** (A) queue and click on the **NEWORDER** queue link (B). <br/><br/>![](images/create-queue-2-4-2.png)<br/> |\r\n| **Action** &nbsp; 2.4.3 | On the breadcrumbs, click **QMGRDEMO** link.<br/><br/>![](images/create-queue-2-4-3.png)<br/> |\r\n\r\n\r\n**[Go to top](#place1)**\r\n\r\n</details>\r\n\r\n<details>\r\n<summary>3 - Configuring the App Integration flow</summary>\r\n\r\n<br/>\r\n\r\n| **3.1** | **Checking the MQ Services name** |\r\n| :--- | :--- |\r\n| **Narration** | The applications connecting to IBM MQ can be written in any one many programming languages — and are compatible with multiple APIs, including: C, Cobol, Java, .Net, NodeJS, and Ruby. <br/><br/> Continuing with the demonstration, we will now create an Integration Flow using App Connect Enterprise Toolkit. <br/><br/> Let’s first verify the services name of our IBM MQ instance, before starting App Connect Enterprise for building a message flow. |\r\n| **Action** &nbsp; 3.1.1 | Open a **Terminal** window where you are already loggedin your CP4I environment. |\r\n| **Action** &nbsp; 3.1.2 | Run the command below to get a list of mq services in the cp4i namespace. <br/><br/> oc get svc -n tools \\| grep mq |\r\n| **Action** &nbsp; 3.1.3 | Copy the MQ service name  from service which the port is 1414 (e.g.:*qmgr-demo-ibm-mq*).  <br/><br/>![](images/ace-toolkit-3-1-3.png)<br/>|\r\n\r\n| **3.2** | **Open App Connect Enterprise Toolkit** |\r\n| :--- | :--- |\r\n| **Narration** | With the MQ services name in hand, let’s now open the App Connect Enterprise Toolkit. <br/><br/> You can use the IBM App Connect Enterprise Toolkit to build powerful integration applications, services, and APIs. You can then deploy your integration solutions to the software run time, IBM App Connect Enterprise as a Service, containers, or a combination of those environments. <br/><br/> The welcome page provides access to the Tutorials Gallery. This gallery can help you get started, provides information on what’s new within the product, and can also be used to install new language packs. Let’s close this Welcome page and drill down into the Integration Development perspective. |\r\n| **Action** &nbsp; 3.2.1 | Open your App Connect Enterprise Toolkit by clicking the icon on the Launchapad (MAC OS) or Desktop (Windows) or executing **ace toolkit** in terminal window. <br/><br/>![](images/ace-toolkit-3-2-1.png)<br/>|\r\n| **Action** &nbsp; 3.2.2 | In the Workspace Launcher window, you are welcome to create a new workspace or accept the default one. Click **Launch**. <br/><br/>![](images/ace-toolkit-3-2-2.png)<br/>|\r\n| **Action** &nbsp; 3.2.3 | **Close** the welcome page.  <br/><br/>![](images/ace-toolkit-3-2-3.png)<br/> |\r\n\r\n| **3.3** | **Import a flow** |\r\n| :--- | :--- |\r\n| **Narration** | From the Integration Development perspective, we can create all manner of integration flows, as well as manage connectivity between services and endpoints. <br/><br/>For the sake of example, we have created a simple flow for demonstrating a messaging integration scenario. <br/><br/>Let’s go ahead and import the example into our demonstration environment. |\r\n| **Action** &nbsp; 3.3.1 | Select **File->Import** <br/><br/>![](images/ace-toolkit-3-3-1.png)<br/> |\r\n| **Action** &nbsp; 3.3.2 | Select **Project Interchange** (A) and click **Next** (B). <br/><br/>![](images/ace-toolkit-3-3-2.png)<br/> |\r\n| **Action** &nbsp; 3.3.3 | Select **ace-mq.zip** (A) file that you downloaded in the Demo Preparation part. Verify **neworder** project is checked (B) and click **Finish** (C). <br/><br/>![](images/ace-toolkit-3-3-3.png)<br/>|\r\n\r\n| **3.4** | **Check the integration flow** |\r\n| :--- | :--- |\r\n| **Narration** | Here we have our demo flow. In the flow editor, we can edit and change our flow. Message flows are created in the Toolkit using a drag and drop editor. <br/><br/> The flow is quite simple, consisting of only four nodes: Input, Output, a simple mapping node, and an MQOutput node. <br/><br/> This message flow is developed as an API, therefore, the actual API operation is developed as a subflow in the ACE Toolkit. |\r\n| **Action** &nbsp; 3.4.1 | Open **neworder -> Resources -> Subflows -> getid.subflow** <br/><br/>![](images/ace-toolkit-3-4-1.png)<br/> |\r\n\r\n| **3.5** | **Configure MQ Output node properties** |\r\n| :--- | :--- |\r\n| **Narration** | This scenario uses an MQOutput node which is configured to interact with a local queue manager. Let’s explore this node. <br/><br/>Let’s start by defining the Queue name in the Basic section. Now, we need to supply additional specifications for the MQ Connection, including: the queue manager, the MQ service name, port number, and channel. <br/><br/> For demo purposes, we are hard coding the queue manager values in the flow, but in a production environment, we should use a Policy to implement it. |\r\n| **Action** &nbsp; 3.5.1 | Click the **MQ Output** tile. <br/><br/>![](images/ace-toolkit-3-5-1.png)<br/> |\r\n| **Action** &nbsp; 3.5.2 | In the lower-right of the Properties pane, you see the **Properties** view (A), open the **Basic** tab (B) and type **NEWORDER** as the queue name (C). <br/><br/>![](images/ace-toolkit-3-5-2.png)<br/>|\r\n| **Action** &nbsp; 3.5.3 | Open the MQ Connection tab (A). On the Connection field, select **MQ client connection properties** (B). On Destination queue manager name, enter **QMGRDEMO** (case-sensitive) (C). On Queue manager host name, enter the **MQ service name** (e.g.: *qmgr-demo-ibm-mq*) identified in the previous step (D). On Listener port number, enter **1414** (E). On Channel name field, enter **SYSTEM.DEF.SRVCONN** (F). Save the flow (**CRTL+S**). <br/><br/>![](images/ace-toolkit-3-5-3.png) |\r\n\r\n| **3.6** | **Export BAR file** |\r\n| :--- | :--- |\r\n| **Narration** | At this stage, we are ready to deploy our Integration flow. Generate a BAR (broker archive) file. The App Connect Enterprise server uses BAR files to save compiled message flows, libraries, and other elements critical to the Integration flow. |\r\n| **Action** &nbsp; 3.6.1 | In the Application Development window in the upper-left, on *neworder* application, right-click and select **New** then **BAR file**. <br/><br/>![](images/ace-toolkit-3-6-1.png)<br/> |\r\n| **Action** &nbsp; 3.6.2 | On the Window New Bar file, type **neworder** as the bar file name (A) and click **Finish** (B). <br/><br/>![](images/ace-toolkit-3-6-2.png)<br/>|\r\n| **Action** &nbsp; 3.6.3 | On the *Prepare* screen, mark the **REST APIs** checkbox (A). Check **Compile and in-line resources** (B). Click **Build and Save** (C). <br/><br/>![](images/ace-toolkit-3-6-3.png)<br/> |\r\n| **Action** &nbsp; 3.6.4 | Now, a popup window displays **Operation completed successfully**. Click **OK**. <br/><br/>![](images/ace-toolkit-3-6-4.png)<br/> |\r\n\r\n**[Go to top](#place1)**\r\n\r\n</details>\r\n\r\n<details>\r\n<summary>4 - Deploying the App Integration flow</summary>\r\n\r\n<br/>\r\n\r\n| **4.1** | **Accessing the Integration Dashboard** |\r\n| :--- | :--- |\r\n| **Narration** | Let’s create an Integration Server using the App Connect Enterprise Dashboard in Cloud Pak for Integration. |\r\n| **Action** &nbsp; 4.1.1 | Back to the **Cloud Pak Integration Platform Navigator** in the browser. Open the **Menu** (A) and on the **Run** section (B), open the **Integrations** dashboard (C). <br/><br/>![](images/deploy-ace-4-1-1.png)<br/>|\r\n| **Action** &nbsp; 4.1.2 | On the Run integrations view, select the **ace-dashboard**. <br/><br/>![](images/deploy-ace-4-1-2.png)<br/>|\r\n\r\n| **4.2** | **Deploy integrations** |\r\n| :--- | :--- |\r\n| **Narration** | We begin in the IBM App Connect Dashboard. Here we can administer integration servers and integration runtimes, which are deployed from the BAR files mentioned earlier. Let’s deploy the Integration flow defined in the previous steps. <br/><br/> Because we need to deploy a simple integration, let’s select the Quick start integration type. <br/><br/> Now we need to provide a BAR file. The BAR file contains all the resources that are needed to deploy an integration. The BAR file parameters will expose both the integration and its operations. Let’s upload our exported BAR file. <br/><br/> We can use the Configuration component to apply any customizations to the integration server when we deploy it. For our scenario, we don’t need to use the configuration package. <br/><br/> Now, we need to define a name for our Integration server, for example neworder. <br/><br/>That is it! After few minutes our server should be ready with our integration flow. |\r\n| **Action** &nbsp; 4.2.1 | Click **Deploy integrations**. <br/><br/>![](images/deploy-ace-4-2-1.png)<br/>|\r\n| **Action** &nbsp; 4.2.2 | Select **Quick start integration** option (A) and click **NEXT** (B). <br/><br/>![](images/deploy-ace-4-2-2.png)<br/> |\r\n| **Action** &nbsp; 4.2.3 | Click to upload your BAR File. And select the **neworders.bar** (A) file (it is in your workspace folder in a Bar Files directory). And click **Next** (B).   <br/><br/>![](images/deploy-ace-4-2-3.png)<br/> |\r\n| **Action** &nbsp; 4.2.4 | You don't need any Integration configuration, click **Next**. <br/><br/>![](images/deploy-ace-4-2-4.png)<br/> |\r\n| **Action** &nbsp; 4.2.5 | Enter the Integration Server name as **neworder** (A). Then click **Create** (B). <br/><br/>![](images/deploy-ace-4-2-5.png)<br/> |\r\n| **Action** &nbsp; 4.2.6 | The deployment process takes up to 5 minutes, **refresh** the browser to see the BAR file deployed and started. <br/><br/>![](images/deploy-ace-4-2-6.png)<br/> |\r\n\r\n**[Go to top](#place1)**\r\n\r\n</details>\r\n\r\n<details>\r\n<summary>5 - Testing the Integration flow</summary>\r\n\r\n<br/>\r\n\r\n| **5.1** | **Copying the Integration server endpoint** |\r\n| :--- | :--- |\r\n| **Narration** | To test our Integration flow, we need to have the Integration API endpoint. Let’s copy our Integration flow endpoint here in the Integration definition. |\r\n| **Action** &nbsp; 5.1.1 | Click the **neworder** server icon. <br/><br/>![](images/deploy-ace-5-1-1.png)<br/> |\r\n| **Action** &nbsp; 5.1.2 | Click the **neworder API** icon. <br/><br/>![](images/deploy-ace-5-1-2.png)<br/>|\r\n| **Action** &nbsp; 5.1.3 | Copy the **Endpoint URL**. <br/><br/>![](images/deploy-ace-5-1-3.png)<br/>|\r\n\r\n| **5.2** | **Invoking the Integration flow** |\r\n| :--- | :--- |\r\n| **Narration** | To test our flow, let’s do a simple curl HTTP request to our endpoint, passing the order number as parameter. |\r\n| **Action** &nbsp; 5.2.1 | Open a terminal window and enter the curl command below. <br/><br/> ``` curl -G -k [NEWORDER_ENDPOINT]/00000```  <br/><br/> `Note` - Replace the API URL with your Endpoint and don’t forget to include 00000 as order number at the end of the URL. <br/><br/>![](images/deploy-ace-5-2-1.png)<br/> |\r\n\r\n| **5.3** | **Checking the message** |\r\n| :--- | :--- |\r\n| **Narration** | Now, let’s check if the message arrived in the NEWORDER queue in IBM MQ. Let’s use the IBM MQ Console to do so. <br/><br/>Here we can see that our NEWORDER queue has one new message. <br/><br/>Great! At this point we’ve validated that the message queue is working and reached the end of the hands-on demonstration. |\r\n| **Action** &nbsp; 5.3.1 | Open the **Menu** again (A), and on **Run** section (B), click on **Messaging** (C). <br/><br/>![](images/deploy-ace-5-3-1.png)<br/>|\r\n| **Action** &nbsp; 5.3.2 | Select **qmgr-demo**. <br/><br/>![](images/deploy-ace-5-3-2.png)<br/>|\r\n| **Action** &nbsp; 5.3.3 | Click **Manage QMGRDEMO**. <br/><br/>![](images/deploy-ace-5-3-3.png)<br/> |\r\n| **Action** &nbsp; 5.3.4 | Open the **Queues** tab. <br/><br/>![](images/deploy-ace-5-3-4.png)<br/> |\r\n| **Action** &nbsp; 5.3.5 | In the Maximum depth, you can see that a new message has arrived in NEWORDER queue. <br/><br/>![](images/deploy-ace-5-3-5.png)<br/> |\r\n| **Action** &nbsp; 5.3.6 | Click on the **NEWORDER** queue. <br/><br/>![](images/deploy-ace-5-3-6.png)<br/> |\r\n| **Action** &nbsp; 5.3.7 | Show the messages received. <br/><br/>![](images/deploy-ace-5-3-7.png)<br/> |\r\n\r\n**[Go to top](#place1)**\r\n\r\n</details>\r\n\r\n<details>\r\n<summary>Summary</summary>\r\n\r\n<br/>\r\nLet’s summarize what we’ve done today.\r\n<br/><br/>\r\nIn the demo we: accessed the Cloud Pak for Integration environment and explored the capabilities; created a queue in IBM MQ; imported and configured an Integration flow using IBM App Connect Enterprise toolkit; deployed and tested our Application flow in IBM App Connect Dashboard.\r\n<br/><br/>\r\nFrom a business perspective, we unified messaging and application connectors to integrate backend systems using the IBM MQ messaging platform. IBM MQ provides a universal messaging backbone with robust connectivity for flexible and reliable messaging across applications and existing IT assets. IBM MQ simplifies, accelerates, and facilitates the reliable exchange of data with a flexible and security-rich messaging solution that’s trusted by some of the world’s most successful enterprises.\r\n<br/><br/>\r\nThank you for attending today’s presentation.\r\n<br/>\r\n\r\n**[Go to top](#place1)**\r\n\r\n</details>\r\n","type":"Mdx","contentDigest":"617322336650ca5d1b905c2367f3e298","owner":"gatsby-plugin-mdx","counter":1402},"frontmatter":{"title":"MQ and ACE Demo","description":"MQ and ACE Demo","tabs":["Demo preparation","Demo script"]},"exports":{},"rawBody":"---\r\ntitle: MQ and ACE Demo\r\ndescription: MQ and ACE Demo\r\ntabs: [ 'Demo preparation', 'Demo script']\r\n---\r\n\r\n\r\n<FeatureCard\r\n  title=\"Access backend systems using Messaging and Integration - Demo Script\"\r\n  color=\"dark\"\r\n  >\r\n\r\n![banner](./images/messaging-banner.jpg)\r\n\r\n</FeatureCard>\r\n\r\n<span id=\"place1\"></span>\r\n\r\n<details>\r\n\r\n<summary>Introduction</summary>\r\n<br/>\r\nEvery enterprise in today's markets must offer robust digital products and services, often requiring integration of complex capabilities and systems to deliver one coherent whole. IBM® Cloud Pak for Integration offers a simplified solution to this integration challenge, allowing the enterprise to modernize its processes while positioning itself for future innovation. Messaging is one of the key capabilities of IBM Cloud Pak for Integration.\r\n<br/><br/>\r\nIBM MQ provides a universal messaging backbone with robust connectivity for flexible and reliable messaging for applications and the integration of existing IT assets.  IBM MQ simplifies, accelerates and facilitates the reliable exchange of data with a flexible and security-rich messaging solution that’s trusted by some of the world’s most successful enterprises. With IBM MQ, you ensure you receive the information you need, when you need it — and receive it only once.\r\n<br/><br/>\r\nAutomating customer interactions effectively can mean the difference between a satisfied customer (one who will want to do more business with you in the future) or a disappointed customer (who will afterwards be looking for alternative options).\r\n<br/><br/>\r\nAutomation in this context can also reduce the manual steps involved in customer interactions, cut down on data entry into multiple different applications, and potentially eliminate errors and delays – all of which are additional costs to your business.\r\n<br/><br/>\r\nThe demo will showcase ways to automate customer interactions. To implement this automation, we will use both Messaging and Integrations to back-end applications.\r\n<br/><br/>\r\nLet's get started!<br/><br/>\r\n\r\n(Demo Slides <a href=\"https://github.com/ibm-integration/learninghub/blob/main/src/pages/demos/mq-ace-techsales/files/MQACESlides.pptx\" target=\"_blank\" rel=\"noreferrer\">here</a>)\r\n<br/>\r\n</details>\r\n\r\n<details>\r\n<summary>1 - Accessing the environment</summary>\r\n\r\n<br/>\r\n\r\n| **1.1** | **Log in to Cloud Pak for Integration** |\r\n| :--- | :--- |\r\n| **Narration** | Let’s see IBM MQ and IBM App Connect in action. Here we have an IBM Cloud Pak for Integration environment with IBM MQ and IBM App Connector operators installed. In our demonstration, we’re leveraging the cloud version of the product which is available from IBM Cloud. First, I’ll log into the environment. |\r\n| **Action** &nbsp; 1.1.1 | Open **Cloud Pak for Integration page** and **log in** with your **username** and **password**. <br/><br/>![](images/access-env-1-1.png)<br/>|\r\n\r\n<br/>\r\n\r\n| **1.2** | **View the Cloud Pak for Integration instances** |\r\n| :--- | :--- |\r\n| **Narration** | Welcome to IBM Cloud Pak for Integration! We’re now at the home screen showing all the capabilities of the Pak, brought together in one place. Specialized integration capabilities — for API management, application integration, messaging, and more — are built on top of powerful automation services. <br/><br/>As you can see, you are able to access all the integration capabilities your team needs through a single interface. In this demo, we will use App Connect for application integration to access our company’s backend systems. IBM MQ will serve as the universal messaging backbone, providing robust connectivity for flexible and reliable messaging between applications — as well as for integration of existing IT assets. |\r\n| **Action** &nbsp; 1.2.1 | Show the **Instances page** and open the **Messaging** capability (qmgr-demo).<br/><br/>'Note'- If you didn't complete the Uniform Clusters demo before this demo, you don't have the uniform clusters instance. No problem at all! Just ignore them in the picture below. You don't need them. In this demo you only use the qmgr-demo instance.<br/><br/>If necessary, accept the security risks.<br/><br/>![](images/access-env-1-2.png)<br/> |\r\n\r\n\r\n**[Go to top](#place1)**\r\n\r\n</details>\r\n\r\n<details>\r\n<summary>2 - Create a queue</summary>\r\n\r\n<br/>\r\n\r\n| **2.1** | **View the IBM MQ home screen** |\r\n| :--- | :--- |\r\n| **Narration** | Let’s examine the capabilities of IBM MQ on Cloud Pak for Integration. IBM MQ offers proven, enterprise-grade messaging capabilities that skillfully and safely move information between applications. You can run IBM MQ in the pre-packaged container provided in IBM Cloud Pak for Integration.<br/><br/>Here we are on MQ Console page of a pre-created Queue Manager. From here you can manage your local queues or create a new queue.<br/><br/>IBM MQ can be managed using a variety of tools: from the IBM MQ Explorer GUI; as well as through scripted or interactive command line tools; or programmatically.<br/><br/>Let’s explore how to create a new queue.<br/><br/> For demo purposes, we will create the queue using the Graphic User Interface, however in a production scenario you will create the queue using a ConfigMap that allows you to decouple environment-specific configuration from your container images, so that your applications are easily portable. |\r\n| **Action** &nbsp; 2.1.1 | Click **Create a queue**. <br/><br/>![](images/create-queue-2-1-1.png)<br/> |\r\n\r\n| **2.2** | **Choose queue type** |\r\n| :--- | :--- |\r\n| **Narration** | An IBM MQ messaging system is made up of one or more queue managers. Queue managers are where messaging resources, such as queues, are configured. Queue managers are also what applications connect to, either running on the same system as the queue manager itself or over the network.<br/><br/>A network of connected queue managers supports asynchronous routing of messages between systems, where producing and consuming applications are connected to different queue managers.<br/><br/>In this demo, we will use a Local queue that is on the queue manager we are connected to, QMGRDEMO.|\r\n| **Action** &nbsp; 2.2.1 | In Create a queue page. Choose **Local** as your queue type. <br/><br/>![](images/create-queue-2-2-1.png)<br/>|\r\n\r\n| **2.3** | **Define queue details** |\r\n| :--- | :--- |\r\n| **Narration** | Message queuing has been used in data processing for many years. It is most commonly used today in electronic mail. Without queuing, sending an electronic message over long distances requires every node on the route to be available for forwarding messages, and the addressees to be logged on and conscious of the fact that you are trying to send them a message. In a queuing system, messages are stored at intermediate nodes until the system is ready to forward them. At their final destination they are stored in an electronic mailbox until the addressee is ready to read them. <br/><br/> You can think of message queuing as being electronic mail for programs. In a message queuing environment, each program that makes up part of an application suite performs a well-defined, self-contained function in response to a specific request. To communicate with another program, a program must put a message on a predefined queue. The other program retrieves the message from the queue, and processes the requests and information contained in the message. So, message queuing is a style of program-to-program communication. <br/><br/> A message queue, known simply as a queue, is a named destination to which messages can be sent. Messages accumulate on queues until they are retrieved by programs that service those queues. <br/><br/> Here, we need to define the details of our new queue. Let’s define NEWORDER as the name of the queue and keep the default values as given. |\r\n| **Action** &nbsp; 2.3.1 | Enter **NEWORDER** as queue name (A), keep the **default values** (B) and the click **Create** (C). <br/><br/>![](images/create-queue-2-3-1.png)<br/> |\r\n\r\n| **2.4** | **Manage your new queue** |\r\n| :--- | :--- |\r\n| **Narration** | At this stage we now have a new local queue. From the Manage page, we can see all the queues available. Let’s open the NEWORDER queue. <br/><br/>In the Details page, let’s inspect the messages available in this queue. Right now, the NEWORDER queue is empty. Our next step will be to create an application for automatically generating messages for this queue. <br/><br/> Once that application is ready to go, return to the queue manager page.|\r\n| **Action** &nbsp; 2.4.1 | In the **Manage** page (A), open the **Queues** tab (B), click on Find button (lens icon) (C) <br/><br/>![](images/create-queue-2-4-1.png)<br/> |\r\n| **Action** &nbsp; 2.4.2 | Search for **NEWORDER** (A) queue and click on the **NEWORDER** queue link (B). <br/><br/>![](images/create-queue-2-4-2.png)<br/> |\r\n| **Action** &nbsp; 2.4.3 | On the breadcrumbs, click **QMGRDEMO** link.<br/><br/>![](images/create-queue-2-4-3.png)<br/> |\r\n\r\n\r\n**[Go to top](#place1)**\r\n\r\n</details>\r\n\r\n<details>\r\n<summary>3 - Configuring the App Integration flow</summary>\r\n\r\n<br/>\r\n\r\n| **3.1** | **Checking the MQ Services name** |\r\n| :--- | :--- |\r\n| **Narration** | The applications connecting to IBM MQ can be written in any one many programming languages — and are compatible with multiple APIs, including: C, Cobol, Java, .Net, NodeJS, and Ruby. <br/><br/> Continuing with the demonstration, we will now create an Integration Flow using App Connect Enterprise Toolkit. <br/><br/> Let’s first verify the services name of our IBM MQ instance, before starting App Connect Enterprise for building a message flow. |\r\n| **Action** &nbsp; 3.1.1 | Open a **Terminal** window where you are already loggedin your CP4I environment. |\r\n| **Action** &nbsp; 3.1.2 | Run the command below to get a list of mq services in the cp4i namespace. <br/><br/> oc get svc -n tools \\| grep mq |\r\n| **Action** &nbsp; 3.1.3 | Copy the MQ service name  from service which the port is 1414 (e.g.:*qmgr-demo-ibm-mq*).  <br/><br/>![](images/ace-toolkit-3-1-3.png)<br/>|\r\n\r\n| **3.2** | **Open App Connect Enterprise Toolkit** |\r\n| :--- | :--- |\r\n| **Narration** | With the MQ services name in hand, let’s now open the App Connect Enterprise Toolkit. <br/><br/> You can use the IBM App Connect Enterprise Toolkit to build powerful integration applications, services, and APIs. You can then deploy your integration solutions to the software run time, IBM App Connect Enterprise as a Service, containers, or a combination of those environments. <br/><br/> The welcome page provides access to the Tutorials Gallery. This gallery can help you get started, provides information on what’s new within the product, and can also be used to install new language packs. Let’s close this Welcome page and drill down into the Integration Development perspective. |\r\n| **Action** &nbsp; 3.2.1 | Open your App Connect Enterprise Toolkit by clicking the icon on the Launchapad (MAC OS) or Desktop (Windows) or executing **ace toolkit** in terminal window. <br/><br/>![](images/ace-toolkit-3-2-1.png)<br/>|\r\n| **Action** &nbsp; 3.2.2 | In the Workspace Launcher window, you are welcome to create a new workspace or accept the default one. Click **Launch**. <br/><br/>![](images/ace-toolkit-3-2-2.png)<br/>|\r\n| **Action** &nbsp; 3.2.3 | **Close** the welcome page.  <br/><br/>![](images/ace-toolkit-3-2-3.png)<br/> |\r\n\r\n| **3.3** | **Import a flow** |\r\n| :--- | :--- |\r\n| **Narration** | From the Integration Development perspective, we can create all manner of integration flows, as well as manage connectivity between services and endpoints. <br/><br/>For the sake of example, we have created a simple flow for demonstrating a messaging integration scenario. <br/><br/>Let’s go ahead and import the example into our demonstration environment. |\r\n| **Action** &nbsp; 3.3.1 | Select **File->Import** <br/><br/>![](images/ace-toolkit-3-3-1.png)<br/> |\r\n| **Action** &nbsp; 3.3.2 | Select **Project Interchange** (A) and click **Next** (B). <br/><br/>![](images/ace-toolkit-3-3-2.png)<br/> |\r\n| **Action** &nbsp; 3.3.3 | Select **ace-mq.zip** (A) file that you downloaded in the Demo Preparation part. Verify **neworder** project is checked (B) and click **Finish** (C). <br/><br/>![](images/ace-toolkit-3-3-3.png)<br/>|\r\n\r\n| **3.4** | **Check the integration flow** |\r\n| :--- | :--- |\r\n| **Narration** | Here we have our demo flow. In the flow editor, we can edit and change our flow. Message flows are created in the Toolkit using a drag and drop editor. <br/><br/> The flow is quite simple, consisting of only four nodes: Input, Output, a simple mapping node, and an MQOutput node. <br/><br/> This message flow is developed as an API, therefore, the actual API operation is developed as a subflow in the ACE Toolkit. |\r\n| **Action** &nbsp; 3.4.1 | Open **neworder -> Resources -> Subflows -> getid.subflow** <br/><br/>![](images/ace-toolkit-3-4-1.png)<br/> |\r\n\r\n| **3.5** | **Configure MQ Output node properties** |\r\n| :--- | :--- |\r\n| **Narration** | This scenario uses an MQOutput node which is configured to interact with a local queue manager. Let’s explore this node. <br/><br/>Let’s start by defining the Queue name in the Basic section. Now, we need to supply additional specifications for the MQ Connection, including: the queue manager, the MQ service name, port number, and channel. <br/><br/> For demo purposes, we are hard coding the queue manager values in the flow, but in a production environment, we should use a Policy to implement it. |\r\n| **Action** &nbsp; 3.5.1 | Click the **MQ Output** tile. <br/><br/>![](images/ace-toolkit-3-5-1.png)<br/> |\r\n| **Action** &nbsp; 3.5.2 | In the lower-right of the Properties pane, you see the **Properties** view (A), open the **Basic** tab (B) and type **NEWORDER** as the queue name (C). <br/><br/>![](images/ace-toolkit-3-5-2.png)<br/>|\r\n| **Action** &nbsp; 3.5.3 | Open the MQ Connection tab (A). On the Connection field, select **MQ client connection properties** (B). On Destination queue manager name, enter **QMGRDEMO** (case-sensitive) (C). On Queue manager host name, enter the **MQ service name** (e.g.: *qmgr-demo-ibm-mq*) identified in the previous step (D). On Listener port number, enter **1414** (E). On Channel name field, enter **SYSTEM.DEF.SRVCONN** (F). Save the flow (**CRTL+S**). <br/><br/>![](images/ace-toolkit-3-5-3.png) |\r\n\r\n| **3.6** | **Export BAR file** |\r\n| :--- | :--- |\r\n| **Narration** | At this stage, we are ready to deploy our Integration flow. Generate a BAR (broker archive) file. The App Connect Enterprise server uses BAR files to save compiled message flows, libraries, and other elements critical to the Integration flow. |\r\n| **Action** &nbsp; 3.6.1 | In the Application Development window in the upper-left, on *neworder* application, right-click and select **New** then **BAR file**. <br/><br/>![](images/ace-toolkit-3-6-1.png)<br/> |\r\n| **Action** &nbsp; 3.6.2 | On the Window New Bar file, type **neworder** as the bar file name (A) and click **Finish** (B). <br/><br/>![](images/ace-toolkit-3-6-2.png)<br/>|\r\n| **Action** &nbsp; 3.6.3 | On the *Prepare* screen, mark the **REST APIs** checkbox (A). Check **Compile and in-line resources** (B). Click **Build and Save** (C). <br/><br/>![](images/ace-toolkit-3-6-3.png)<br/> |\r\n| **Action** &nbsp; 3.6.4 | Now, a popup window displays **Operation completed successfully**. Click **OK**. <br/><br/>![](images/ace-toolkit-3-6-4.png)<br/> |\r\n\r\n**[Go to top](#place1)**\r\n\r\n</details>\r\n\r\n<details>\r\n<summary>4 - Deploying the App Integration flow</summary>\r\n\r\n<br/>\r\n\r\n| **4.1** | **Accessing the Integration Dashboard** |\r\n| :--- | :--- |\r\n| **Narration** | Let’s create an Integration Server using the App Connect Enterprise Dashboard in Cloud Pak for Integration. |\r\n| **Action** &nbsp; 4.1.1 | Back to the **Cloud Pak Integration Platform Navigator** in the browser. Open the **Menu** (A) and on the **Run** section (B), open the **Integrations** dashboard (C). <br/><br/>![](images/deploy-ace-4-1-1.png)<br/>|\r\n| **Action** &nbsp; 4.1.2 | On the Run integrations view, select the **ace-dashboard**. <br/><br/>![](images/deploy-ace-4-1-2.png)<br/>|\r\n\r\n| **4.2** | **Deploy integrations** |\r\n| :--- | :--- |\r\n| **Narration** | We begin in the IBM App Connect Dashboard. Here we can administer integration servers and integration runtimes, which are deployed from the BAR files mentioned earlier. Let’s deploy the Integration flow defined in the previous steps. <br/><br/> Because we need to deploy a simple integration, let’s select the Quick start integration type. <br/><br/> Now we need to provide a BAR file. The BAR file contains all the resources that are needed to deploy an integration. The BAR file parameters will expose both the integration and its operations. Let’s upload our exported BAR file. <br/><br/> We can use the Configuration component to apply any customizations to the integration server when we deploy it. For our scenario, we don’t need to use the configuration package. <br/><br/> Now, we need to define a name for our Integration server, for example neworder. <br/><br/>That is it! After few minutes our server should be ready with our integration flow. |\r\n| **Action** &nbsp; 4.2.1 | Click **Deploy integrations**. <br/><br/>![](images/deploy-ace-4-2-1.png)<br/>|\r\n| **Action** &nbsp; 4.2.2 | Select **Quick start integration** option (A) and click **NEXT** (B). <br/><br/>![](images/deploy-ace-4-2-2.png)<br/> |\r\n| **Action** &nbsp; 4.2.3 | Click to upload your BAR File. And select the **neworders.bar** (A) file (it is in your workspace folder in a Bar Files directory). And click **Next** (B).   <br/><br/>![](images/deploy-ace-4-2-3.png)<br/> |\r\n| **Action** &nbsp; 4.2.4 | You don't need any Integration configuration, click **Next**. <br/><br/>![](images/deploy-ace-4-2-4.png)<br/> |\r\n| **Action** &nbsp; 4.2.5 | Enter the Integration Server name as **neworder** (A). Then click **Create** (B). <br/><br/>![](images/deploy-ace-4-2-5.png)<br/> |\r\n| **Action** &nbsp; 4.2.6 | The deployment process takes up to 5 minutes, **refresh** the browser to see the BAR file deployed and started. <br/><br/>![](images/deploy-ace-4-2-6.png)<br/> |\r\n\r\n**[Go to top](#place1)**\r\n\r\n</details>\r\n\r\n<details>\r\n<summary>5 - Testing the Integration flow</summary>\r\n\r\n<br/>\r\n\r\n| **5.1** | **Copying the Integration server endpoint** |\r\n| :--- | :--- |\r\n| **Narration** | To test our Integration flow, we need to have the Integration API endpoint. Let’s copy our Integration flow endpoint here in the Integration definition. |\r\n| **Action** &nbsp; 5.1.1 | Click the **neworder** server icon. <br/><br/>![](images/deploy-ace-5-1-1.png)<br/> |\r\n| **Action** &nbsp; 5.1.2 | Click the **neworder API** icon. <br/><br/>![](images/deploy-ace-5-1-2.png)<br/>|\r\n| **Action** &nbsp; 5.1.3 | Copy the **Endpoint URL**. <br/><br/>![](images/deploy-ace-5-1-3.png)<br/>|\r\n\r\n| **5.2** | **Invoking the Integration flow** |\r\n| :--- | :--- |\r\n| **Narration** | To test our flow, let’s do a simple curl HTTP request to our endpoint, passing the order number as parameter. |\r\n| **Action** &nbsp; 5.2.1 | Open a terminal window and enter the curl command below. <br/><br/> ``` curl -G -k [NEWORDER_ENDPOINT]/00000```  <br/><br/> `Note` - Replace the API URL with your Endpoint and don’t forget to include 00000 as order number at the end of the URL. <br/><br/>![](images/deploy-ace-5-2-1.png)<br/> |\r\n\r\n| **5.3** | **Checking the message** |\r\n| :--- | :--- |\r\n| **Narration** | Now, let’s check if the message arrived in the NEWORDER queue in IBM MQ. Let’s use the IBM MQ Console to do so. <br/><br/>Here we can see that our NEWORDER queue has one new message. <br/><br/>Great! At this point we’ve validated that the message queue is working and reached the end of the hands-on demonstration. |\r\n| **Action** &nbsp; 5.3.1 | Open the **Menu** again (A), and on **Run** section (B), click on **Messaging** (C). <br/><br/>![](images/deploy-ace-5-3-1.png)<br/>|\r\n| **Action** &nbsp; 5.3.2 | Select **qmgr-demo**. <br/><br/>![](images/deploy-ace-5-3-2.png)<br/>|\r\n| **Action** &nbsp; 5.3.3 | Click **Manage QMGRDEMO**. <br/><br/>![](images/deploy-ace-5-3-3.png)<br/> |\r\n| **Action** &nbsp; 5.3.4 | Open the **Queues** tab. <br/><br/>![](images/deploy-ace-5-3-4.png)<br/> |\r\n| **Action** &nbsp; 5.3.5 | In the Maximum depth, you can see that a new message has arrived in NEWORDER queue. <br/><br/>![](images/deploy-ace-5-3-5.png)<br/> |\r\n| **Action** &nbsp; 5.3.6 | Click on the **NEWORDER** queue. <br/><br/>![](images/deploy-ace-5-3-6.png)<br/> |\r\n| **Action** &nbsp; 5.3.7 | Show the messages received. <br/><br/>![](images/deploy-ace-5-3-7.png)<br/> |\r\n\r\n**[Go to top](#place1)**\r\n\r\n</details>\r\n\r\n<details>\r\n<summary>Summary</summary>\r\n\r\n<br/>\r\nLet’s summarize what we’ve done today.\r\n<br/><br/>\r\nIn the demo we: accessed the Cloud Pak for Integration environment and explored the capabilities; created a queue in IBM MQ; imported and configured an Integration flow using IBM App Connect Enterprise toolkit; deployed and tested our Application flow in IBM App Connect Dashboard.\r\n<br/><br/>\r\nFrom a business perspective, we unified messaging and application connectors to integrate backend systems using the IBM MQ messaging platform. IBM MQ provides a universal messaging backbone with robust connectivity for flexible and reliable messaging across applications and existing IT assets. IBM MQ simplifies, accelerates, and facilitates the reliable exchange of data with a flexible and security-rich messaging solution that’s trusted by some of the world’s most successful enterprises.\r\n<br/><br/>\r\nThank you for attending today’s presentation.\r\n<br/>\r\n\r\n**[Go to top](#place1)**\r\n\r\n</details>\r\n","fileAbsolutePath":"C:/Users/ruffa/Documents/GitHub/learninghub/src/pages/demos/mq-ace-techsales/demo-script.mdx"}}},"staticQueryHashes":["1364590287","137577622","137577622","2102389209","2102389209","2456312558","2746626797","2746626797","3018647132","3018647132","3037994772","3037994772","768070550","768070550"]}