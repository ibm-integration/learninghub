{"componentChunkName":"component---src-pages-demos-cp-4-i-api-tech-demo-preparation-sf-old-mdx","path":"/demos/cp4i-api-tech/demo-preparation-sf-old/","result":{"pageContext":{"frontmatter":{"title":"CP4I for Technical Sales - API Demo","description":"Cloud Pak for Integration for Technical Sales - API Demo","tabs":["Demo preparation","Demo script"]},"relativePagePath":"/demos/cp4i-api-tech/demo-preparation-sf-old.mdx","titleType":"page","MdxNode":{"id":"8f55ad04-f559-5ce8-aef6-444c56947b0b","children":[],"parent":"d708a148-e03f-59c9-b22f-be63e59a1310","internal":{"content":"---\r\ntitle: CP4I for Technical Sales - API Demo\r\ndescription: Cloud Pak for Integration for Technical Sales - API Demo\r\ntabs: [ 'Demo preparation', 'Demo script']\r\n---\r\n\r\n\r\n<FeatureCard\r\n  title=\"API-enabled application integration - Demo Preparation\"\r\n  color=\"dark\"\r\n  >\r\n\r\n![banner](./images/api-demo-banner.jpg)\r\n\r\n</FeatureCard>\r\n\r\n<AnchorLinks>\r\n  <AnchorLink>1 - Review Demo Scenario</AnchorLink>\r\n  <AnchorLink>2 - Provision a Red Hat OpenShift cluster</AnchorLink>\r\n  <AnchorLink>3 - Access your OpenShift cluster and install the command line</AnchorLink>\r\n  <AnchorLink>4 - Cloning Repositories</AnchorLink>\r\n  <AnchorLink>5 - Setting Context</AnchorLink>\r\n  <AnchorLink>6 - Installing Foundational Services</AnchorLink>\r\n  <AnchorLink>7 – Deploying the Platform UI</AnchorLink>\r\n  <AnchorLink>8 - Deploying Automation Assets</AnchorLink>\r\n  <AnchorLink>9 - Deploying API Connect</AnchorLink>\r\n  <AnchorLink>10 - Deploying App Connect</AnchorLink>\r\n  <AnchorLink>11 - Set up Salesforce</AnchorLink>\r\n  <AnchorLink>12 - Connect Cloud Pak for Integration instance to your endpoints</AnchorLink>\r\n  <AnchorLink>13 - Configure the asset repository</AnchorLink>\r\n  <AnchorLink>14 - Creating Dev User for Developer Portal</AnchorLink>\r\n</AnchorLinks>\r\n\r\n***\r\n\r\n<InlineNotification kind=\"warning\">This Demo Preparation document (steps 3,4 and 5) uses a shell script to install CP4I environment and demo assets. This script is available for MAC OS and Linux users. If you are a Windows user, follow this documentation <a href=\"https://ibm-integration.github.io/learninghub/demos/cp4i-api-tech/win-user/\" target=\"_blank\">here</a> to request a Linux Virtual Machine, only to install the demo environment. For the demo script, you can use your Windows machine.</InlineNotification>\r\n\r\n\r\n### 1 - Review Demo Scenario\r\n\r\n| DEMO OVERVIEW |                          |\r\n| --------------------------------------- | ------------------------------------- |\r\n| **Scenario overview** | \tAccess applications through APIs and integrations. Use SaaS connectivity to Salesforce to create a self-service car repair API giving customers real-time estimates and integrating directly with record systems. The demo shows easy API creation with no-code App Connect Designer, rate limiting plans, security policies and self-service API consumption using the API Connect portal. |\r\n| **Demo products** | Cloud Pak for Integration |\r\n| **Demo capabilities** | API management; Application integration; Connectors |\r\n| **Demo intro slides** | Download the Introduction and Overview slides <a href=\"./files/CustomerInteractionsSlides.pptx\" target=\"_blank\" rel=\"noreferrer\">here</a>. |\r\n| **Demo script** | A complete demo script is on the second tab above. The demo script has multiple tasks that each have multiple steps. In each step, you have the details about what you need to do (**Actions**), what you can say while delivering this demo step (**Narration**), and what diagrams and screenshots you will see.<br/><br/> This demo script is a suggestion, and you are welcome to customize based on your sales opportunity. Most importantly, practice this demo in advance. If the demo seems easy for you to execute, the customer will focus on the content. If it seems difficult for you to execute, the customer will focus on your delivery. |\r\n| **Prerequisites** | You need to have installed in your machine: <br/>- <a href=\"https://docs.openshift.com/container-platform/4.8/cli_reference/openshift_cli/getting-started-cli.html\" target=\"_blank\">oc CLI</a> v4.6+.<br/>- github CLI<br/>- Bash Shell<br/><br/>- JAVA v8+ <br/><br/>- <a href=\"https://www.ibm.com/docs/en/api-connect/10.0.8?topic=configuration-installing-toolkit\" target=\"_blank\">APIC CLI</a><br/><br/>And you also need an account in the folllowing email service to configure your CP4I environment:<br/>- <a href=\"https://mailtrap.io/\" target=\"_blank\">mailtrap</a>|\r\n| **Demo authors** | Rafael Osorio, Alan Glickenhouse and Callum Jackson based on Car Repair Demo created by CP4I Dev team|\r\n| **How to get support** | Contact <a href=\"mailto:rosorio@br.ibm.com\">rosorio@br.ibm.com</a> regarding issues with setting up and running this demo use case. |\r\n\r\n***\r\n\r\n### 2 - OpenShift Installation\r\n\r\nIBM Cloud Pak for Integration brings together IBM’s market-leading middleware capabilities to support a broad range of integration styles and use cases. With powerful deployment, lifecycle management, and production services running on Red Hat OpenShift, it enables clients to leverage the latest agile integration practices, simplify the management of their integration architecture, and reduce cost. Cloud Pak for Integration demands an OpenShift cluster.\r\n\r\nFollow the steps below to provision a Red Hat OpenShift Container Platform cluster on VMware on IBM Cloud.\r\n\r\n\r\n2.1 To request an OpenShift Cluster on VMware on IBM Cloud, go <a href=\"https://techzone.ibm.com/my/reservations/create/63a3a25a3a4689001740dbb3\" target=\"_blank\">here</a> and complete the form with the follow details.\r\n\r\n| Field  | Value |\r\n| ------------- | ------------- |\r\n| Purpose  | If you are doing the L4 course, select **Practice/Self Enablement**. <br/> If you are delivering a PoC, select:**Proof-of-Technology** and inform the Sales opportunity.  |\r\n| Purpose Description  | If you are doing the L3 course, enter: **MQ L3 Course**. <br/> If you are delivering a POC, enter the PoC details.  |\r\n| Preferred Geography  | You are welcome to select the preferred Geography |\r\n\r\n![](images/ocp-install-1.png)\r\n\r\n| Field  | Value |\r\n| ------------- | ------------- |\r\n| OpenShift Version | 4.16 |\r\n| Storage  | ODF - 2 TB |\r\n| Worker Node Count  | 5 |\r\n| Worker Node Flavor  | 16 vCPU x 64 GB - 100 GB ephemeral storage |\r\n\r\n![](images/ocp-install-new-1-2.png)\r\n\r\n2.2 **Agree** with the TechZone Terms and Conditions (A) and click **Submit** (B).\r\n![](images/ocp-install-2.png)\r\n\r\n2.3 You will receive an email confirming the instance is provisioning.\r\n![](images/ocp-install-3.png)\r\n\r\n2.4 You will receive a second email once the environment is provisioned. You should expect this to take between 30 and 120 minutes. Now the status update changed to **Ready**.  Click on **Reservation ID** to open the details page of your new reservation environment.\r\n![](images/ocp-install-4.png)\r\n\r\n2.5 Copy your **Cluster Admin Username** (A) and **Cluster Admin Password** (B). Copy the **OCP Console link** (C).\r\n![](images/ocp-install-5.png)\r\n\r\n***\r\n\r\n### 3 - Access your OpenShift cluster and install the command line\r\n\r\nIn this section, you access your OpenShift cluster and install the OpenShift command line tool.\r\n\r\n3.1 In a Browser, open the OCP Console link and paste the **Cluster Admin Username** (A) and **Password** (B) copied in the previous step and click **Log in** (C).\r\n![](images/oc-cli-1.png)\r\n\r\n3.2 Great, you are almost ready for the demo. Last but not least important, let’s copy login command to access the cluster by CLI. On the top right, click your **username** (A) and select **Copy login command** (B).\r\n![](images/oc-cli-2.png)\r\n\r\n3.3 Click **Display Token**.\r\n![](images/oc-cli-3.png)\r\n\r\n3.4 Copy the **Log in with this token command** and **paste** on a terminal window.\r\n![](images/oc-cli-4.png)\r\n\r\n![](images/oc-cli-4-2.png)\r\n\r\nThat is it! Now you are ready for the Cloud Pak for Integration installation. Take a breath and let's start to install the Pak.\r\n\r\n***\r\n\r\n## 4 - Cloning Repositories\r\n\r\nTo use this guide you will need to clone the <a href=\"https://github.ibm.com/joel-gomez/cp4i-demo\" target=\"_blank\">CP4I end to end demo repo</a> to your workstation. Let's do it now!\r\n\r\n4.1. Open a terminal window and run the command below. It is recommended you do so in a directory like `/Desktop` so that you can easily locate the files afterwards.\r\n* First, authenticate your Terminal with the IBM GitHub repository with the following command:\r\n\r\n```\r\ngh auth login --hostname github.ibm.com\r\n```\r\n\r\n* Within the Terminal window, navigate through the following prompts:\r\n    - a. What is your preferred protocol for Git operations on this host? : `HTTPS`\r\n    - b. Authenticate Git with your GitHub credentials? : `Yes`\r\n    - c. How would you like to authenticate GitHub CLI? : `Login with a web browser`\r\n    - d. Terminal will generate a one-time code : `copy this to a notepad`\r\n    - e. Within your web browser, log in using your GitHub credentials\r\n    - f. Supply the one-time code and approve access to GitHub\r\n    - g. Wait until the Terminal window reports back a successful `Logged in as...`\r\n\r\n4.2 Execute the following within Terminal to clone the demo repository.\r\n```\r\ngh repo clone github.ibm.com/joel-gomez/cp4i-demo\r\n```\r\n\r\n4.3 Open the **cp4i-demo** folder.\r\n```\r\ncd cp4i-demo\r\n```\r\n\r\n***\r\n\r\n## 5 - Setting Context\r\n\r\nBased on where you have deployed your OCP cluster you will need to set up some environment variables to inform the installation script about your environment. Let's do it here!\r\n\r\n5.1 Define an environment variable to set the CP4I version.\r\n```\r\nexport CP4I_VER=16.1.0\r\n```\r\n\r\n5.2 Set the OCP type based on the storage classes in the cluster. If using a ROKS cluster, use export `OCP_TYPE=ROKS` instead.\r\n```\r\nexport OCP_TYPE=ODF\r\n```\r\n\r\n5.3 Set mailtrap credentials, substituting `<my-mailtrap-user>` and `<my-mailtrap-pwd>`.\r\n```\r\nexport MAILTRAP_USER=<my-mailtrap-user>\r\nexport MAILTRAP_PWD=<my-mailtrap-pwd>\r\n```\r\n\r\n5.4 If you have provisioned the OCP cluster in Tech Zone you can use the following script to set the proper default storage class.\r\n```\r\nscripts/99-odf-tkz-set-scs.sh\r\n```\r\n\r\n5.5 Your cluster will also need access to pull the container software required to deploy the Cloud Pak. Your Entitlement Key is used to grant access. You can download you entitlement key from <a href=\"https://myibm.ibm.com/products-services/containerlibrary\" target=\"_blank\">My IBM</a>. Click **Copy**.\r\n![](images/set-context-5.png)\r\n\r\n<InlineNotification kind=\"warning\">If no active entitlement keys are available, you can create one by clicking the **Add new key** button. If you receive an \"Operation could not be completed at this time\", try clicking the button a second or third time until one is generated.</InlineNotification>\r\n\r\n5.6 The IBM Entitled Registry contains software images for the capabilities in IBM Cloud Pak® for Integration. To allow the Cloud Pak for Integration operators to automatically pull those software images, you must first obtain your entitlement key, then add your entitlement key in a pull secret.  Replace the *my-key* with your **IBM entitlement key**.\r\n```\r\nexport ENT_KEY=<my-key>\r\n```\r\n\r\n5.7 Now, you need a namespace where you will deploy the different capabilities.\r\n```\r\nscripts/02a-cp4i-ns-key-config.sh\r\n```\r\n\r\n***\r\n\r\n\r\n## 6 - Installing Foundational Services\r\n\r\nThe IBM Cloud Pak foundational services operator is no longer installed automatically. Install this operator manually if you need to create an instance that uses identity and access management (IAM). The following steps will walk you through this process.\r\n\r\n6.1 First we need to have a certificate manager, otherwise,  the IBM Cloud Pak foundational services operator installation will not complete. Let's do it!\r\n\r\n<InlineNotification kind=\"info-square\">Time to install: ~1 minute.</InlineNotification>\r\n\r\n```\r\noc apply -f resources/00-cert-manager-namespace.yaml\r\noc apply -f resources/00-cert-manager-operatorgroup.yaml\r\noc apply -f resources/00-cert-manager-subscription.yaml\r\n```\r\n\r\nConfirm the subscription has been completed successfully before moving to the next step running the following command.\r\n```\r\nSUB_NAME=$(oc get deployment cert-manager-operator-controller-manager -n cert-manager-operator --ignore-not-found -o jsonpath='{.metadata.labels.olm\\.owner}');if [ ! -z \"$SUB_NAME\" ]; then oc get csv/$SUB_NAME -n cert-manager-operator --ignore-not-found -o jsonpath='{.status.phase}';fi;echo\r\n```\r\n\r\nWait for a response of `Succeeded`.\r\n<InlineNotification kind=\"warning\">If no response is generated, wait a couple of minutes and try again. Do not proceed until receiving the *Succeeded* prompt.</InlineNotification>\r\n\r\n\r\n6.2 Install the Postgress SQL Catalog Source.\r\n\r\n<InlineNotification kind=\"info-square\">Time to install: ~1 minute.</InlineNotification>\r\n\r\n```\r\noc apply -f catalog-sources/${CP4I_VER}/01-postgress-sql-catalog-source.yaml\r\n```\r\n\r\nConfirm the catalog source has been deployed successfully before moving to the next step running the following command.\r\n```\r\noc get pods -n openshift-marketplace | grep postgresql\r\n```\r\n\r\nWait for a response of `READY`.\r\n\r\n<InlineNotification kind=\"warning\">You may be seeing a response of *TRANSIENT_FAILURE* which indicates the deployment is underway but not yet complete. Wait until the *READY* response is received before continuing.</InlineNotification>\r\n\r\n6.3 Install the Common Services Catalog source.\r\n\r\n<InlineNotification kind=\"info-square\">Time to install: ~1 minute.</InlineNotification>\r\n\r\n```\r\noc apply -f catalog-sources/${CP4I_VER}/02-common-services-catalog-source.yaml\r\n```\r\n\r\nConfirm the catalog source has been deployed successfully before moving to the next step running the following command.\r\n```\r\noc get catalogsources opencloud-operators -n openshift-marketplace -o jsonpath='{.status.connectionState.lastObservedState}';echo\r\n```\r\n\r\nWait for a response of `READY`.\r\n\r\n6.4 Create the Common Services namespace.\r\n```\r\noc new-project ibm-common-services\r\n```\r\n\r\n6.5 Install the Foundational Services operator (former Common Services).\r\n\r\n<InlineNotification kind=\"info-square\">Time to install: ~1 minute.</InlineNotification>\r\n\r\n```\r\noc apply -f subscriptions/${CP4I_VER}/00-common-service-subscription.yaml\r\n```\r\n\r\nConfirm the operator has been deployed successfully before moving to the next step running the following command.\r\n```\r\nSUB_NAME=$(oc get deployment/ibm-common-service-operator -n openshift-operators --ignore-not-found -o jsonpath='{.metadata.labels.olm\\.owner}');if [ ! -z \"$SUB_NAME\" ]; then oc get csv/$SUB_NAME --ignore-not-found -o jsonpath='{.status.phase}';fi;echo\r\n```\r\n\r\nWait for a response of `Succeeded`.\r\n\r\n***\r\n\r\n### 7 – Deploying the Platform UI\r\n\r\nIn this section, you will install the Platform Navigator UI. The Platform UI is a user interface for the IBM Cloud Pak for Integration that allows the user to deploy and manage instances of the integration capabilities from a central location.\r\n\r\nDeploying the Platform UI allows you to deploy and manage instances from a central location.\r\n\r\n7.1 First, let's install Platform UI Catalog source.\r\n\r\n<InlineNotification kind=\"info-square\">Time to install: ~1 minute.</InlineNotification>\r\n\r\n```\r\noc apply -f catalog-sources/${CP4I_VER}/03-platform-navigator-catalog-source.yaml\r\n```\r\n\r\nConfirm the catalog source has been deployed successfully before moving to the next step running the following command.\r\n```\r\noc get catalogsources ibm-integration-platform-navigator-catalog -n openshift-marketplace -o jsonpath='{.status.connectionState.lastObservedState}';echo\r\n```\r\n\r\nWait for a response of `READY`.\r\n\r\n\r\n7.2 Install the Platform UI Operator.\r\n\r\n<InlineNotification kind=\"info-square\">Time to install: ~1 minute.</InlineNotification>\r\n\r\n```\r\noc apply -f subscriptions/${CP4I_VER}/01-platform-navigator-subscription.yaml\r\n```\r\n\r\nConfirm the operator has been deployed successfully before moving to the next step running the following command.\r\n```\r\nSUB_NAME=$(oc get deployment ibm-integration-platform-navigator-operator -n openshift-operators --ignore-not-found -o jsonpath='{.metadata.labels.olm\\.owner}');if [ ! -z \"$SUB_NAME\" ]; then oc get csv/$SUB_NAME --ignore-not-found -o jsonpath='{.status.phase}';fi;echo\r\n```\r\n\r\nWait for a response of `Succeeded`.\r\n\r\n7.3 Deploy a Platform UI instance.\r\n\r\n<InlineNotification kind=\"info-square\">Time to install: ~10 minutes.</InlineNotification>\r\n\r\n```\r\noc apply -f instances/${CP4I_VER}/common/01-platform-navigator-instance.yaml\r\n```\r\n\r\nConfirm the instance has been deployed successfully before moving to the next step running the following command.\r\n```\r\noc get platformnavigator cp4i-navigator -n tools -o jsonpath='{.status.conditions[0].type}';echo\r\n```\r\n\r\nWait for a response of `READY`.\r\n\r\n<InlineNotification kind=\"warning\">You may be seeing a response of `PENDING` which indicates the deployment is underway but not yet complete. Wait until the `READY` response is received before continuing.</InlineNotification>\r\n\r\n\r\n7.4 Once the Platform UI instance is up and running get the access info.\r\n```\r\nscripts/03b-cp4i-access-info.sh\r\n```\r\n\r\n7.5 Open the Platform UI  URL and log in. Note the password is temporary and you will be required to change it. Take note of your new password, you will use it multiple times.\r\n![](images/platform-ui-8.png)\r\n\r\nRecord the credentials to a notepad for reference later.\r\n\r\n7.6 Open the Platform UI URL with a web browser and log in. Note the password is temporary and you will be required to change it. Take note of your new password, as you will use it multiple times throughout the lab.\r\n![](images/platform-ui-9.png)\r\n\r\nIn this lab, you are using the cp4i-access-info script to capture this information. But there are multiple ways to find the Platform Navigator URL. Below are some examples, but you can get more details in the <a href=\"https://www.ibm.com/docs/en/cloud-paks/cp-integration/2022.4?topic=ui-deploying-platform-using-openshift-console\">Product documentation page</a>.\r\n  - On the IBM Cloud Pak for Integration operator page in the Installed Operator view in the OpenShift Web Console.\r\n  - Checking the Platform UI route on the Networking > Routes view on OpenShift Web Console.\r\n  - Using the \"oc get consolelink\" command and filter by \"IBM CLoud Pak for Integration\" to get the list of Platform UI URLs available.\r\n\r\n***\r\n\r\n### 8 - Deploying Automation Assets\r\n\r\nIn this section, you will install the Automation foundation assets(Automation Assets). It is a capability that lets you store, manage, and share integration assets.\r\n\r\nAutomation assets enables teams to share and reuse integration assets across capability instances. For example, you can import an OpenAPI specification asset within the IBM API Connect user interface.\r\n\r\nAssets can be located in remote repositories, such as Git. This feature allows users to take advantage of the versioning capability offered by the remote repository. Assets that are stored in a remote repository are read-only.\r\n\r\n8.1 Let's deploy an instance of the Automation Assets using the following script:\r\n```\r\noc apply -f catalog-sources/${CP4I_VER}/04-asset-repo-catalog-source.yaml\r\n```\r\n\r\nConfirm the catalog source has been deployed successfully before moving to the next step running the following command.\r\n```\r\noc get catalogsources ibm-integration-asset-repository-catalog -n openshift-marketplace -o jsonpath='{.status.connectionState.lastObservedState}';echo\r\n```\r\n\r\nWait for a response of `READY`.\r\n\r\n8.2 Install Asset Repo Operator.\r\n```\r\noc apply -f subscriptions/${CP4I_VER}/02-asset-repo-subscription.yaml\r\n```\r\n\r\nConfirm the operator has been deployed successfully before moving to the next step running the following command.\r\n```\r\nSUB_NAME=$(oc get deployment ibm-integration-asset-repository-operator -n openshift-operators --ignore-not-found -o jsonpath='{.metadata.labels.olm\\.owner}');if [ ! -z \"$SUB_NAME\" ]; then oc get csv/$SUB_NAME --ignore-not-found -o jsonpath='{.status.phase}';fi;echo\r\n```\r\n\r\nWait for a response of `Succeeded`.\r\n\r\n8.3 Deploy an Asset Repo instance\r\n```\r\noc apply -f instances/${CP4I_VER}/${OCP_TYPE}/02-asset-repo-ai-instance.yaml\r\n```\r\n\r\nConfirm the instance has been deployed successfully before moving to the next step running the following command.\r\n```\r\noc get assetrepository asset-repo-ai -n tools -o jsonpath='{.status.phase}';echo\r\n```\r\n\r\nWait for a response of `Ready`.\r\n\r\n\r\n***\r\n\r\n### 9 - Deploying API Connect\r\n\r\n9.1 Install DataPower Catalog Source\r\n```\r\noc apply -f catalog-sources/${CP4I_VER}/05-datapower-catalog-source.yaml\r\n```\r\n\r\nConfirm the catalog source has been deployed successfully before moving to the next step running the following command.\r\n```\r\noc get catalogsources ibm-datapower-operator-catalog -n openshift-marketplace -o jsonpath='{.status.connectionState.lastObservedState}';echo\r\n```\r\n\r\nWait for a response of `READY`.\r\n\r\n9.2 Install DataPower Operator.\r\n```\r\noc apply -f subscriptions/${CP4I_VER}/03-datapower-subscription.yaml\r\n```\r\n\r\nConfirm the operator has been deployed successfully before moving to the next step running the following command.\r\n```\r\nSUB_NAME=$(oc get deployment datapower-operator -n openshift-operators --ignore-not-found -o jsonpath='{.metadata.labels.olm\\.owner}');if [ ! -z \"$SUB_NAME\" ]; then oc get csv/$SUB_NAME --ignore-not-found -o jsonpath='{.status.phase}';fi;echo\r\n```\r\n\r\nWait for a response of `Succeeded`.\r\n\r\n9.3 Install APIC Catalog Source.\r\n```\r\noc apply -f catalog-sources/${CP4I_VER}/07-api-connect-catalog-source.yaml\r\n```\r\n\r\nConfirm the catalog source has been deployed successfully before moving to the next step running the following command.\r\n```\r\noc get catalogsources ibm-apiconnect-catalog -n openshift-marketplace -o jsonpath='{.status.connectionState.lastObservedState}';echo\r\n```\r\n\r\nWait for a response of `READY`.\r\n\r\n9.4 Install APIC Operator\r\n```\r\noc apply -f subscriptions/${CP4I_VER}/04-api-connect-subscription.yaml\r\n```\r\n\r\nConfirm the operator has been deployed successfully before moving to the next step running the following command.\r\n```\r\nSUB_NAME=$(oc get deployment ibm-apiconnect -n openshift-operators --ignore-not-found -o jsonpath='{.metadata.labels.olm\\.owner}');if [ ! -z \"$SUB_NAME\" ]; then oc get csv/$SUB_NAME --ignore-not-found -o jsonpath='{.status.phase}';fi;echo\r\n```\r\n\r\nYou should get responses of `Succeeded` for both of them.\r\n\r\n9.5 Deploy APIC instance with some extra features enabled.\r\n\r\n<InlineNotification kind=\"info-square\">Time to install: ~30 minutes.</InlineNotification>\r\n\r\n```\r\nscripts/07d-apic-inst-deploy-instana.sh\r\n```\r\n\r\nConfirm the installation completed successfully before moving to the next step running the following commands.\r\n```\r\noc get APIConnectCluster apim-demo -n tools -o jsonpath='{.status.phase}';echo\r\n```\r\n\r\nNote this will take almost 30 minutes, so be patient, and at the end you should get a `Ready` response.\r\n\r\n9.6 Configure the email server in APIC.\r\n\r\n<InlineNotification kind=\"info-square\">In this specific step you need to have APIC CLI installed, as described in the Prerequisites section. Follow this <a href=\"https://www.ibm.com/docs/en/api-connect/10.0.8?topic=configuration-installing-toolkit\" target=\"_blank\">this documentation to install it</a>.</InlineNotification>\r\n\r\n```\r\nscripts/07f-apic-initial-config.sh\r\n```\r\n\r\n9.7 Create a Provider Organization for admin user.\r\n```\r\nscripts/07g-apic-new-porg-cs.sh\r\n```\r\n\r\n### 10 - Deploying App Connect\r\n\r\n10.1 Install the App Connect Catalog source.\r\n```\r\noc apply -f catalog-sources/${CP4I_VER}/10-app-connect-catalog-source.yaml\r\n```\r\n\r\nConfirm the catalog source has been deployed successfully before moving to the next step running the following command.\r\n```\r\noc get catalogsources appconnect-operator-catalogsource -n openshift-marketplace -o jsonpath='{.status.connectionState.lastObservedState}';echo\r\n```\r\n\r\nWait for a response of `READY`.\r\n\r\n10.2 Install the App Connect operator.\r\n```\r\noc apply -f subscriptions/${CP4I_VER}/07-app-connect-subscription.yaml\r\n```\r\n\r\nConfirm the operator has been deployed successfully before moving to the next step running the following command.\r\n```\r\nSUB_NAME=$(oc get deployment ibm-appconnect-operator -n openshift-operators --ignore-not-found -o jsonpath='{.metadata.labels.olm\\.owner}');if [ ! -z \"$SUB_NAME\" ]; then oc get csv/$SUB_NAME --ignore-not-found -o jsonpath='{.status.phase}';fi;echo\r\n```\r\n\r\nWait for a response of `Succeeded`.\r\n\r\n10.3 It is time to Deploy the Dashboard instance.\r\n```\r\noc apply -f instances/${CP4I_VER}/${OCP_TYPE}/06-ace-dashboard-instance.yaml\r\n```\r\n\r\nConfirm the instance has been deployed successfully before moving to the next step running the following command.\r\n```\r\noc get dashboard ace-dashboard -n tools -o jsonpath='{.status.phase}';echo\r\n```\r\n\r\nNote this will take few minutes, but at the end you should get a response of `Ready`.\r\n\r\n\r\n10.4 Deploy Designer Authoring instance with support for Callable Flow. First let's deploy the Switch Server instance.\r\n```\r\noc apply -f instances/${CP4I_VER}/common/07-ace-switch-server-instance.yaml\r\n```\r\n\r\nConfirm the instance has been deployed successfully before moving to the next step running the following command.\r\n```\r\noc get switchserver ace-switch-server -n tools -o jsonpath='{.status.phase}';echo\r\n```\r\n\r\nWait for a response of `Ready`.\r\n\r\n10.5 Deploy Designer Authoring instance.\r\n```\r\noc apply -f instances/${CP4I_VER}/${OCP_TYPE}/08-ace-designer-local-ai-instance.yaml\r\n```\r\n\r\nConfirm the instance has been deployed successfully before moving to the next step running the following command.\r\n```\r\noc get designerauthoring ace-designer-ai -n tools -o jsonpath='{.status.phase}';echo\r\n```\r\n\r\nWait for a response of `Ready`\r\n\r\n10.6 Now, let's create Bar Auth Configuration.\r\n```\r\nscripts/11-ace-config-barauth-github.sh\r\n```\r\n\r\n\r\n***\r\n\r\n### 11 - Set up Salesforce\r\n\r\nYou need a Salesforce developer account to run this demo. If you already have a Salesforce developer account, you can use that (start at step 2 below). If not, you can sign up for a free developer account by following step 1 below.\r\n\r\n11.1 Go to <a href=\"https://developer.salesforce.com/signup\" target=\"_blank\" rel=\"noreferrer\">Salesforce Developers</a>. Follow the prompts on the Saleforce pages to get your free developer account.<br/>\r\n\r\n11.2 As soon as you have your account, go back to the <a href=\"https://login.salesforce.com/\" target=\"_blank\" rel=\"noreferrer\">Salesforce log in page</a> and log in to your developer account.<br/><img src=\"images/Prep3.5.png\" width=\"800\" /><br/>\r\n\r\n11.3 Click the **profile** icon (1) and save your Salesforce Login URL (2).<br/><img src=\"images/Prep3.6.png\" width=\"800\" /><br/>\r\n\r\n11.4 In the same user profile menu select **Settings**.<br/><img src=\"images/Prep3.7.png\" width=\"800\" /><br/>\r\n\r\n11.5 Click **Reset My Security Token** in the **My Personal Information** (1) menu. Then, click **Reset Security Token** (2). A newly-generated security token will be emailed to you.<br/><img src=\"images/Prep3.8.png\" width=\"800\" /><br/>\r\n\r\n11.6 Next, you will create an application representing App Connect Enterprise, and then retrieve the Consumer Key and Consumer Secret. Click the **cogwheel** icon (1) and select **Setup** (2).<br/><img src=\"images/Prep3.9.png\" width=\"800\" /><br/>\r\n\r\n11.7 In the navigator on the left-hand side, scroll to **PLATFORM TOOLS**, expand **Apps** (1), and click **App Manager** (2).<br/><img src=\"images/prep-image3.7.png\" width=\"800\" /><br/>\r\n\r\n11.8 Click **New Connected App**.<br/><img src=\"images/prep-image3.8.png\" width=\"800\" /><br/>\r\n\r\n11.9 Enter **App Connect** (1) as the **Connect App Name** and your email as the **Contact Email** (2). Select **Enable OAuth Settings** (3).<br/><img src=\"images/prep-image3.9.png\" width=\"800\" /><br/>\r\n\r\n11.10 Select **Enable for Device Flow** (1). Now select **Manage user data via APIs (api)** (2) as the **Selected OAuth Scopes**. Click **Add** (3)<br/><img src=\"images/prep-image3.10.png\" width=\"800\" /><br/>\r\n\r\n11.11 Click **Save**.<br/><img src=\"images/prep-image3.11.png\" width=\"800\" /><br/>\r\n\r\n11.12 It will take approximately 10 minutes for the new connected app to register in Salesforce. Once it does, you should see **Manage Consumer Details** displayed. Click **Manage Consumer Details,** following any authentication directions.<br/><img src=\"images/Prep3.15.png\" width=\"800\" /><br/>\r\n\r\n11.13 Save the **Consumer Key** and **Consumer Secret.**<br/><img src=\"images/salesforce-key-secret.png\" width=\"800\" /><br/>\r\n\r\n11.14 In the search box at the top of the screen, enter **OAuth** (1), and then select **OAuth and OpenID Connect Settings** (2).<br/><img src=\"images/oauth-and-open-id.png\" width=\"800\" /><br/>\r\n\r\n11.15 Ensure that **OAuth User-Agent Flows** and **OAuth Username-Password Flows** are enabled. <br/><img src=\"images/oauth-user-agent-flows.png\" width=\"800\" /><br/>\r\n\r\nYour Salesforce developer account is ready.\r\n\r\n<br/>\r\n\r\n***\r\n\r\n### 12 - Connect Cloud Pak for Integration instance to your endpoints\r\n\r\nLet’s configure our services endpoints in Cloud Pak for Integration.\r\n\r\n12.1\tOpen the Platform Navigator URL. Enter your admin **Username** (1) and **Password** (2), and click **Sign In** (3).<br/><img src=\"images/prep-image210.png\" width=\"800\" /><br/>\r\n\r\n12.2 In the menu on the top left, open the **Design** folder (1) and select **Integrations** (2). <br/><img src=\"images/prep-44.png\" width=\"800\" /><br/>\r\n\r\n12.3 Click on the **ace-designer-demo** entry. <br/><img src=\"images/prep-44-2.png\" width=\"800\" /><br/>\r\n\r\n12.4 Click the **Catalog** icon to see a list of the available connectors. <br/><img src=\"images/prep-45.png\" width=\"800\" /><br/>\r\n\r\n12.5 Search for **salesforce** (1) and click **Connect** (2).<br/><img src=\"images/Prep4.5.png\" width=\"800\" /><br/>\r\n\r\n12.6 Enter your Salesforce **Login URL**.<inline-notification text=\"You must enter <strong>‘https://’</strong> in front of the Saleforce Login URL you saved earlier. The connection will not work if you just copy/paste the hostname.\"></inline-notification><img src=\"images/Prep4.6.png\" width=\"800\" />\r\n\r\n12.7 Input your Salesforce **Username** (1). Fill in the connector's **Password** field (2) by concatenating your Salesforce **Password** and the **Security token** received via email.<br/><br/>For example, if your Salesforce password is ‘myGreatPassword’ and your Salesforce security token is ‘2325jsdhew4312hs534dh’ then enter ‘myGreatPassword2325jsdhew4312hs534dh’ in the **Password** field.<br/><img src=\"images/Prep4.7.png\" width=\"800\" /><br/><br/>\r\n\r\n12.8 Input Salesforce’s **Consumer Key** as **Client ID** (1) and **Secret** as **Client Secret** (2), in the connector account UI. Click **Connect** (3).<br/><img src=\"images/Prep4.8.png\" width=\"800\" /><br/>\r\n\r\n12.9 Click on the **menu** icon (1) and select **Rename Account** (2).<br/><img src=\"images/Prep4.9.png\" width=\"800\" /><br/>\r\n\r\n12.10 Enter **App Connect Trial** (1) as **Account name** and click **Rename Account** (2).<br/><img src=\"images/Prep4.10.png\" width=\"800\" /><br/>\r\n\r\nYour environment is ready to demo.\r\n\r\n<br/>\r\n\r\n***\r\n\r\n### 13 - Configure the asset repository\r\n\r\nDuring the demo we will import an existing flow from the assest repository. An GitHub repository will be configured to import the flow.\r\n\r\n13.1 In the CP4I homepage, you should see the all instances available on your Pak. Select **assetrepo**.<br/><img src=\"images/asset-repo-100.png\" width=\"800\" /><br/>\r\n\r\n13.2 Click **Remotes** (1) and select **Add remote** (2). <br/><img src=\"images/asset-repo-110.png\" width=\"800\" /><br/>\r\n\r\n13.3 Fill in the following values:<br/>\r\n   * **Name** (1): CP4I Demo Assets\r\n   * **Git URL** (2): https://github.com/IBM/cp4i-demos.git\r\n   * **Automatic sync options** (3): 5 minutes\r\n   * **Asset types to synchronize** (4): Select all\r\n\r\n   Click **Create remote** (5) to complete the form.\r\n\r\n   <img src=\"images/asset-repo-120.png\" width=\"800\" /><br/>\r\n\r\n13.4 In a couple of minutes the resources from the GitHub repository will be synchronized.<br/><img src=\"images/asset-repo-130.png\" width=\"800\" /><br/>\r\n\r\n<br/>\r\n\r\n***\r\n\r\n### 14 - Creating Dev User for Developer Portal\r\n\r\nNow create a user in the Developer Portal.\r\n\r\n14.1 Expand **Design** and select **APIs** (1).<br/><img src=\"images/prep-image501.png\" width=\"800\" /><br/>\r\n\r\n14.2 Click **ademo** API management. <br/><img src=\"images/prep-image502.png\" width=\"800\" /><br/>\r\n\r\n14.3 If a login screen is presented, select **Cloud Pak User Registry** <br/><img src=\"images/prep-image212.png\" width=\"800\" /><br/>\r\n\r\n14.4 Click **Manage catalogs** (2).<br/><img src=\"images/prep-image213.png\" width=\"800\" /><br/>\r\n\r\n14.5 Open **Sandbox**.<br/><img src=\"images/prep-image214.png\" width=\"800\" /><br/>\r\n\r\n14.6 Select the **Consumers** (1) tab, click **Add** (2) and select **Create organization** (3).<br/><img src=\"images/prep-image215.png\" width=\"800\" /><br/>\r\n\r\n14.7 Fill in **IBM** as the title.<br/><img src=\"images/prep-image216.png\" width=\"800\" /><br/>\r\n\r\n14.8 Scroll down to the Owner section, set the type of user to **New user** (1), fill in the following details and click **Create**.\r\n\r\n| FIELD | VALUE |\r\n| ------ | ------- |\r\n| **Username:** | devuser |\r\n| **Email:** | devuser@ibmapiconnect.com |\r\n| **First name:** | Dev |\r\n| **Last name:** | User |\r\n| **Password:** | AP1Connect! |\r\n\r\n<img src=\"images/prep-image217.png\" width=\"800\" />\r\n\r\n14.9 A new consumer organization is created.\r\n<br/><img src=\"images/prep-image218.png\" width=\"800\" /><br/>\r\n\r\nCongratulations! Your portal developer user has been created and you are ready for the demo.\r\n\r\n<br/>\r\n","type":"Mdx","contentDigest":"ffc93000919d6633831620bfde23e187","owner":"gatsby-plugin-mdx","counter":3823},"frontmatter":{"title":"CP4I for Technical Sales - API Demo","description":"Cloud Pak for Integration for Technical Sales - API Demo","tabs":["Demo preparation","Demo script"]},"exports":{},"rawBody":"---\r\ntitle: CP4I for Technical Sales - API Demo\r\ndescription: Cloud Pak for Integration for Technical Sales - API Demo\r\ntabs: [ 'Demo preparation', 'Demo script']\r\n---\r\n\r\n\r\n<FeatureCard\r\n  title=\"API-enabled application integration - Demo Preparation\"\r\n  color=\"dark\"\r\n  >\r\n\r\n![banner](./images/api-demo-banner.jpg)\r\n\r\n</FeatureCard>\r\n\r\n<AnchorLinks>\r\n  <AnchorLink>1 - Review Demo Scenario</AnchorLink>\r\n  <AnchorLink>2 - Provision a Red Hat OpenShift cluster</AnchorLink>\r\n  <AnchorLink>3 - Access your OpenShift cluster and install the command line</AnchorLink>\r\n  <AnchorLink>4 - Cloning Repositories</AnchorLink>\r\n  <AnchorLink>5 - Setting Context</AnchorLink>\r\n  <AnchorLink>6 - Installing Foundational Services</AnchorLink>\r\n  <AnchorLink>7 – Deploying the Platform UI</AnchorLink>\r\n  <AnchorLink>8 - Deploying Automation Assets</AnchorLink>\r\n  <AnchorLink>9 - Deploying API Connect</AnchorLink>\r\n  <AnchorLink>10 - Deploying App Connect</AnchorLink>\r\n  <AnchorLink>11 - Set up Salesforce</AnchorLink>\r\n  <AnchorLink>12 - Connect Cloud Pak for Integration instance to your endpoints</AnchorLink>\r\n  <AnchorLink>13 - Configure the asset repository</AnchorLink>\r\n  <AnchorLink>14 - Creating Dev User for Developer Portal</AnchorLink>\r\n</AnchorLinks>\r\n\r\n***\r\n\r\n<InlineNotification kind=\"warning\">This Demo Preparation document (steps 3,4 and 5) uses a shell script to install CP4I environment and demo assets. This script is available for MAC OS and Linux users. If you are a Windows user, follow this documentation <a href=\"https://ibm-integration.github.io/learninghub/demos/cp4i-api-tech/win-user/\" target=\"_blank\">here</a> to request a Linux Virtual Machine, only to install the demo environment. For the demo script, you can use your Windows machine.</InlineNotification>\r\n\r\n\r\n### 1 - Review Demo Scenario\r\n\r\n| DEMO OVERVIEW |                          |\r\n| --------------------------------------- | ------------------------------------- |\r\n| **Scenario overview** | \tAccess applications through APIs and integrations. Use SaaS connectivity to Salesforce to create a self-service car repair API giving customers real-time estimates and integrating directly with record systems. The demo shows easy API creation with no-code App Connect Designer, rate limiting plans, security policies and self-service API consumption using the API Connect portal. |\r\n| **Demo products** | Cloud Pak for Integration |\r\n| **Demo capabilities** | API management; Application integration; Connectors |\r\n| **Demo intro slides** | Download the Introduction and Overview slides <a href=\"./files/CustomerInteractionsSlides.pptx\" target=\"_blank\" rel=\"noreferrer\">here</a>. |\r\n| **Demo script** | A complete demo script is on the second tab above. The demo script has multiple tasks that each have multiple steps. In each step, you have the details about what you need to do (**Actions**), what you can say while delivering this demo step (**Narration**), and what diagrams and screenshots you will see.<br/><br/> This demo script is a suggestion, and you are welcome to customize based on your sales opportunity. Most importantly, practice this demo in advance. If the demo seems easy for you to execute, the customer will focus on the content. If it seems difficult for you to execute, the customer will focus on your delivery. |\r\n| **Prerequisites** | You need to have installed in your machine: <br/>- <a href=\"https://docs.openshift.com/container-platform/4.8/cli_reference/openshift_cli/getting-started-cli.html\" target=\"_blank\">oc CLI</a> v4.6+.<br/>- github CLI<br/>- Bash Shell<br/><br/>- JAVA v8+ <br/><br/>- <a href=\"https://www.ibm.com/docs/en/api-connect/10.0.8?topic=configuration-installing-toolkit\" target=\"_blank\">APIC CLI</a><br/><br/>And you also need an account in the folllowing email service to configure your CP4I environment:<br/>- <a href=\"https://mailtrap.io/\" target=\"_blank\">mailtrap</a>|\r\n| **Demo authors** | Rafael Osorio, Alan Glickenhouse and Callum Jackson based on Car Repair Demo created by CP4I Dev team|\r\n| **How to get support** | Contact <a href=\"mailto:rosorio@br.ibm.com\">rosorio@br.ibm.com</a> regarding issues with setting up and running this demo use case. |\r\n\r\n***\r\n\r\n### 2 - OpenShift Installation\r\n\r\nIBM Cloud Pak for Integration brings together IBM’s market-leading middleware capabilities to support a broad range of integration styles and use cases. With powerful deployment, lifecycle management, and production services running on Red Hat OpenShift, it enables clients to leverage the latest agile integration practices, simplify the management of their integration architecture, and reduce cost. Cloud Pak for Integration demands an OpenShift cluster.\r\n\r\nFollow the steps below to provision a Red Hat OpenShift Container Platform cluster on VMware on IBM Cloud.\r\n\r\n\r\n2.1 To request an OpenShift Cluster on VMware on IBM Cloud, go <a href=\"https://techzone.ibm.com/my/reservations/create/63a3a25a3a4689001740dbb3\" target=\"_blank\">here</a> and complete the form with the follow details.\r\n\r\n| Field  | Value |\r\n| ------------- | ------------- |\r\n| Purpose  | If you are doing the L4 course, select **Practice/Self Enablement**. <br/> If you are delivering a PoC, select:**Proof-of-Technology** and inform the Sales opportunity.  |\r\n| Purpose Description  | If you are doing the L3 course, enter: **MQ L3 Course**. <br/> If you are delivering a POC, enter the PoC details.  |\r\n| Preferred Geography  | You are welcome to select the preferred Geography |\r\n\r\n![](images/ocp-install-1.png)\r\n\r\n| Field  | Value |\r\n| ------------- | ------------- |\r\n| OpenShift Version | 4.16 |\r\n| Storage  | ODF - 2 TB |\r\n| Worker Node Count  | 5 |\r\n| Worker Node Flavor  | 16 vCPU x 64 GB - 100 GB ephemeral storage |\r\n\r\n![](images/ocp-install-new-1-2.png)\r\n\r\n2.2 **Agree** with the TechZone Terms and Conditions (A) and click **Submit** (B).\r\n![](images/ocp-install-2.png)\r\n\r\n2.3 You will receive an email confirming the instance is provisioning.\r\n![](images/ocp-install-3.png)\r\n\r\n2.4 You will receive a second email once the environment is provisioned. You should expect this to take between 30 and 120 minutes. Now the status update changed to **Ready**.  Click on **Reservation ID** to open the details page of your new reservation environment.\r\n![](images/ocp-install-4.png)\r\n\r\n2.5 Copy your **Cluster Admin Username** (A) and **Cluster Admin Password** (B). Copy the **OCP Console link** (C).\r\n![](images/ocp-install-5.png)\r\n\r\n***\r\n\r\n### 3 - Access your OpenShift cluster and install the command line\r\n\r\nIn this section, you access your OpenShift cluster and install the OpenShift command line tool.\r\n\r\n3.1 In a Browser, open the OCP Console link and paste the **Cluster Admin Username** (A) and **Password** (B) copied in the previous step and click **Log in** (C).\r\n![](images/oc-cli-1.png)\r\n\r\n3.2 Great, you are almost ready for the demo. Last but not least important, let’s copy login command to access the cluster by CLI. On the top right, click your **username** (A) and select **Copy login command** (B).\r\n![](images/oc-cli-2.png)\r\n\r\n3.3 Click **Display Token**.\r\n![](images/oc-cli-3.png)\r\n\r\n3.4 Copy the **Log in with this token command** and **paste** on a terminal window.\r\n![](images/oc-cli-4.png)\r\n\r\n![](images/oc-cli-4-2.png)\r\n\r\nThat is it! Now you are ready for the Cloud Pak for Integration installation. Take a breath and let's start to install the Pak.\r\n\r\n***\r\n\r\n## 4 - Cloning Repositories\r\n\r\nTo use this guide you will need to clone the <a href=\"https://github.ibm.com/joel-gomez/cp4i-demo\" target=\"_blank\">CP4I end to end demo repo</a> to your workstation. Let's do it now!\r\n\r\n4.1. Open a terminal window and run the command below. It is recommended you do so in a directory like `/Desktop` so that you can easily locate the files afterwards.\r\n* First, authenticate your Terminal with the IBM GitHub repository with the following command:\r\n\r\n```\r\ngh auth login --hostname github.ibm.com\r\n```\r\n\r\n* Within the Terminal window, navigate through the following prompts:\r\n    - a. What is your preferred protocol for Git operations on this host? : `HTTPS`\r\n    - b. Authenticate Git with your GitHub credentials? : `Yes`\r\n    - c. How would you like to authenticate GitHub CLI? : `Login with a web browser`\r\n    - d. Terminal will generate a one-time code : `copy this to a notepad`\r\n    - e. Within your web browser, log in using your GitHub credentials\r\n    - f. Supply the one-time code and approve access to GitHub\r\n    - g. Wait until the Terminal window reports back a successful `Logged in as...`\r\n\r\n4.2 Execute the following within Terminal to clone the demo repository.\r\n```\r\ngh repo clone github.ibm.com/joel-gomez/cp4i-demo\r\n```\r\n\r\n4.3 Open the **cp4i-demo** folder.\r\n```\r\ncd cp4i-demo\r\n```\r\n\r\n***\r\n\r\n## 5 - Setting Context\r\n\r\nBased on where you have deployed your OCP cluster you will need to set up some environment variables to inform the installation script about your environment. Let's do it here!\r\n\r\n5.1 Define an environment variable to set the CP4I version.\r\n```\r\nexport CP4I_VER=16.1.0\r\n```\r\n\r\n5.2 Set the OCP type based on the storage classes in the cluster. If using a ROKS cluster, use export `OCP_TYPE=ROKS` instead.\r\n```\r\nexport OCP_TYPE=ODF\r\n```\r\n\r\n5.3 Set mailtrap credentials, substituting `<my-mailtrap-user>` and `<my-mailtrap-pwd>`.\r\n```\r\nexport MAILTRAP_USER=<my-mailtrap-user>\r\nexport MAILTRAP_PWD=<my-mailtrap-pwd>\r\n```\r\n\r\n5.4 If you have provisioned the OCP cluster in Tech Zone you can use the following script to set the proper default storage class.\r\n```\r\nscripts/99-odf-tkz-set-scs.sh\r\n```\r\n\r\n5.5 Your cluster will also need access to pull the container software required to deploy the Cloud Pak. Your Entitlement Key is used to grant access. You can download you entitlement key from <a href=\"https://myibm.ibm.com/products-services/containerlibrary\" target=\"_blank\">My IBM</a>. Click **Copy**.\r\n![](images/set-context-5.png)\r\n\r\n<InlineNotification kind=\"warning\">If no active entitlement keys are available, you can create one by clicking the **Add new key** button. If you receive an \"Operation could not be completed at this time\", try clicking the button a second or third time until one is generated.</InlineNotification>\r\n\r\n5.6 The IBM Entitled Registry contains software images for the capabilities in IBM Cloud Pak® for Integration. To allow the Cloud Pak for Integration operators to automatically pull those software images, you must first obtain your entitlement key, then add your entitlement key in a pull secret.  Replace the *my-key* with your **IBM entitlement key**.\r\n```\r\nexport ENT_KEY=<my-key>\r\n```\r\n\r\n5.7 Now, you need a namespace where you will deploy the different capabilities.\r\n```\r\nscripts/02a-cp4i-ns-key-config.sh\r\n```\r\n\r\n***\r\n\r\n\r\n## 6 - Installing Foundational Services\r\n\r\nThe IBM Cloud Pak foundational services operator is no longer installed automatically. Install this operator manually if you need to create an instance that uses identity and access management (IAM). The following steps will walk you through this process.\r\n\r\n6.1 First we need to have a certificate manager, otherwise,  the IBM Cloud Pak foundational services operator installation will not complete. Let's do it!\r\n\r\n<InlineNotification kind=\"info-square\">Time to install: ~1 minute.</InlineNotification>\r\n\r\n```\r\noc apply -f resources/00-cert-manager-namespace.yaml\r\noc apply -f resources/00-cert-manager-operatorgroup.yaml\r\noc apply -f resources/00-cert-manager-subscription.yaml\r\n```\r\n\r\nConfirm the subscription has been completed successfully before moving to the next step running the following command.\r\n```\r\nSUB_NAME=$(oc get deployment cert-manager-operator-controller-manager -n cert-manager-operator --ignore-not-found -o jsonpath='{.metadata.labels.olm\\.owner}');if [ ! -z \"$SUB_NAME\" ]; then oc get csv/$SUB_NAME -n cert-manager-operator --ignore-not-found -o jsonpath='{.status.phase}';fi;echo\r\n```\r\n\r\nWait for a response of `Succeeded`.\r\n<InlineNotification kind=\"warning\">If no response is generated, wait a couple of minutes and try again. Do not proceed until receiving the *Succeeded* prompt.</InlineNotification>\r\n\r\n\r\n6.2 Install the Postgress SQL Catalog Source.\r\n\r\n<InlineNotification kind=\"info-square\">Time to install: ~1 minute.</InlineNotification>\r\n\r\n```\r\noc apply -f catalog-sources/${CP4I_VER}/01-postgress-sql-catalog-source.yaml\r\n```\r\n\r\nConfirm the catalog source has been deployed successfully before moving to the next step running the following command.\r\n```\r\noc get pods -n openshift-marketplace | grep postgresql\r\n```\r\n\r\nWait for a response of `READY`.\r\n\r\n<InlineNotification kind=\"warning\">You may be seeing a response of *TRANSIENT_FAILURE* which indicates the deployment is underway but not yet complete. Wait until the *READY* response is received before continuing.</InlineNotification>\r\n\r\n6.3 Install the Common Services Catalog source.\r\n\r\n<InlineNotification kind=\"info-square\">Time to install: ~1 minute.</InlineNotification>\r\n\r\n```\r\noc apply -f catalog-sources/${CP4I_VER}/02-common-services-catalog-source.yaml\r\n```\r\n\r\nConfirm the catalog source has been deployed successfully before moving to the next step running the following command.\r\n```\r\noc get catalogsources opencloud-operators -n openshift-marketplace -o jsonpath='{.status.connectionState.lastObservedState}';echo\r\n```\r\n\r\nWait for a response of `READY`.\r\n\r\n6.4 Create the Common Services namespace.\r\n```\r\noc new-project ibm-common-services\r\n```\r\n\r\n6.5 Install the Foundational Services operator (former Common Services).\r\n\r\n<InlineNotification kind=\"info-square\">Time to install: ~1 minute.</InlineNotification>\r\n\r\n```\r\noc apply -f subscriptions/${CP4I_VER}/00-common-service-subscription.yaml\r\n```\r\n\r\nConfirm the operator has been deployed successfully before moving to the next step running the following command.\r\n```\r\nSUB_NAME=$(oc get deployment/ibm-common-service-operator -n openshift-operators --ignore-not-found -o jsonpath='{.metadata.labels.olm\\.owner}');if [ ! -z \"$SUB_NAME\" ]; then oc get csv/$SUB_NAME --ignore-not-found -o jsonpath='{.status.phase}';fi;echo\r\n```\r\n\r\nWait for a response of `Succeeded`.\r\n\r\n***\r\n\r\n### 7 – Deploying the Platform UI\r\n\r\nIn this section, you will install the Platform Navigator UI. The Platform UI is a user interface for the IBM Cloud Pak for Integration that allows the user to deploy and manage instances of the integration capabilities from a central location.\r\n\r\nDeploying the Platform UI allows you to deploy and manage instances from a central location.\r\n\r\n7.1 First, let's install Platform UI Catalog source.\r\n\r\n<InlineNotification kind=\"info-square\">Time to install: ~1 minute.</InlineNotification>\r\n\r\n```\r\noc apply -f catalog-sources/${CP4I_VER}/03-platform-navigator-catalog-source.yaml\r\n```\r\n\r\nConfirm the catalog source has been deployed successfully before moving to the next step running the following command.\r\n```\r\noc get catalogsources ibm-integration-platform-navigator-catalog -n openshift-marketplace -o jsonpath='{.status.connectionState.lastObservedState}';echo\r\n```\r\n\r\nWait for a response of `READY`.\r\n\r\n\r\n7.2 Install the Platform UI Operator.\r\n\r\n<InlineNotification kind=\"info-square\">Time to install: ~1 minute.</InlineNotification>\r\n\r\n```\r\noc apply -f subscriptions/${CP4I_VER}/01-platform-navigator-subscription.yaml\r\n```\r\n\r\nConfirm the operator has been deployed successfully before moving to the next step running the following command.\r\n```\r\nSUB_NAME=$(oc get deployment ibm-integration-platform-navigator-operator -n openshift-operators --ignore-not-found -o jsonpath='{.metadata.labels.olm\\.owner}');if [ ! -z \"$SUB_NAME\" ]; then oc get csv/$SUB_NAME --ignore-not-found -o jsonpath='{.status.phase}';fi;echo\r\n```\r\n\r\nWait for a response of `Succeeded`.\r\n\r\n7.3 Deploy a Platform UI instance.\r\n\r\n<InlineNotification kind=\"info-square\">Time to install: ~10 minutes.</InlineNotification>\r\n\r\n```\r\noc apply -f instances/${CP4I_VER}/common/01-platform-navigator-instance.yaml\r\n```\r\n\r\nConfirm the instance has been deployed successfully before moving to the next step running the following command.\r\n```\r\noc get platformnavigator cp4i-navigator -n tools -o jsonpath='{.status.conditions[0].type}';echo\r\n```\r\n\r\nWait for a response of `READY`.\r\n\r\n<InlineNotification kind=\"warning\">You may be seeing a response of `PENDING` which indicates the deployment is underway but not yet complete. Wait until the `READY` response is received before continuing.</InlineNotification>\r\n\r\n\r\n7.4 Once the Platform UI instance is up and running get the access info.\r\n```\r\nscripts/03b-cp4i-access-info.sh\r\n```\r\n\r\n7.5 Open the Platform UI  URL and log in. Note the password is temporary and you will be required to change it. Take note of your new password, you will use it multiple times.\r\n![](images/platform-ui-8.png)\r\n\r\nRecord the credentials to a notepad for reference later.\r\n\r\n7.6 Open the Platform UI URL with a web browser and log in. Note the password is temporary and you will be required to change it. Take note of your new password, as you will use it multiple times throughout the lab.\r\n![](images/platform-ui-9.png)\r\n\r\nIn this lab, you are using the cp4i-access-info script to capture this information. But there are multiple ways to find the Platform Navigator URL. Below are some examples, but you can get more details in the <a href=\"https://www.ibm.com/docs/en/cloud-paks/cp-integration/2022.4?topic=ui-deploying-platform-using-openshift-console\">Product documentation page</a>.\r\n  - On the IBM Cloud Pak for Integration operator page in the Installed Operator view in the OpenShift Web Console.\r\n  - Checking the Platform UI route on the Networking > Routes view on OpenShift Web Console.\r\n  - Using the \"oc get consolelink\" command and filter by \"IBM CLoud Pak for Integration\" to get the list of Platform UI URLs available.\r\n\r\n***\r\n\r\n### 8 - Deploying Automation Assets\r\n\r\nIn this section, you will install the Automation foundation assets(Automation Assets). It is a capability that lets you store, manage, and share integration assets.\r\n\r\nAutomation assets enables teams to share and reuse integration assets across capability instances. For example, you can import an OpenAPI specification asset within the IBM API Connect user interface.\r\n\r\nAssets can be located in remote repositories, such as Git. This feature allows users to take advantage of the versioning capability offered by the remote repository. Assets that are stored in a remote repository are read-only.\r\n\r\n8.1 Let's deploy an instance of the Automation Assets using the following script:\r\n```\r\noc apply -f catalog-sources/${CP4I_VER}/04-asset-repo-catalog-source.yaml\r\n```\r\n\r\nConfirm the catalog source has been deployed successfully before moving to the next step running the following command.\r\n```\r\noc get catalogsources ibm-integration-asset-repository-catalog -n openshift-marketplace -o jsonpath='{.status.connectionState.lastObservedState}';echo\r\n```\r\n\r\nWait for a response of `READY`.\r\n\r\n8.2 Install Asset Repo Operator.\r\n```\r\noc apply -f subscriptions/${CP4I_VER}/02-asset-repo-subscription.yaml\r\n```\r\n\r\nConfirm the operator has been deployed successfully before moving to the next step running the following command.\r\n```\r\nSUB_NAME=$(oc get deployment ibm-integration-asset-repository-operator -n openshift-operators --ignore-not-found -o jsonpath='{.metadata.labels.olm\\.owner}');if [ ! -z \"$SUB_NAME\" ]; then oc get csv/$SUB_NAME --ignore-not-found -o jsonpath='{.status.phase}';fi;echo\r\n```\r\n\r\nWait for a response of `Succeeded`.\r\n\r\n8.3 Deploy an Asset Repo instance\r\n```\r\noc apply -f instances/${CP4I_VER}/${OCP_TYPE}/02-asset-repo-ai-instance.yaml\r\n```\r\n\r\nConfirm the instance has been deployed successfully before moving to the next step running the following command.\r\n```\r\noc get assetrepository asset-repo-ai -n tools -o jsonpath='{.status.phase}';echo\r\n```\r\n\r\nWait for a response of `Ready`.\r\n\r\n\r\n***\r\n\r\n### 9 - Deploying API Connect\r\n\r\n9.1 Install DataPower Catalog Source\r\n```\r\noc apply -f catalog-sources/${CP4I_VER}/05-datapower-catalog-source.yaml\r\n```\r\n\r\nConfirm the catalog source has been deployed successfully before moving to the next step running the following command.\r\n```\r\noc get catalogsources ibm-datapower-operator-catalog -n openshift-marketplace -o jsonpath='{.status.connectionState.lastObservedState}';echo\r\n```\r\n\r\nWait for a response of `READY`.\r\n\r\n9.2 Install DataPower Operator.\r\n```\r\noc apply -f subscriptions/${CP4I_VER}/03-datapower-subscription.yaml\r\n```\r\n\r\nConfirm the operator has been deployed successfully before moving to the next step running the following command.\r\n```\r\nSUB_NAME=$(oc get deployment datapower-operator -n openshift-operators --ignore-not-found -o jsonpath='{.metadata.labels.olm\\.owner}');if [ ! -z \"$SUB_NAME\" ]; then oc get csv/$SUB_NAME --ignore-not-found -o jsonpath='{.status.phase}';fi;echo\r\n```\r\n\r\nWait for a response of `Succeeded`.\r\n\r\n9.3 Install APIC Catalog Source.\r\n```\r\noc apply -f catalog-sources/${CP4I_VER}/07-api-connect-catalog-source.yaml\r\n```\r\n\r\nConfirm the catalog source has been deployed successfully before moving to the next step running the following command.\r\n```\r\noc get catalogsources ibm-apiconnect-catalog -n openshift-marketplace -o jsonpath='{.status.connectionState.lastObservedState}';echo\r\n```\r\n\r\nWait for a response of `READY`.\r\n\r\n9.4 Install APIC Operator\r\n```\r\noc apply -f subscriptions/${CP4I_VER}/04-api-connect-subscription.yaml\r\n```\r\n\r\nConfirm the operator has been deployed successfully before moving to the next step running the following command.\r\n```\r\nSUB_NAME=$(oc get deployment ibm-apiconnect -n openshift-operators --ignore-not-found -o jsonpath='{.metadata.labels.olm\\.owner}');if [ ! -z \"$SUB_NAME\" ]; then oc get csv/$SUB_NAME --ignore-not-found -o jsonpath='{.status.phase}';fi;echo\r\n```\r\n\r\nYou should get responses of `Succeeded` for both of them.\r\n\r\n9.5 Deploy APIC instance with some extra features enabled.\r\n\r\n<InlineNotification kind=\"info-square\">Time to install: ~30 minutes.</InlineNotification>\r\n\r\n```\r\nscripts/07d-apic-inst-deploy-instana.sh\r\n```\r\n\r\nConfirm the installation completed successfully before moving to the next step running the following commands.\r\n```\r\noc get APIConnectCluster apim-demo -n tools -o jsonpath='{.status.phase}';echo\r\n```\r\n\r\nNote this will take almost 30 minutes, so be patient, and at the end you should get a `Ready` response.\r\n\r\n9.6 Configure the email server in APIC.\r\n\r\n<InlineNotification kind=\"info-square\">In this specific step you need to have APIC CLI installed, as described in the Prerequisites section. Follow this <a href=\"https://www.ibm.com/docs/en/api-connect/10.0.8?topic=configuration-installing-toolkit\" target=\"_blank\">this documentation to install it</a>.</InlineNotification>\r\n\r\n```\r\nscripts/07f-apic-initial-config.sh\r\n```\r\n\r\n9.7 Create a Provider Organization for admin user.\r\n```\r\nscripts/07g-apic-new-porg-cs.sh\r\n```\r\n\r\n### 10 - Deploying App Connect\r\n\r\n10.1 Install the App Connect Catalog source.\r\n```\r\noc apply -f catalog-sources/${CP4I_VER}/10-app-connect-catalog-source.yaml\r\n```\r\n\r\nConfirm the catalog source has been deployed successfully before moving to the next step running the following command.\r\n```\r\noc get catalogsources appconnect-operator-catalogsource -n openshift-marketplace -o jsonpath='{.status.connectionState.lastObservedState}';echo\r\n```\r\n\r\nWait for a response of `READY`.\r\n\r\n10.2 Install the App Connect operator.\r\n```\r\noc apply -f subscriptions/${CP4I_VER}/07-app-connect-subscription.yaml\r\n```\r\n\r\nConfirm the operator has been deployed successfully before moving to the next step running the following command.\r\n```\r\nSUB_NAME=$(oc get deployment ibm-appconnect-operator -n openshift-operators --ignore-not-found -o jsonpath='{.metadata.labels.olm\\.owner}');if [ ! -z \"$SUB_NAME\" ]; then oc get csv/$SUB_NAME --ignore-not-found -o jsonpath='{.status.phase}';fi;echo\r\n```\r\n\r\nWait for a response of `Succeeded`.\r\n\r\n10.3 It is time to Deploy the Dashboard instance.\r\n```\r\noc apply -f instances/${CP4I_VER}/${OCP_TYPE}/06-ace-dashboard-instance.yaml\r\n```\r\n\r\nConfirm the instance has been deployed successfully before moving to the next step running the following command.\r\n```\r\noc get dashboard ace-dashboard -n tools -o jsonpath='{.status.phase}';echo\r\n```\r\n\r\nNote this will take few minutes, but at the end you should get a response of `Ready`.\r\n\r\n\r\n10.4 Deploy Designer Authoring instance with support for Callable Flow. First let's deploy the Switch Server instance.\r\n```\r\noc apply -f instances/${CP4I_VER}/common/07-ace-switch-server-instance.yaml\r\n```\r\n\r\nConfirm the instance has been deployed successfully before moving to the next step running the following command.\r\n```\r\noc get switchserver ace-switch-server -n tools -o jsonpath='{.status.phase}';echo\r\n```\r\n\r\nWait for a response of `Ready`.\r\n\r\n10.5 Deploy Designer Authoring instance.\r\n```\r\noc apply -f instances/${CP4I_VER}/${OCP_TYPE}/08-ace-designer-local-ai-instance.yaml\r\n```\r\n\r\nConfirm the instance has been deployed successfully before moving to the next step running the following command.\r\n```\r\noc get designerauthoring ace-designer-ai -n tools -o jsonpath='{.status.phase}';echo\r\n```\r\n\r\nWait for a response of `Ready`\r\n\r\n10.6 Now, let's create Bar Auth Configuration.\r\n```\r\nscripts/11-ace-config-barauth-github.sh\r\n```\r\n\r\n\r\n***\r\n\r\n### 11 - Set up Salesforce\r\n\r\nYou need a Salesforce developer account to run this demo. If you already have a Salesforce developer account, you can use that (start at step 2 below). If not, you can sign up for a free developer account by following step 1 below.\r\n\r\n11.1 Go to <a href=\"https://developer.salesforce.com/signup\" target=\"_blank\" rel=\"noreferrer\">Salesforce Developers</a>. Follow the prompts on the Saleforce pages to get your free developer account.<br/>\r\n\r\n11.2 As soon as you have your account, go back to the <a href=\"https://login.salesforce.com/\" target=\"_blank\" rel=\"noreferrer\">Salesforce log in page</a> and log in to your developer account.<br/><img src=\"images/Prep3.5.png\" width=\"800\" /><br/>\r\n\r\n11.3 Click the **profile** icon (1) and save your Salesforce Login URL (2).<br/><img src=\"images/Prep3.6.png\" width=\"800\" /><br/>\r\n\r\n11.4 In the same user profile menu select **Settings**.<br/><img src=\"images/Prep3.7.png\" width=\"800\" /><br/>\r\n\r\n11.5 Click **Reset My Security Token** in the **My Personal Information** (1) menu. Then, click **Reset Security Token** (2). A newly-generated security token will be emailed to you.<br/><img src=\"images/Prep3.8.png\" width=\"800\" /><br/>\r\n\r\n11.6 Next, you will create an application representing App Connect Enterprise, and then retrieve the Consumer Key and Consumer Secret. Click the **cogwheel** icon (1) and select **Setup** (2).<br/><img src=\"images/Prep3.9.png\" width=\"800\" /><br/>\r\n\r\n11.7 In the navigator on the left-hand side, scroll to **PLATFORM TOOLS**, expand **Apps** (1), and click **App Manager** (2).<br/><img src=\"images/prep-image3.7.png\" width=\"800\" /><br/>\r\n\r\n11.8 Click **New Connected App**.<br/><img src=\"images/prep-image3.8.png\" width=\"800\" /><br/>\r\n\r\n11.9 Enter **App Connect** (1) as the **Connect App Name** and your email as the **Contact Email** (2). Select **Enable OAuth Settings** (3).<br/><img src=\"images/prep-image3.9.png\" width=\"800\" /><br/>\r\n\r\n11.10 Select **Enable for Device Flow** (1). Now select **Manage user data via APIs (api)** (2) as the **Selected OAuth Scopes**. Click **Add** (3)<br/><img src=\"images/prep-image3.10.png\" width=\"800\" /><br/>\r\n\r\n11.11 Click **Save**.<br/><img src=\"images/prep-image3.11.png\" width=\"800\" /><br/>\r\n\r\n11.12 It will take approximately 10 minutes for the new connected app to register in Salesforce. Once it does, you should see **Manage Consumer Details** displayed. Click **Manage Consumer Details,** following any authentication directions.<br/><img src=\"images/Prep3.15.png\" width=\"800\" /><br/>\r\n\r\n11.13 Save the **Consumer Key** and **Consumer Secret.**<br/><img src=\"images/salesforce-key-secret.png\" width=\"800\" /><br/>\r\n\r\n11.14 In the search box at the top of the screen, enter **OAuth** (1), and then select **OAuth and OpenID Connect Settings** (2).<br/><img src=\"images/oauth-and-open-id.png\" width=\"800\" /><br/>\r\n\r\n11.15 Ensure that **OAuth User-Agent Flows** and **OAuth Username-Password Flows** are enabled. <br/><img src=\"images/oauth-user-agent-flows.png\" width=\"800\" /><br/>\r\n\r\nYour Salesforce developer account is ready.\r\n\r\n<br/>\r\n\r\n***\r\n\r\n### 12 - Connect Cloud Pak for Integration instance to your endpoints\r\n\r\nLet’s configure our services endpoints in Cloud Pak for Integration.\r\n\r\n12.1\tOpen the Platform Navigator URL. Enter your admin **Username** (1) and **Password** (2), and click **Sign In** (3).<br/><img src=\"images/prep-image210.png\" width=\"800\" /><br/>\r\n\r\n12.2 In the menu on the top left, open the **Design** folder (1) and select **Integrations** (2). <br/><img src=\"images/prep-44.png\" width=\"800\" /><br/>\r\n\r\n12.3 Click on the **ace-designer-demo** entry. <br/><img src=\"images/prep-44-2.png\" width=\"800\" /><br/>\r\n\r\n12.4 Click the **Catalog** icon to see a list of the available connectors. <br/><img src=\"images/prep-45.png\" width=\"800\" /><br/>\r\n\r\n12.5 Search for **salesforce** (1) and click **Connect** (2).<br/><img src=\"images/Prep4.5.png\" width=\"800\" /><br/>\r\n\r\n12.6 Enter your Salesforce **Login URL**.<inline-notification text=\"You must enter <strong>‘https://’</strong> in front of the Saleforce Login URL you saved earlier. The connection will not work if you just copy/paste the hostname.\"></inline-notification><img src=\"images/Prep4.6.png\" width=\"800\" />\r\n\r\n12.7 Input your Salesforce **Username** (1). Fill in the connector's **Password** field (2) by concatenating your Salesforce **Password** and the **Security token** received via email.<br/><br/>For example, if your Salesforce password is ‘myGreatPassword’ and your Salesforce security token is ‘2325jsdhew4312hs534dh’ then enter ‘myGreatPassword2325jsdhew4312hs534dh’ in the **Password** field.<br/><img src=\"images/Prep4.7.png\" width=\"800\" /><br/><br/>\r\n\r\n12.8 Input Salesforce’s **Consumer Key** as **Client ID** (1) and **Secret** as **Client Secret** (2), in the connector account UI. Click **Connect** (3).<br/><img src=\"images/Prep4.8.png\" width=\"800\" /><br/>\r\n\r\n12.9 Click on the **menu** icon (1) and select **Rename Account** (2).<br/><img src=\"images/Prep4.9.png\" width=\"800\" /><br/>\r\n\r\n12.10 Enter **App Connect Trial** (1) as **Account name** and click **Rename Account** (2).<br/><img src=\"images/Prep4.10.png\" width=\"800\" /><br/>\r\n\r\nYour environment is ready to demo.\r\n\r\n<br/>\r\n\r\n***\r\n\r\n### 13 - Configure the asset repository\r\n\r\nDuring the demo we will import an existing flow from the assest repository. An GitHub repository will be configured to import the flow.\r\n\r\n13.1 In the CP4I homepage, you should see the all instances available on your Pak. Select **assetrepo**.<br/><img src=\"images/asset-repo-100.png\" width=\"800\" /><br/>\r\n\r\n13.2 Click **Remotes** (1) and select **Add remote** (2). <br/><img src=\"images/asset-repo-110.png\" width=\"800\" /><br/>\r\n\r\n13.3 Fill in the following values:<br/>\r\n   * **Name** (1): CP4I Demo Assets\r\n   * **Git URL** (2): https://github.com/IBM/cp4i-demos.git\r\n   * **Automatic sync options** (3): 5 minutes\r\n   * **Asset types to synchronize** (4): Select all\r\n\r\n   Click **Create remote** (5) to complete the form.\r\n\r\n   <img src=\"images/asset-repo-120.png\" width=\"800\" /><br/>\r\n\r\n13.4 In a couple of minutes the resources from the GitHub repository will be synchronized.<br/><img src=\"images/asset-repo-130.png\" width=\"800\" /><br/>\r\n\r\n<br/>\r\n\r\n***\r\n\r\n### 14 - Creating Dev User for Developer Portal\r\n\r\nNow create a user in the Developer Portal.\r\n\r\n14.1 Expand **Design** and select **APIs** (1).<br/><img src=\"images/prep-image501.png\" width=\"800\" /><br/>\r\n\r\n14.2 Click **ademo** API management. <br/><img src=\"images/prep-image502.png\" width=\"800\" /><br/>\r\n\r\n14.3 If a login screen is presented, select **Cloud Pak User Registry** <br/><img src=\"images/prep-image212.png\" width=\"800\" /><br/>\r\n\r\n14.4 Click **Manage catalogs** (2).<br/><img src=\"images/prep-image213.png\" width=\"800\" /><br/>\r\n\r\n14.5 Open **Sandbox**.<br/><img src=\"images/prep-image214.png\" width=\"800\" /><br/>\r\n\r\n14.6 Select the **Consumers** (1) tab, click **Add** (2) and select **Create organization** (3).<br/><img src=\"images/prep-image215.png\" width=\"800\" /><br/>\r\n\r\n14.7 Fill in **IBM** as the title.<br/><img src=\"images/prep-image216.png\" width=\"800\" /><br/>\r\n\r\n14.8 Scroll down to the Owner section, set the type of user to **New user** (1), fill in the following details and click **Create**.\r\n\r\n| FIELD | VALUE |\r\n| ------ | ------- |\r\n| **Username:** | devuser |\r\n| **Email:** | devuser@ibmapiconnect.com |\r\n| **First name:** | Dev |\r\n| **Last name:** | User |\r\n| **Password:** | AP1Connect! |\r\n\r\n<img src=\"images/prep-image217.png\" width=\"800\" />\r\n\r\n14.9 A new consumer organization is created.\r\n<br/><img src=\"images/prep-image218.png\" width=\"800\" /><br/>\r\n\r\nCongratulations! Your portal developer user has been created and you are ready for the demo.\r\n\r\n<br/>\r\n","fileAbsolutePath":"C:/Users/ruffa/Documents/GitHub/learninghub/src/pages/demos/cp4i-api-tech/demo-preparation-sf-old.mdx"}}},"staticQueryHashes":["1364590287","137577622","137577622","2102389209","2102389209","2456312558","2746626797","2746626797","3018647132","3018647132","3037994772","3037994772","768070550","768070550"]}