{"componentChunkName":"component---src-pages-demos-ace-toolkit-demo-script-mdx","path":"/demos/ace-toolkit/demo-script/","result":{"pageContext":{"frontmatter":{"title":"ACE Toolkit Demo","description":"ACE Toolkit Demo for TechSales","tabs":["Demo preparation","Demo script"]},"relativePagePath":"/demos/ace-toolkit/demo-script.mdx","titleType":"page","MdxNode":{"id":"5649d6e2-0b08-5c19-8777-004a1e7e6092","children":[],"parent":"fcddbbee-e18b-5bc2-8fe5-a2e10f4a918e","internal":{"content":"---\ntitle: ACE Toolkit Demo\ndescription: ACE Toolkit Demo for TechSales\ntabs: [ 'Demo preparation', 'Demo script']\n---\n\n\n<FeatureCard\n  title=\"Create integrations with App Connect for Developers Toolkit - Demo Script\"\n  color=\"dark\"\n  >\n\n![banner](./images/banner-ace-toolkit.jpg)\n\n</FeatureCard>\n\n\n<span id=\"place1\"></span>\n\n### **Introduction**\n<br/>\nToday's organizations use a wide variety of diverse Software as a Service (SaaS) applications, often without centralized coordination between them. However, integrating applications  is essential to help organizations increase efficiency and optimize business workflows. For instance, in a typical sales process without application integration, sales reps may use Salesforce for customer relationships and Excel for quotes. After finalizing a sale, they have to manually transfer data such as customer details, product information, and pricing data from Salesforce to Excel. This can be time-consuming and prone to errors, leading to delays in processing sales orders and potential inaccuracies in pricing.\n<br/><br/>\nBy connecting your apps using IBM App Connect, the process becomes more streamlined, accurate and efficient because reps can automate data input to create quotes directly from their CPQ application with centralized tracking.\n<br/><br/>\nIBM App Connect can help you securely connect all your endpoints, from databases to packaged apps. It provides  an out-of-the-box set of capabilities that will accelerate  SaaS integration and automation across your business. Additionally, the development kit allows citizen integrators to understand and build powerful integrations with little to no training.\n<br/><br/>\nFocus Corporation, a hypothetical retail company engaged with IBM, is highly motivated to derive more revenue from first-time customers to their online storefronts. Focus has acquired another business and needs to integrate the different IT applications.\n<br/><br/>\nFocus Integration expert would like to build complex, multi-style integrations with support for multiple programming languages and fully integrated with source and pipeline management tools like GIT, Maven, Jenkins, etc. \n<br/><br/>\nFocus’ team requested a demo to learn how IBM App Connect for Developers Toolkit can help them to implement complex and advanced integration scenarios.\n<br/><br/>\n\n(Demo Slides <a href=\"https://github.com/ibm-integration/learninghub/blob/main/src/pages/demos/apic-tech-graphql/files/APICGraphQLSlides.pptx\" target=\"_blank\" rel=\"noreferrer\">here</a>)\n<br/>\n\n\n### **1 - Create your Integration flow**\n\n<details>\n<summary>1.1 - Starting App Connect Toolkit</summary><br/>\n\n**Narration**\n\nIBM App Connect is an industry-leading integration solution that connects any of your applications and data, no matter where they reside. With hundreds of prebuilt connectors and customizable templates, App Connect helps users of all skill levels rapidly connect Software as a Service (SaaS) applications and build integration flows.\n\nFocus team is looking for an advanced, fully customizable code platform. They would like to harness a lightweight, fast-performing engine that easily scales to support their growing needs. They need to enable support for multiple types of data integration, including event, application programming interfaces (APIs), services, sync/async, transactional batch processing and more. Focus Integration experts needs to map data fields and transform data formats exchanged between applications, such as XML, JSON, CSV, EDIFACT, SWIFT and other industry protocols.\n\nBecause of that, they decided to explore IBM App Connect Enterprise for Developers (Toolkit). The Toolkit is an integrated development environment and graphical user interface based on the Eclipse platform. Focus Integration experts can use the IBM App Connect Enterprise Toolkit to build powerful integration applications, services, and APIs. And they can then deploy their integration solutions to the software run time, IBM App Connect Enterprise as a Service, containers, or a combination of those environments.\n\n<hr/><br/>\n\n**Action** &nbsp; 1.1.1\n\nOpen your **App Connect Enterprise Toolkit** by clicking the icon on the Launchpad (MAC OS) or Desktop (Windows) or executing **ace toolkit** in terminal window.\n\n  ![](images/start-toolkit-1.png)\n\n<hr/><br/>\n\n\n**Action** &nbsp; 1.1.2\n\nIn the Workspace Launcher window, accept the default one. Click **Launch**.\n\n  ![](images/start-toolkit-2.png)\n\n<hr/><br/>\n\n\n**Action** &nbsp; 1.1.3\n\n**Close** the *welcome page*.\n\n  ![](images/start-toolkit-3.png)\n\n***\n</details>\n\n\n<details>\n<summary>1.2 - Creating a REST API</summary><br/>\n\n**Narration**\n\nFrom the Integration Development perspective, Focus Integration experts can create all manner of integration flows, as well as manage connectivity between services and endpoints.\n\nFocus team would like to explore how easy is to create an API flow that implement different type of message transformation.\n\nApp Connect provides a specific type of project to support REST API implementations, which can either be based upon a Swagger (v2) specification document or an OpenAPI (v3) specification document. REST APIs can be authored and deployed from the IBM App Connect Enterprise Toolkit.\n\nLet's see how easy is to create an REST API using the Toolkit. Focus team will create a REST API from an existing OpenAPI 3 document.\n\n<hr/><br/>\n\n**Action** &nbsp; 1.2.1\n\nFrom the Application Development view click the **New...** hyperlink at the top right and from the menu which appears, click on **REST API**.\n\n  ![](images/create-rest-1.png)\n\n<hr/><br/>\n\n\n**Action** &nbsp; 1.2.2\n\nType the Name **ShoppingListAPI** (1), and switch the radio button to the option labelled “**Import resources and operations defined in a REST API document**\" (2) then click **Next** (3).\n\n  ![](images/create-rest-2.png)\n\n<hr/><br/>\n\n\n**Action** &nbsp; 1.2.3\n\nYou will be asked to import an OpenAPI 3 document either from the file system or your workspace. Using the radio button to “**Select from your workspace**” (1), select **ShoppingListAPI.json** from the json folder in the **HelperFiles** project (2) (note: if you don't see the HelperFiles project, maybe you forgot to import this project in the Demo Preparation part). Click **Next** (3).\n\n  ![](images/create-rest-3.png)\n\n<hr/><br/>\n\n\n**Action** &nbsp; 1.2.4\n\nClick **Finish**.\n\n  ![](images/create-rest-4.png)\n\n\n***\n</details>\n\n\n<details>\n<summary>1.3 - Exploring the REST API details</summary><br/>\n\n**Narration**\n\nFocus team created the REST API and they can see a summary page displaying details about the API such as its title and base URL. The next section down entitled Resources and Operations lists the operations in bright colors.\n\nFocus developers can easily edit the API Document using the OpenAPI editor interface.\n\n<hr/><br/>\n\n**Action** &nbsp; 1.3.1\n\nShow the **API Details** (1) and **Resources and Operations** (2) sections.\n\n  ![](images/api-doc-1.png)\n\n<hr/><br/>\n\n\n**Action** &nbsp; 1.3.2\n\nClick on **Edit API Document in OpenAPI editor**.\n\n  ![](images/api-doc-2.png)\n\n<hr/><br/>\n\n\n**Action** &nbsp; 1.3.3\n\nIf necessary accept the incoming network connections.\n\n  ![](images/api-doc-3.png)\n\n<hr/><br/>\n\n\n**Action** &nbsp; 1.3.4\n\nShow the *OpenAPI Editor*.\n\n  ![](images/api-doc-4.png)\n\n\n***\n</details>\n\n<br/><br/>\n\n### **2 - Add a new operation**\n\n<details>\n<summary>2.1 - Adding a new path</summary><br/>\n\n**Narration**\n\nThe Integration experts decided to create a new API operation to list the products of a specific department.\n\n<hr/><br/>\n\n\n**Action** &nbsp; 2.1.1\n\nOn the **Path** section (1), on left menu, click on the **Plus** button (2).\n\n  ![](images/new-path-1.png)\n\n<hr/><br/>\n\n\n**Action** &nbsp; 2.1.2\n\nEnter **/shoppinglist/{department}** as the new *Path* (1). You are welcome to enter a *summary* (2) and *description* (3). Then click **Add** (4).\n\n  ![](images/new-path-2.png)\n\n\n***\n</details>\n\n<details>\n<summary>2.2 - Adding a new operation</summary><br/>\n\n**Narration**\n\nThey go ahead and create a new path with the GET operation in the ShoppingListAPI.\n\n<hr/><br/>\n\n\n**Action** &nbsp; 2.2.1\n\nOn the **Operations** section (1) of the new path, click on the **Plus** button (2).\n\n  ![](images/new-oper-1.png)\n\n<hr/><br/>\n\n\n**Action** &nbsp; 2.2.2\n\nSelect the **get** verb (1) and click **Add**.\n\n  ![](images/new-oper-2.png)\n\n\n***\n</details>\n\n<details>\n<summary>2.3 - Defining parameter</summary><br/>\n\n**Narration**\n\nThis new path will receive the product department as parameter in the path request.\n\n<hr/><br/>\n\n\n**Action** &nbsp; 2.3.1\n\nScroll down to see the *Parameter* section (1) and click **Add** button (2).\n\n  ![](images/def-param-1.png)\n\n<hr/><br/>\n\n\n**Action** &nbsp; 2.3.2\n\nEnter **department** as parameter name (1) and select **path** in *Located In* field (2).\n\n  ![](images/def-param-2.png)\n\n<hr/><br/>\n\n\n**Action** &nbsp; 2.3.3\n\nScroll down to see the checkbox list and select **Required** field (1). Then click **Add** (2).\n\n  ![](images/def-param-3.png)\n\n***\n</details>\n\n\n<details>\n<summary>2.4 - Defining schema</summary><br/>\n\n**Narration**\n\nFocus developers define the schema of the parameter as a simple string.\n\nGreat, Focus’ developers successfully created a new operation in the ShoppingListAPI!\n\n<hr/><br/>\n\n\n**Action** &nbsp; 2.4.1\n\nScroll down to see the *Schema* section and type **department** as schema title (1), and select **string** as *schema type* (2).\n\n  ![](images/def-schema-1.png)\n\n<hr/><br/>\n\n\n**Action** &nbsp; 2.4.2\n\nScroll up and click **Save**.\n\n  ![](images/def-schema-2.png)\n\n<hr/><br/>\n\n\n**Action** &nbsp; 2.4.3\n\n**Close** the OpenAPI editor.\n\n  ![](images/def-schema-3.png)\n\n***\n</details>\n\n\n<br/><br/>\n\n### **3 - Create Subflow**\n<details>\n<summary>3.1 - Creating GetDepartment Subflow</summary><br/>\n\n**Narration**\n\nWith IBM App Connect is really simple to implement the logic of your API operation. Focus team can easily create a subflow to do it!\n\n<hr/><br/>\n\n\n**Action** &nbsp; 3.1.1\n\nBack to the ShoppingListAPI description, open the **/shoppinglist/{department|** section.\n\n  ![](images/create-subflow-1.png)\n\n<hr/><br/>\n\n\n**Action** &nbsp; 3.1.2\n\nClick **Create subflow**.\n\n  ![](images/create-subflow-2.png)\n\n***\n</details>\n\n\n<details>\n<summary>3.2 - Connecting nodes</summary><br/>\n\n**Narration**\n\nHere Focus team has their subflow. A message flow is a sequence of processing steps that run in the integration node when an input message is received. You define a message flow by including a number of message flow nodes, each of which represents a set of actions that define a processing step.\n\nIn the flow editor, they can edit and change their flow. Message flows are created in the Toolkit using a drag and drop editor.\n\nThe flow is quite simple, consisting of only an Input and Output node. However, the Integration experts would like to explore how to do some message transformations. Let's see how simple is to do it!\n\n<hr/><br/>\n\n**Action** &nbsp; 3.2.1\n\nIn the subflow, wire the **Input** node to the **Output** node.\n\n  ![](images/connect-nodes-1.png)\n\n\n***\n</details>\n\n<br/><br/>\n\n\n### **4 - Using the Mapping Assist feature**\n<details>\n<summary>4.1 - Add Mapping Transformation</summary><br/>\n\n**Narration**\n\nFirst, they decided to explore the Mapping transformation.\n\n<hr/><br/>\n\n\n**Action** &nbsp; 4.1.1\n\nOpen the **Transformation** section.\n\n  ![](images/add-mapping-1.png)\n\n<hr/><br/>\n\n\n**Action** &nbsp; 4.1.2\n\nDrag and drop a **Mapping** node on to the wire and its terminals will be connected up for you (the out terminal of the Input node will be wired to the in terminal of the Mapping node, and the out terminal of the Mapping node will be wired to the in terminal of the Output node).\n\n  ![](images/add-mapping-2.png)\n\n***\n</details>\n\n\n<details>\n<summary>4.2 - Editing Mapping</summary><br/>\n\n**Narration**\n\nWith a mapping, they can use the Graphical Data Mapping editor to take input (source) objects and transform them before they save the resulting output (target) objects.\n\n<hr/><br/>\n\n\n**Action** &nbsp; 4.2.1\n\nDouble-click the **Mapping** node.\n\n  ![](images/edit-mapping-1.png)\n\n<hr/><br/>\n\n\n**Action** &nbsp; 4.2.2\n\nLeave the default settings and click **Finish**.\n\n  ![](images/edit-mapping-2.png)\n\n\n***\n</details>\n\n<details>\n<summary>4.3 - Adding new output</summary><br/>\n\n**Narration**\n\nInitially, they will change the output object to use the Item JSON type.\n\n<hr/><br/>\n\n\n**Action** &nbsp; 4.3.1\n\nClick on “**Add an output object**” button.\n\n  ![](images/new-output-1.png)\n\n<hr/><br/>\n\n\n**Action** &nbsp; 4.3.2\n\nOn the “Select a map output” option, open (double click) the **ShoppingListAPI** (1), open the **JSON Types** (2) and select **Item - Rest API model** (3), then click **OK** (4).\n\n  ![](images/new-output-2.png)\n\n\n<hr/><br/>\n\n\n**Action** &nbsp; 4.3.3\n\nSelect the **original Message Assembly** (1), right click and select **delete** (2) (or press delete on your keyboard).\n\n  ![](images/new-output-3.png)\n\n\n***\n</details>\n\n<details>\n<summary>4.4 - Move Department value</summary><br/>\n\n**Narration**\n\nThe input objects are shown on the left side of the canvas, and the output objects are shown on the right side. You can create connections between the input and output elements by clicking one element, and dragging the mouse to the element that you want to connect to.\n\nFocus team  easily link the Department input parameter to Department parameter of Item JSON Type.\n\n<hr/><br/>\n\n\n**Action** &nbsp; 4.4.1\n\nExpand the **JSON** message assembly on the right (1), then expand the **Data** section underneath (2). Notice that department is listed as a *parameter* (3).\n\n  ![](images/move-dept-1.png)\n\n<hr/><br/>\n\n\n**Action** &nbsp; 4.4.2\n\nOn the left Message Assembly, open the **LocalEnvironment > REST > Input > Parameters**.\n\n  ![](images/move-dept-2.png)\n\n\n<hr/><br/>\n\n\n**Action** &nbsp; 4.4.3\n\nRight-click the **department** entry (1) and select **Quick Link to Output** (2).\n\n  ![](images/move-dept-3.png)\n\n<hr/><br/>\n\n\n**Action** &nbsp; 4.4.4\n\nIn the dialog, scroll down and expand **Data : Item [1..1]** (1) and select **department:string [1..1]** (2).\n\n  ![](images/move-dept-4.png)\n\n\n***\n</details>\n\n<details>\n<summary>4.5 - Setting Cardinality</summary><br/>\n\n**Narration**\n\nThey use the Quick Fix capability to solve the cardinality issue of the new mapping.\n\n<hr/><br/>\n\n\n**Action** &nbsp; 4.5.1\n\nHover the mouse over the **Quick Fix** (light bulb) icon of the new Move box (!) and click the \"**Set cardinality to first index**” link (2).\n\n  ![](images/quick-fix-1.png)\n\n\n***\n</details>\n\n<details>\n<summary>4.6 - Assigning values</summary><br/>\n\n**Narration**\n\nNow, for demo purpose, they will use the assign function to define a hard coded value to name and description fields.  In this demo, they decided to use the description field just to inform the type of transformation node that is processing the transformation, in this case the Mapping node.\n\nGreat, Focus’ developers successfully created a mapping transformation in the ShoppingListAPI!\n\n<hr/><br/>\n\n\n**Action** &nbsp; 4.6.1\n\nOn the new Message Assembly JSON, drag and drop the **name** field to the left (1).  IBM App Connect Enterprise places an **Assign** action for this field (2). \n\n  ![](images/assign-values-1.png)\n\n<hr/><br/>\n\n\n**Action** &nbsp; 4.6.2\n\nUnder the **Properties** for the Assign action, enter “**Caramel Candy Bars**” for the name value.\n\n  ![](images/assign-values-2.png)\n\n\n<hr/><br/>\n\n\n**Action** &nbsp; 4.6.3\n\nRepeat the same steps for the description field: drag and drop the **description** field to the left (1).  IBM App Connect Enterprise places an **Assign** action for this field (2). \n\n  ![](images/assign-values-3.png)\n\n<hr/><br/>\n\n\n**Action** &nbsp; 4.6.4\n\nUnder the **Properties** for the Assign action, enter “**Request has been processed by Mapping Node**” for the name value.\n\n*Note: In this demo, we are using the description field just to inform the node that is processing the transformation.*\n\n  ![](images/assign-values-4.png)\n\n\n<hr/><br/>\n\n\n**Action** &nbsp; 4.6.5\n\nClick **File > Save all**.\n\n  ![](images/assign-values-5.png)\n\n***\n</details>\n\n\n<br/><br/>\n\n### **5 - Create local test server**\n<details>\n<summary>5.1 - Creating a local integration server</summary><br/>\n\n**Narration**\n\nAt this stage, they are ready to test the API. To publish the API, first they need to create a local integration server.\n\n<hr/><br/>\n\n\n**Action** &nbsp; 5.1.1\n\nRight-click **Integration Servers** in the **Integration Explorer** tab (1) and select **Create a local Integration Server** (2).\n\n  ![](images/local-server-1.png)\n\n<hr/><br/>\n\n\n**Action** &nbsp; 5.1.2\n\nKeep the default values and click **Finish**.\n\n  ![](images/local-server-2.png)\n\n<hr/><br/>\n\n\n\n**Action** &nbsp; 5.1.3\n\nOn the *Success* Dialog click **OK**.\n\n  ![](images/local-server-3.png)\n\n<br/>\n\n***\n</details>\n\n<details>\n<summary>5.2 - Adding CORS authorization</summary><br/>\n\n**Narration**\n\nNext, they need to configure the server so that the HTTP listener is enabled for CORS. \n\n<hr/><br/>\n\n\n**Action** &nbsp; 5.2.1\n\nExpand the **TEST_SERVER** directory under the **Independent Resources** folder and double-click the **server.conf.yaml** file to open it in the IBM App Connect Enterprise text editor to the right.\n\n  ![](images/cors-auth-1.png)\n\n<hr/><br/>\n\n\n**Action** &nbsp; 5.2.2\n\nScroll down to the **HTTPConnector** section and paste the code below:\n```\nCORSEnabled: true\nCORSAllowOrigins: '*'\nCORSAllowMethods: 'GET,HEAD,POST,PUT,PATCH,DELETE,OPTIONS'\nCORSAllowHeaders: 'Accept,Accept-Language,Content-Language,Content-Type'\n```\n\n  ![](images/cors-auth-2.png)\n\n<hr/><br/>\n\n\n\n**Action** &nbsp; 5.2.3\n\n**Save** the changes to the **server.conf.yaml** file or click **File > Save all**.\n\n  ![](images/cors-auth-3.png)\n\n<hr/><br/>\n\n\n\n**Action** &nbsp; 5.2.4\n\nRight-click the **TEST_SERVER** (1) and select **Restart** (2).\n\n  ![](images/cors-auth-4.png)\n\n<hr/><br/>\n\n\n\n**Action** &nbsp; 5.2.5\n\nClick **OK** on the Success dialog again.\n\n  ![](images/cors-auth-5.png)\n\n<br/>\n\n***\n</details>\n\n<br/><br/>\n\n### **6 - Test the API**\n<details>\n<summary>6.1 - Deploying the API</summary><br/>\n\n**Narration**\n\nNow, they need to deploy the ShoppingListAPI to the new Local Integration server. They can do it, by dragging and dropping the API to the new server.\n\n<hr/><br/>\n\n\n**Action** &nbsp; 6.1.1\n\nDeploy the REST API which we created earlier named **ShoppingListAPI** (1), by dragging and dropping it from the Application Development view on to the **TEST_SERVER** Integration Server (2).\n\n  ![](images/deploy-api-1.png)\n\n<hr/><br/>\n\n\n**Action** &nbsp; 6.1.2\n\nOn the *Progress Information* dialog, click **Close**.\n\n  ![](images/deploy-api-2.png)\n\n\n***\n</details>\n\n\n<details>\n<summary>6.2 - Starting Web User Interface</summary><br/>\n\n**Narration**\n\nAt this moment, the Focus Integration experts are ready to test the API. They start the Web User Interface.\n\n<hr/><br/>\n\n**Action** &nbsp; 6.2.1\n\nRight-click **TEST_SERVER** (1) and select **Start Web User Interface** (2). \n\n  ![](images/start-wui-1.png)\n\n***\n</details>\n\n\n<details>\n<summary>6.3 - Testing the ShoppingList API</summary><br/>\n\n**Narration**\n\nAnd select the ShoppingListAPI and the new Get Department operation. Not they can use the Try it capability, and enter any product department, for example “Candies”.\n\nGreat, the subflow was invoked and our mapping transformation created a response with our hard coded values. Focus team verified how is really simple to implement a mapping transformation using IBM App Connect.\n\n<hr/><br/>\n\n**Action** &nbsp; 6.3.1\n\nClick the **ShoppingListAPI** tile in the web user interface. \n\n  ![](images/test-api-1.png)\n\n<hr/><br/>\n\n\n**Action** &nbsp; 6.3.2\n\nSelect the **GET /shoppinglist/{department}** operation on the left. \n\n  ![](images/test-api-2.png)\n\n<hr/><br/>\n\n\n**Action** &nbsp; 6.3.3\n\nClick the **Try it** tab.\n\n  ![](images/test-api-3.png)\n\n\n<hr/><br/>\n\n\n**Action** &nbsp; 6.3.4\n\nEnter any **department** name (by now, we are not checking the department) such as **Candies** (1). Click **Send** (2).\n\n  ![](images/test-api-4.png)\n\n<hr/><br/>\n\n\n**Action** &nbsp; 6.3.5\n\nShow the **Response body**.\n\n  ![](images/test-api-5.png)\n\n***\n</details>\n\n<br/><br/>\n\n\n### **7 - Add Compute transformation**\n<details>\n<summary>7.1 - Adding Compute node</summary><br/>\n\n**Narration**\n\nFocus developers heard about ESQL language. Extended Structured Query Language (ESQL) is a programming language based on Structured Query Language (SQL) that is typically used to work with databases. ESQL is extended to access and manipulate data in messages and databases.\n\nThey would like to see how to use ESQL to transform and enrich messages using the Compute node.  Because of it, they decided to explore the Compute node transformation.\n\n<hr/><br/>\n\n\n**Action** &nbsp; 7.1.1\n\nBack to the getDepartment subflow, open again the Transformation menu and drag and drop a **Compute** node.\n\n  ![](images/add-compute-1.png)\n\n<hr/><br/>\n\n**Action** &nbsp; 7.1.2\n\nReadjust the connections of Input and output node to connect to the Compute node (the out terminal of the Input node will be wired to the in terminal of the Compute node, and the out terminal of the Compute node will be wired to the in terminal of the Output node).\n\n  ![](images/add-compute-2.png)\n\n<hr/><br/>\n\n\n**Action** &nbsp; 7.1.3\n\nClick on the **Compute** node (1). On the Compute node's properties change the *Compute mode* to be “**LocalEnvironment and Message**” (2).\n\n  ![](images/add-compute-3.png)\n\n<hr/><br/>\n\n**Action** &nbsp; 7.1.4\n\n**Save** the subflow (you can safely ignore the red crosses on the Compute node - we will fix these up in the next step!).\n\n  ![](images/add-compute-4.png)\n\n***\n</details>\n\n<details>\n<summary>7.2 - Create Broker Schema</summary><br/>\n\n**Narration**\n\nTo simplify the demo, they decided to reuse a pre-created ESQL file.\n\nFirst, they need to create a Broker Schema to include the ESQL file. A broker schema is a symbol space that defines the scope of uniqueness of the names of resources defined within it.\n\n<hr/><br/>\n\n\n**Action** &nbsp; 7.2.1\n\nRight click the **ShoppingListAPI** (1) and choose **New > Broker Schema** (2).\n\n  ![](images/broker-schema-1.png)\n\n<hr/><br/>\n\n\n**Action** &nbsp; 7.2.2\n\nType **utils** as the Schema name (1) and click **Finish** (2).\n\n  ![](images/broker-schema-2.png)\n\n<hr/><br/>\n\n\n**Action** &nbsp; 7.2.3\n\nOn the *New Broker Schema* dialog, click **OK**.\n\n  ![](images/broker-schema-3.png)\n\n\n***\n</details>\n\n<details>\n<summary>7.3 - Copy ESQL file</summary><br/>\n\n**Narration**\n\nNext, Focus developers will copy the pre-created ESQL file to the broker schema folder.\n\n<hr/><br/>\n\n**Action** &nbsp; 7.3.1\n\nSwitch to the Resource perspective using the menu **Window > Perspective > Open Perspective > Other…**\n\n  ![](images/copy-esql-1.png)\n\n\n<hr/><br/>\n\n**Action** &nbsp; 7.3.2\n\nChoose **Resource** (1) and click **Open** (2).\n\n  ![](images/copy-esql-2.png)\n\n<hr/><br/>\n\n**Action** &nbsp; 7.3.3\n\nUsing the Project Explorer view in the top left corner, copy the file **Compute.esql** from the folder named **utils** in the project named *HelperFiles* (1) into the **utils** folder in the project **ShoppingListAPI** (2).\n\n  ![](images/copy-esql-3.png)\n\n<hr/><br/>\n\n**Action** &nbsp; 7.3.4\n\nSwitch back to the *Integration Development* perspective using the **Window > Perspective > Open Perspective > Integration Development** menu.\n\n  ![](images/copy-esql-4.png)\n\n\n***\n</details>\n\n<details>\n<summary>7.4 - Update the ESQL module</summary><br/>\n\n**Narration**\n\nNow, they just need to update the Compute node to use the new ESQL file. They will use a specific module of the ESQL file: the getDepartment.\n\n<hr/><br/>\n\n**Action** &nbsp; 7.4.1\n\nReturn to the *getDepartment* subflow and click on **Compute** node again.\n\n  ![](images/update-esql-1.png)\n\n\n<hr/><br/>\n\n**Action** &nbsp; 7.4.2\n\nOn the Compute node's properties, you need to update the *ESQL module* property. Click **Browse** button.\n\n  ![](images/update-esql-2.png)\n\n<hr/><br/>\n\n**Action** &nbsp; 7.4.3\n\nSelect **{utils}:getDepartment_Compute** (1) and click **OK** (2).\n\n  ![](images/update-esql-3.png)\n\n<hr/><br/>\n\n**Action** &nbsp; 7.4.4\n\n**Save** the subflow.\n\n  ![](images/update-esql-4.png)\n\n\n***\n</details>\n\n<details>\n<summary>7.5 - Review the ESQL</summary><br/>\n\n**Narration**\n\nLet's review the ESQL file. Focus developers can create and modify their ESQL code in the ESQL editor.\n\nThe ESQL code for each of your nodes is contained within a module in an ESQL file. Here they have a specific module for GetDepartment operation.  The module is really simple, just select the Item with Department value equals the Department parameter.\n\nAll three items are hardcoded created in the Initialise procedure. In a real scenario, this data should be retrieved from Products database or Product system.\n\n<hr/><br/>\n\n**Action** &nbsp; 7.5.1\n\nDouble click the **Compute** node, to see the ESQL file.\n\n  ![](images/review-esql-1.png)\n\n\n<hr/><br/>\n\n**Action** &nbsp; 7.5.2\n\nShow the **getDepartment_Compute Module**.\n\n  ![](images/review-esql-2.png)\n\n<hr/><br/>\n\n**Action** &nbsp; 7.5.3\n\nScroll down and show the **Initialise Procedure**.\n\n  ![](images/review-esql-3.png)\n\n<hr/><br/>\n\n**Action** &nbsp; 7.5.4\n\n**Close** the ESQL file.\n\n  ![](images/review-esql-4.png)\n\n\n***\n</details>\n\n<details>\n<summary>7.6 - Test compute node</summary><br/>\n\n**Narration**\n\nAt this moment, the Focus Integration experts are ready to test the new API. They just need to redeploy the API and use the Web User Interface again to test it.\n\nNow, they will test using the three available departments: Candies, Snacks and Bakery.\n\nGreat, the subflow was invoked and our compute transformation created a response with our hard coded values. Focus team verified how is really simple to use ESQL query language to implement message transformations.\n\n<hr/><br/>\n\n**Action** &nbsp; 7.6.1\n\nRe-deploy the REST API, by dragging and dropping the **ShoppingListAPI** (1) again from the Application Development view on to the **TEST_SERVER** Integration Server (2).\n\n  ![](images/test-compute-1.png)\n\n\n<hr/><br/>\n\n**Action** &nbsp; 7.6.2\n\nOn the Progress Information dialog, click **Close**.\n\n  ![](images/test-compute-2.png)\n\n<hr/><br/>\n\n**Action** &nbsp; 7.6.3\n\nOn your browser, refresh the **Web User Interface** page.\n\n  ![](images/test-compute-3.png)\n\n<hr/><br/>\n\n**Action** &nbsp; 7.6.4\n\nOpen again the **ShoppingListAPI** (1), **GET /shoppinglist/{department}** (2), **Try it** tab (3).\n\n  ![](images/test-compute-4.png)\n\n<hr/><br/>\n\n**Action** &nbsp; 7.6.5\n\nEnter a **department** name (it could be Candies, Snacks or Bakery)  (1). Click **Send** (2).\n\n*Note: You are welcome to try any of the three departments, or try a different one to see the 404 Not Found message*.\n\n  ![](images/test-compute-5.png)\n\n<hr/><br/>\n\n**Action** &nbsp; 7.6.6\n\nShow the **Response** body.\n\n  ![](images/test-compute-6.png)\n\n\n***\n</details>\n\n<br/><br/>\n\n### **8 - Add Java transformation**\n<details>\n<summary>8.1 - Adding Java Compute node</summary><br/>\n\n**Narration**\n\nGreat, now the Focus Developers would like to see how to use Java code to tailor the behavior of their integration messages.\n\nThey want to learn how touse the JavaCompute node to examine the content of an input message, transform a message, and build new messages.\n\nBecause of it, they decided to explore the JavaCompute node.\n\n<hr/><br/>\n\n**Action** &nbsp; 8.1.1\n\nBack to the getDepartment subflow, open again the Transformation menu and drag and drop a **JavaCompute** node.\n\n  ![](images/add-javacompute-1.png)\n\n<hr/><br/>\n\n**Action** &nbsp; 8.1.2\n\nReadjust the connections of Input and output node to connect to the Java Compute node (the out terminal of the Input node will be wired to the in terminal of the Java Compute node, and the out terminal of the Java Compute node will be wired to the in terminal of the Output node).\n\n  ![](images/add-javacompute-2.png)\n\n\n***\n</details>\n\n<details>\n<summary>8.2 - Create Java Compute node class</summary><br/>\n\n**Narration**\n\nWith App Connect toolkit, they can use the same tool that they use to create Integration flow to create Java code. Alternatively, if they want to share Java classes across multiple solutions, they can store Java code in a shared library and refer to that library from one or more applications that contain message flows with JavaCompute nodes\n\nHowever, the developers decided to try the Java Compute node class wizard to create template code to accelerate the development process. They selected the Modifying message class template, and in few seconds, they have a skeleton java code to manipulate and transform the integration message.\n\n<hr/><br/>\n\n**Action** &nbsp; 8.2.1\n\nDouble click the **Java Compute** node.\n\n  ![](images/create-javaclass-1.png)\n\n<hr/><br/>\n\n**Action** &nbsp; 8.2.2\n\nOn the *New JavaCompute node class* dialog, accept the default values and click **Next**.\n\n  ![](images/create-javaclass-2.png)\n\n<hr/><br/>\n\n**Action** &nbsp; 8.2.3\n\nSelect **Modifying message class** template (1) and click **Next** (2).\n\n  ![](images/create-javaclass-3.png)\n\n<hr/><br/>\n\n**Action** &nbsp; 8.2.4\n\nOn the Java Settings view, accept the default values and click **Next**.\n\n  ![](images/create-javaclass-4.png)\n\n<hr/><br/>\n\n**Action** &nbsp; 8.2.5\n\nAccept the default Project name and click **Finish**.\n\n  ![](images/create-javaclass-5.png)\n\n\n***\n</details>\n\n<details>\n<summary>8.3 - Adding code</summary><br/>\n\n**Narration**\n\nFor this demo, they will only add a simple message code to create elements in the JSON message, for example add a new Apple Pie product item.\n\n<hr/><br/>\n\n\n**Action** &nbsp; 8.3.1\n\nOn the *GetDepartment_JavaCompute* class, **copy and paste the code below**, below the *Add user code below* comment.\n```\nMbElement outRoot = outMessage.getRootElement();\nMbElement outJsonRoot = outRoot.createElementAsLastChild(MbJSON.PARSER_NAME);\nMbElement outJsonData = outJsonRoot.createElementAsLastChild(MbElement.TYPE_NAME, MbJSON.DATA_ELEMENT_NAME, null);\noutJsonData.createElementAsLastChild(MbElement.TYPE_NAME_VALUE, \"name\", \"Apple Pie\");\noutJsonData.createElementAsLastChild(MbElement.TYPE_NAME_VALUE, \"department\", \"Bakery\");\noutJsonData.createElementAsLastChild(MbElement.TYPE_NAME_VALUE, \"description\", \"Request has been processed by Java Compute Node.\");\n```\n\n  ![](images/add-code-1.png)\n\n<hr/><br/>\n\n\n**Action** &nbsp; 8.3.2\n\nTo solve the imports issue, click on **Source > Organize Imports** menu.\n\n  ![](images/add-code-2.png)\n\n<hr/><br/>\n\n\n**Action** &nbsp; 8.3.3\n\nClick **File > Save All**.\n\n  ![](images/add-code-3.png)\n\n<hr/><br/>\n\n\n**Action** &nbsp; 8.3.4\n\n**Close** the Java class.\n\n  ![](images/add-code-4.png)\n\n***\n</details>\n\n<details>\n<summary>8.4 - Test Java Compute node</summary><br/>\n\n**Narration**\n\nAt this moment, the Focus Integration experts are ready to test the new API using the JavaCompute node. They just need to redeploy the API and use the Web User Interface again to test it.\n\nNow, they will test using the Bakery department only.\n\nGreat, the subflow was invoked and our java compute transformation created a response with our hard coded Apple Pie product. Focus team verified how is really simple to use Java code to implement message transformation.\n\n<hr/><br/>\n\n\n**Action** &nbsp; 8.4.1\n\nRe-deploy the REST API, by dragging and dropping the **ShoppingListAPI** (1) again from the Application Development view on to the **TEST_SERVER** Integration Server (2).\n\n  ![](images/test-java-1.png)\n\n<hr/><br/>\n\n\n**Action** &nbsp; 8.4.2\n\nOn the Progress Information dialog, click **Close**.\n\n  ![](images/test-java-2.png)\n\n<hr/><br/>\n\n\n**Action** &nbsp; 8.4.3\n\nOn your browser, **refresh** the *Web User Interface* page.\n\n  ![](images/test-java-3.png)\n\n<hr/><br/>\n\n\n**Action** &nbsp; 8.4.4\n\nOpen again the **ShoppingListAPI** (1), **GET /shoppinglist/{department}** (2), **Try it** tab (3).\n\n  ![](images/test-java-4.png)\n\n<hr/><br/>\n\n\n**Action** &nbsp; 8.4.5\n\nEnter **Candies** as **department** name (1). Click **Send** (2).\n\n  ![](images/test-java-5.png)\n\n<hr/><br/>\n\n\n**Action** &nbsp; 8.4.6\n\nShow the **Response** body.\n\n  ![](images/test-java-6.png)\n\n***\n</details>\n\n<br/><br/>\n\n### **9 - Add Route**\n<details>\n<summary>9.1 - Adding Route node</summary><br/>\n\n**Narration**\n\nFinally, they want to see how they can route messages through different paths in a message flow, based on the content of the message using a Route node.\n\nFocus Integration experts decided to add a route node to route messages through all different transformation nodes based on the department parameter.  The idea is to redirect to Mapping node only messages to Candies department, redirect to Compute node only messages to Snacks department and redirect to Java node only messages to Bakery department.\n\nLet's see how to do it!\n\n<hr/><br/>\n\n\n**Action** &nbsp; 9.1.1\n\nBack to the getDepartment subflow, open the **Routing** menu and drag and drop a **Route** node.\n\n  ![](images/add-route-1.png)\n\n\n<hr/><br/>\n\n**Action** &nbsp; 9.1.2\n\nDelete all existing wiring. And wire the **Input** node to the new **Route** node.\n\n  ![](images/add-route-2.png)\n\n\n***\n</details>\n\n<details>\n<summary>9.2 - Renaming Match output terminal</summary><br/>\n\n**Narration**\n\nInitially, they need to rename the existing Match output terminal to mapping. And connect this terminal with the Mapping node.\n\n<hr/><br/>\n\n**Action** &nbsp; 9.2.1\n\nRight click on **Route** node (1), and select **Rename Output Terminal** (2).\n\n  ![](images/rename-terminal-1.png)\n\n<hr/><br/>\n\n\n**Action** &nbsp; 9.2.2\n\nOn Select output terminal to rename select **Match** (1). In the *Enter new name for the selected output terminal*, enter **mapping** (2). Then click **OK** (3).\n\n  ![](images/rename-terminal-2.png)\n\n<hr/><br/>\n\n\n**Action** &nbsp; 9.2.3\n\nWire the **mapping** output terminal from **Route** node to the **in** terminal of the **Mapping node**.\n\n  ![](images/rename-terminal-3.png)\n\n\n***\n</details>\n\n<details>\n<summary>9.3 - Creating new output terminal</summary><br/>\n\n**Narration**\n\nSecond, they need to create more two output terminals to compute and java transformation. And connect these terminals to Compute and JavaCompute nodes.\n\n<hr/><br/>\n\n**Action** &nbsp; 9.3.1\n\nRight click on **Route** node (1), and select **Add Output Terminal** (2).\n\n  ![](images/new-terminal-1.png)\n\n<hr/><br/>\n\n\n**Action** &nbsp; 9.3.2\n\nEnter **compute** as the name of the new output terminal (1) and click **OK** (2).\n\n  ![](images/new-terminal-2.png)\n\n<hr/><br/>\n\n\n**Action** &nbsp; 9.3.3\n\nRepeat the same steps to create the java terminal: Right click on **Route** node (1), and select **Add Output Terminal** (2).\n\n  ![](images/new-terminal-3.png)\n\n<hr/><br/>\n\n\n**Action** &nbsp; 9.3.4\n\nEnter **java** as the name of the new output terminal (1) and click **OK** (2).\n\n  ![](images/new-terminal-4.png)\n\n<hr/><br/>\n\n\n**Action** &nbsp; 9.3.5\n\nWire the **compute** output terminal from **Route** node to the **in** terminal of the **Compute** node.\n\n*Note: if you click the output terminals from Route, you will see a dialog to select the terminal that you want to wire.*\n\n  ![](images/new-terminal-5.png)\n\n<hr/><br/>\n\n\n**Action** &nbsp; 9.3.6\n\nRepeat the same steps to wire the **java** output terminal from **Route** node to the **in** terminal of the **Java Compute** node.\n\n*Note: if you click the output terminals from Route, you will see a dialog to select the terminal that you want to wire.*\n\n  ![](images/new-terminal-6.png)\n\n***\n</details>\n\n<details>\n<summary>9.4 - Adding filter patterns</summary><br/>\n\n**Narration**\n\nGreat! Now, they are ready to define the filter table. The Route node uses XPath expressions to control processing.\n\nFocus developers define the three XPath expressions, one for each transformation node.  The filter table map the XPath with the specific output terminal. The XPath is checking the department parameter value for each department.\n\n<hr/><br/>\n\n**Action** &nbsp; 9.4.1\n\nClick on the **Route** node.\n\n  ![](images/filter-patterns-1.png)\n\n<hr/><br/>\n\n\n**Action** &nbsp; 9.4.2\n\nOn the Filter table, click **Add** button.\n\n  ![](images/filter-patterns-2.png)\n\n<hr/><br/>\n\n\n**Action** &nbsp; 9.4.3\n\nEnter **$LocalEnvironment/REST/Input/Parameters/department=\"Candies\"** in the *Filter pattern* field (1) and select **mapping** as the *Routing output terminal* (2). Then click **OK**.\n\n*Note: During the copy and paste you should have some issues with “ “,  because of it, we recommend to type the “ “ again in the Filter pattern field.*\n\n  ![](images/filter-patterns-3.png)\n\n<hr/><br/>\n\n\n**Action** &nbsp; 9.4.4\n\nClick **Add** button again.\n\n  ![](images/filter-patterns-4.png)\n\n<hr/><br/>\n\n\n**Action** &nbsp; 9.4.5\n\nEnter **$LocalEnvironment/REST/Input/Parameters/department=\"Snacks”** in the *Filter pattern* field (1) and select **mapping** as the *Routing output terminal* (2). Then click **OK**.\n\n*Note: During the copy and paste you should have some issues with “ “,  because of it, we recommend to type the “ “ again in the Filter pattern field.*\n\n  ![](images/filter-patterns-5.png)\n\n<hr/><br/>\n\n\n**Action** &nbsp; 9.4.6\n\nClick Add button again.\n\n  ![](images/filter-patterns-5.png)\n\n<hr/><br/>\n\n\n**Action** &nbsp; 9.4.7\n\nEnter **$LocalEnvironment/REST/Input/Parameters/department=\"Bakery”** in the *Filter pattern* field (1) and select **mapping** as the *Routing output terminal* (2). Then click **OK**.\n\n*Note: During the copy and paste you should have some issues with “ “,  because of it, we recommend to type the “ “ again in the Filter pattern field.*\n\n  ![](images/filter-patterns-7.png)\n\n***\n</details>\n\n<details>\n<summary>9.5 - Connecting nodes</summary><br/>\n\n**Narration**\n\nFinally, the Focus team connects all the nodes to finalize the flow.\n\n<hr/><br/>\n\n**Action** &nbsp; 9.5.1\n\nWire the out terminal of **Mapping** (1), **Compute** (2) and **Java Compute** (3) nodes to the in terminal of the **Output** node (4).\n\n  ![](images/route-connect-1.png)\n\n<hr/><br/>\n\n\n**Action** &nbsp; 9.5.2\n\nWire the **default** (1) and **failure** (2) terminal of **Route** node to the in terminal of the **Output** node (3).\n\n  ![](images/route-connect-2.png)\n\n<hr/><br/>\n\n\n**Action** &nbsp; 9.5.3\n\nClick **File > Save All**.\n\n  ![](images/route-connect-3.png)\n\n\n\n***\n</details>\n\n<details>\n<summary>9.6- Test Route node</summary><br/>\n\n**Narration**\n\nAt this stage, the Focus Integration experts are ready to test the new API using the route node. They just need to redeploy the API and use the Web User Interface again to test it.\n\nNow, they will test using all three departments: Candies, Bakery and Snacks.\n\nGreat, the subflow was invoked and  the message is routed through all different transformation nodes based on the department parameter.\n\n<hr/><br/>\n\n\n**Action** &nbsp; 9.6.1\n\nRe-deploy the REST API, by dragging and dropping the **ShoppingListAPI** (1) again from the Application Development view on to the **TEST_SERVER** Integration Server (2).\n\n  ![](images/test-route-1.png)\n\n<hr/><br/>\n\n\n**Action** &nbsp; 9.6.2\n\nOn the Progress Information dialog, click **Close**.\n\n  ![](images/test-route-2.png)\n\n<hr/><br/>\n\n\n**Action** &nbsp; 9.6.3\n\nOn your browser, **refresh** the **Web User Interface** page.\n\n  ![](images/test-route-3.png)\n\n<hr/><br/>\n\n\n**Action** &nbsp; 9.6.4\n\nOpen again the **ShoppingListAPI** (1), **GET /shoppinglist/{department}** (2), **Try it** tab (3).\n\n  ![](images/test-route-4.png)\n\n<hr/><br/>\n\n\n**Action** &nbsp; 9.6.5\n\nEnter **Candies** (or Bakery, or Snacks) as **department** name (1). Click **Send** (2).\n\n*Note: You are welcome to try any of the three departments.*\n\n  ![](images/test-route-5.png)\n\n<hr/><br/>\n\n\n**Action** &nbsp; 9.6.6\n\nShow the **Response** body and show that each department is processed by different Transformation node (show the description field).\n\n  ![](images/test-route-6.png)\n\n***\n</details>\n\n<br/><br/>\n\n### **10 - Test on App Connect Enterprise**\n<details>\n<summary>10.1 - Exporting BAR File</summary><br/>\n\n**Narration**\n\nAt this stage, Focus team is ready to deploy their Integration flow in a App Connect Server. They just need to generate a BAR (broker archive) file. The App Connect Enterprise server uses BAR files to save compiled message flows, libraries, and other elements critical to the Integration flow.\n\n<hr/><br/>\n\n**Action** &nbsp; 10.1.1\n\nRight click the **ShoppingListAPI** (1) and choose **New > BAR file** (2).\n\n  ![](images/bar-file-1.png)\n\n<hr/><br/>\n\n**Action** &nbsp; 10.1.2\n\nOn the Window New Bar file, type **shoppinglist** as the bar file name (1) and click **Finish** (2).\n\n  ![](images/bar-file-2.png)\n\n<hr/><br/>\n\n**Action** &nbsp; 10.1.3\n\nOn the *Prepare screen*, mark the **REST APIs** checkbox (1). Check **Compile and in-line resources** (2). Click **Build and Save** (3).\n\n  ![](images/bar-file-3.png)\n\n<hr/><br/>\n\n**Action** &nbsp; 10.1.4\n\nNow, a popup window displays *Operation completed successfully*. Click **OK**.\n\n  ![](images/bar-file-4.png)\n\n***\n</details>\n\n<details>\n<summary>10.2 - Accessing App Connect Enterprise environment</summary><br/>\n\n**Narration**\n\nIBM App Connect is an industry-leading integration solution that connects any of your applications and data, no matter where they reside. With hundreds of prebuilt connectors and customizable templates, App Connect helps users of all skill levels rapidly connect Software as a Service (SaaS) applications and build integration flows.\n\nFor this demo, Focus Corp is using a trial account of IBM App Connect Enterprise as a Service on AWS.\n\n<hr/><br/>\n\n**Action** &nbsp; 10.2.1\n\nIn your email inbox (that you used to create the App Connect trial account), search for **IBM SaaS** (1), open the ”**Your IBM App Connect trial is ready**” email (2).\n\n  ![](images/ace-access-1.png)\n\n<hr/><br/>\n\n\n**Action** &nbsp; 10.2.2\n\nNow, click the **Access trial** button.\n\n  ![](images/ace-access-2.png)\n\n<hr/><br/>\n\n\n**Action** &nbsp; 10.2.3\n\n**Log in** with your App Connect *username* and *password*.\n\n  ![](images/ace-access-3.png)\n\n<hr/><br/>\n\n\n**Action** &nbsp; 10.2.4\n\nUse the Instance switcher to change to the **Dashboard** instance.\n\n  ![](images/ace-access-4.png)\n\n***\n</details>\n\n<details>\n<summary>10.3 - Creating Integration server</summary><br/>\n\n**Narration**\n\nFocus Integration Experts begin in the IBM App Connect Dashboard. Here they can administer integration servers and integration runtimes, which are deployed from the BAR files mentioned earlier. They want to deploy the Integration flow defined in the previous steps.\n\nBecause they need to deploy a simple integration, let’s select with the Quick start integration type.\n\nNow they need to provide the BAR file. The BAR file contains all the resources that are needed to deploy an integration. The BAR file parameters will expose both the integration and its operations.\n\nThey can use the Configuration component to apply any customizations to the integration server when they deploy it. For their scenario, they don’t need to use the configuration package.\n\nNow, they need to define a name for their Integration server, for example shoppinglist.\n\nThat is it! After few minutes their server should be ready with their integration flow.\n\n<hr/><br/>\n\n**Action** &nbsp; 10.3.1\n\nClick **Deploy integrations**.\n\n  ![](images/inter-server-1.png)\n\n<hr/><br/>\n\n**Action** &nbsp; 10.3.2\n\nSelect **Quick start integration** option (1) and click **Next** (2).\n\n  ![](images/inter-server-2.png)\n\n<hr/><br/>\n\n**Action** &nbsp; 10.3.3\n\nClick to upload your BAR File. And select the **shoppinglist.bar** (1) file (it is in your workspace folder in a Bar Files directory). And click **Next** (B).\n\n  ![](images/inter-server-3.png)\n\n<hr/><br/>\n\n**Action** &nbsp; 10.3.4\n\nYou don’t need any Integration configuration, click **Next**.\n\n  ![](images/inter-server-4.png)\n\n<hr/><br/>\n\n**Action** &nbsp; 10.3.5\n\nEnter the Integration Server name as **shoppinglist** (1). Disable the option to **Force Flow Basic Auth** (2). Then click **Create** (3).\n\n  ![](images/inter-server-5.png)\n\n<hr/><br/>\n\n**Action** &nbsp; 10.3.6\n\nThe deployment process takes up to 5 minutes, **refresh** the browser to see the BAR file deployed and started.\n\n  ![](images/inter-server-6.png)\n\n***\n</details>\n\n<details>\n<summary>10.4 - Testing the API</summary><br/>\n\n**Narration**\n\nTo finalize, the Focus Integration experts would like to test the new API in the App Connect Enterprise environment. They just need to open the Integration server and the API.\n\nNow, using the Try it capability, they will test using all three departments: Candies, Bakery and Snacks.\n\nGreat, the subflow was invoked and  the message is routed through all different transformation nodes based on the department parameter.\n\n<hr/><br/>\n\n**Action** &nbsp; 10.4.1\n\nClick the **shoppinglist** server icon.\n\n  ![](images/final-test-1.png)\n\n<hr/><br/>\n\n**Action** &nbsp; 10.4.2\n\nClick the **ShoppingListAPI** icon.\n\n  ![](images/final-test-2.png)\n\n<hr/><br/>\n\n**Action** &nbsp; 10.4.3\n\nIgnore the Open API Validation errors. Click on **GET /shoppinglist/{department}**,\n\n  ![](images/final-test-3.png)\n\n<hr/><br/>\n\n**Action** &nbsp; 10.4.4\n\nOpen the **Try it** tab.\n\n  ![](images/final-test-4.png)\n\n<hr/><br/>\n\n**Action** &nbsp; 10.4.5\n\nEnter **Candies** (or **Bakery**, or **Snacks**) as *department* name (1). Click **Send** (2).\n\n*Note: You are welcome to try any of the three departments.*\n\n  ![](images/final-test-5.png)\n\n<hr/><br/>\n\n**Action** &nbsp; 10.4.6\n\nShow the **Response** body and show that each department is processed by different Transformation node (show the description field).\n\n  ![](images/final-test-6.png)\n\n***\n</details>\n\n\n<br/><br/>\n\n### **Summary**\n\n<br/>\nLet’s summarize what Focus developers have done today. In this demo they: <br/>\n<ul>\n<li>Created Rest API using the App Connect Toolkit</li>\n<li>Created new API operation using the OpenAPI editor</li>\n<li>Implemented mapping transformation using the Mapping node</li>\n<li>Implemented compute transformation using ESQL query language and compute node</li>\n<li>Implemented java transformation using Java code and JavaCompute node</li>\n<li>Implemented messaging routing using Route node</li>\n<li>Deployed and tested the Integration flow on IBM App Connect Enterprise as a Service on AWS</li>\n</ul><br/>\nIn this demo, Focus Integration experts learned how to build complex, multi-style integrations with support for multiple programming languages and fully integrated with source and pipeline management tools using the IBM App Connect toolkit.\n<br/><br/>\nThank you for attending today’s presentation.\n<br/>\n","type":"Mdx","contentDigest":"8eaf97b27f23428a840a92db4d0110f6","owner":"gatsby-plugin-mdx","counter":6267},"frontmatter":{"title":"ACE Toolkit Demo","description":"ACE Toolkit Demo for TechSales","tabs":["Demo preparation","Demo script"]},"exports":{},"rawBody":"---\ntitle: ACE Toolkit Demo\ndescription: ACE Toolkit Demo for TechSales\ntabs: [ 'Demo preparation', 'Demo script']\n---\n\n\n<FeatureCard\n  title=\"Create integrations with App Connect for Developers Toolkit - Demo Script\"\n  color=\"dark\"\n  >\n\n![banner](./images/banner-ace-toolkit.jpg)\n\n</FeatureCard>\n\n\n<span id=\"place1\"></span>\n\n### **Introduction**\n<br/>\nToday's organizations use a wide variety of diverse Software as a Service (SaaS) applications, often without centralized coordination between them. However, integrating applications  is essential to help organizations increase efficiency and optimize business workflows. For instance, in a typical sales process without application integration, sales reps may use Salesforce for customer relationships and Excel for quotes. After finalizing a sale, they have to manually transfer data such as customer details, product information, and pricing data from Salesforce to Excel. This can be time-consuming and prone to errors, leading to delays in processing sales orders and potential inaccuracies in pricing.\n<br/><br/>\nBy connecting your apps using IBM App Connect, the process becomes more streamlined, accurate and efficient because reps can automate data input to create quotes directly from their CPQ application with centralized tracking.\n<br/><br/>\nIBM App Connect can help you securely connect all your endpoints, from databases to packaged apps. It provides  an out-of-the-box set of capabilities that will accelerate  SaaS integration and automation across your business. Additionally, the development kit allows citizen integrators to understand and build powerful integrations with little to no training.\n<br/><br/>\nFocus Corporation, a hypothetical retail company engaged with IBM, is highly motivated to derive more revenue from first-time customers to their online storefronts. Focus has acquired another business and needs to integrate the different IT applications.\n<br/><br/>\nFocus Integration expert would like to build complex, multi-style integrations with support for multiple programming languages and fully integrated with source and pipeline management tools like GIT, Maven, Jenkins, etc. \n<br/><br/>\nFocus’ team requested a demo to learn how IBM App Connect for Developers Toolkit can help them to implement complex and advanced integration scenarios.\n<br/><br/>\n\n(Demo Slides <a href=\"https://github.com/ibm-integration/learninghub/blob/main/src/pages/demos/apic-tech-graphql/files/APICGraphQLSlides.pptx\" target=\"_blank\" rel=\"noreferrer\">here</a>)\n<br/>\n\n\n### **1 - Create your Integration flow**\n\n<details>\n<summary>1.1 - Starting App Connect Toolkit</summary><br/>\n\n**Narration**\n\nIBM App Connect is an industry-leading integration solution that connects any of your applications and data, no matter where they reside. With hundreds of prebuilt connectors and customizable templates, App Connect helps users of all skill levels rapidly connect Software as a Service (SaaS) applications and build integration flows.\n\nFocus team is looking for an advanced, fully customizable code platform. They would like to harness a lightweight, fast-performing engine that easily scales to support their growing needs. They need to enable support for multiple types of data integration, including event, application programming interfaces (APIs), services, sync/async, transactional batch processing and more. Focus Integration experts needs to map data fields and transform data formats exchanged between applications, such as XML, JSON, CSV, EDIFACT, SWIFT and other industry protocols.\n\nBecause of that, they decided to explore IBM App Connect Enterprise for Developers (Toolkit). The Toolkit is an integrated development environment and graphical user interface based on the Eclipse platform. Focus Integration experts can use the IBM App Connect Enterprise Toolkit to build powerful integration applications, services, and APIs. And they can then deploy their integration solutions to the software run time, IBM App Connect Enterprise as a Service, containers, or a combination of those environments.\n\n<hr/><br/>\n\n**Action** &nbsp; 1.1.1\n\nOpen your **App Connect Enterprise Toolkit** by clicking the icon on the Launchpad (MAC OS) or Desktop (Windows) or executing **ace toolkit** in terminal window.\n\n  ![](images/start-toolkit-1.png)\n\n<hr/><br/>\n\n\n**Action** &nbsp; 1.1.2\n\nIn the Workspace Launcher window, accept the default one. Click **Launch**.\n\n  ![](images/start-toolkit-2.png)\n\n<hr/><br/>\n\n\n**Action** &nbsp; 1.1.3\n\n**Close** the *welcome page*.\n\n  ![](images/start-toolkit-3.png)\n\n***\n</details>\n\n\n<details>\n<summary>1.2 - Creating a REST API</summary><br/>\n\n**Narration**\n\nFrom the Integration Development perspective, Focus Integration experts can create all manner of integration flows, as well as manage connectivity between services and endpoints.\n\nFocus team would like to explore how easy is to create an API flow that implement different type of message transformation.\n\nApp Connect provides a specific type of project to support REST API implementations, which can either be based upon a Swagger (v2) specification document or an OpenAPI (v3) specification document. REST APIs can be authored and deployed from the IBM App Connect Enterprise Toolkit.\n\nLet's see how easy is to create an REST API using the Toolkit. Focus team will create a REST API from an existing OpenAPI 3 document.\n\n<hr/><br/>\n\n**Action** &nbsp; 1.2.1\n\nFrom the Application Development view click the **New...** hyperlink at the top right and from the menu which appears, click on **REST API**.\n\n  ![](images/create-rest-1.png)\n\n<hr/><br/>\n\n\n**Action** &nbsp; 1.2.2\n\nType the Name **ShoppingListAPI** (1), and switch the radio button to the option labelled “**Import resources and operations defined in a REST API document**\" (2) then click **Next** (3).\n\n  ![](images/create-rest-2.png)\n\n<hr/><br/>\n\n\n**Action** &nbsp; 1.2.3\n\nYou will be asked to import an OpenAPI 3 document either from the file system or your workspace. Using the radio button to “**Select from your workspace**” (1), select **ShoppingListAPI.json** from the json folder in the **HelperFiles** project (2) (note: if you don't see the HelperFiles project, maybe you forgot to import this project in the Demo Preparation part). Click **Next** (3).\n\n  ![](images/create-rest-3.png)\n\n<hr/><br/>\n\n\n**Action** &nbsp; 1.2.4\n\nClick **Finish**.\n\n  ![](images/create-rest-4.png)\n\n\n***\n</details>\n\n\n<details>\n<summary>1.3 - Exploring the REST API details</summary><br/>\n\n**Narration**\n\nFocus team created the REST API and they can see a summary page displaying details about the API such as its title and base URL. The next section down entitled Resources and Operations lists the operations in bright colors.\n\nFocus developers can easily edit the API Document using the OpenAPI editor interface.\n\n<hr/><br/>\n\n**Action** &nbsp; 1.3.1\n\nShow the **API Details** (1) and **Resources and Operations** (2) sections.\n\n  ![](images/api-doc-1.png)\n\n<hr/><br/>\n\n\n**Action** &nbsp; 1.3.2\n\nClick on **Edit API Document in OpenAPI editor**.\n\n  ![](images/api-doc-2.png)\n\n<hr/><br/>\n\n\n**Action** &nbsp; 1.3.3\n\nIf necessary accept the incoming network connections.\n\n  ![](images/api-doc-3.png)\n\n<hr/><br/>\n\n\n**Action** &nbsp; 1.3.4\n\nShow the *OpenAPI Editor*.\n\n  ![](images/api-doc-4.png)\n\n\n***\n</details>\n\n<br/><br/>\n\n### **2 - Add a new operation**\n\n<details>\n<summary>2.1 - Adding a new path</summary><br/>\n\n**Narration**\n\nThe Integration experts decided to create a new API operation to list the products of a specific department.\n\n<hr/><br/>\n\n\n**Action** &nbsp; 2.1.1\n\nOn the **Path** section (1), on left menu, click on the **Plus** button (2).\n\n  ![](images/new-path-1.png)\n\n<hr/><br/>\n\n\n**Action** &nbsp; 2.1.2\n\nEnter **/shoppinglist/{department}** as the new *Path* (1). You are welcome to enter a *summary* (2) and *description* (3). Then click **Add** (4).\n\n  ![](images/new-path-2.png)\n\n\n***\n</details>\n\n<details>\n<summary>2.2 - Adding a new operation</summary><br/>\n\n**Narration**\n\nThey go ahead and create a new path with the GET operation in the ShoppingListAPI.\n\n<hr/><br/>\n\n\n**Action** &nbsp; 2.2.1\n\nOn the **Operations** section (1) of the new path, click on the **Plus** button (2).\n\n  ![](images/new-oper-1.png)\n\n<hr/><br/>\n\n\n**Action** &nbsp; 2.2.2\n\nSelect the **get** verb (1) and click **Add**.\n\n  ![](images/new-oper-2.png)\n\n\n***\n</details>\n\n<details>\n<summary>2.3 - Defining parameter</summary><br/>\n\n**Narration**\n\nThis new path will receive the product department as parameter in the path request.\n\n<hr/><br/>\n\n\n**Action** &nbsp; 2.3.1\n\nScroll down to see the *Parameter* section (1) and click **Add** button (2).\n\n  ![](images/def-param-1.png)\n\n<hr/><br/>\n\n\n**Action** &nbsp; 2.3.2\n\nEnter **department** as parameter name (1) and select **path** in *Located In* field (2).\n\n  ![](images/def-param-2.png)\n\n<hr/><br/>\n\n\n**Action** &nbsp; 2.3.3\n\nScroll down to see the checkbox list and select **Required** field (1). Then click **Add** (2).\n\n  ![](images/def-param-3.png)\n\n***\n</details>\n\n\n<details>\n<summary>2.4 - Defining schema</summary><br/>\n\n**Narration**\n\nFocus developers define the schema of the parameter as a simple string.\n\nGreat, Focus’ developers successfully created a new operation in the ShoppingListAPI!\n\n<hr/><br/>\n\n\n**Action** &nbsp; 2.4.1\n\nScroll down to see the *Schema* section and type **department** as schema title (1), and select **string** as *schema type* (2).\n\n  ![](images/def-schema-1.png)\n\n<hr/><br/>\n\n\n**Action** &nbsp; 2.4.2\n\nScroll up and click **Save**.\n\n  ![](images/def-schema-2.png)\n\n<hr/><br/>\n\n\n**Action** &nbsp; 2.4.3\n\n**Close** the OpenAPI editor.\n\n  ![](images/def-schema-3.png)\n\n***\n</details>\n\n\n<br/><br/>\n\n### **3 - Create Subflow**\n<details>\n<summary>3.1 - Creating GetDepartment Subflow</summary><br/>\n\n**Narration**\n\nWith IBM App Connect is really simple to implement the logic of your API operation. Focus team can easily create a subflow to do it!\n\n<hr/><br/>\n\n\n**Action** &nbsp; 3.1.1\n\nBack to the ShoppingListAPI description, open the **/shoppinglist/{department|** section.\n\n  ![](images/create-subflow-1.png)\n\n<hr/><br/>\n\n\n**Action** &nbsp; 3.1.2\n\nClick **Create subflow**.\n\n  ![](images/create-subflow-2.png)\n\n***\n</details>\n\n\n<details>\n<summary>3.2 - Connecting nodes</summary><br/>\n\n**Narration**\n\nHere Focus team has their subflow. A message flow is a sequence of processing steps that run in the integration node when an input message is received. You define a message flow by including a number of message flow nodes, each of which represents a set of actions that define a processing step.\n\nIn the flow editor, they can edit and change their flow. Message flows are created in the Toolkit using a drag and drop editor.\n\nThe flow is quite simple, consisting of only an Input and Output node. However, the Integration experts would like to explore how to do some message transformations. Let's see how simple is to do it!\n\n<hr/><br/>\n\n**Action** &nbsp; 3.2.1\n\nIn the subflow, wire the **Input** node to the **Output** node.\n\n  ![](images/connect-nodes-1.png)\n\n\n***\n</details>\n\n<br/><br/>\n\n\n### **4 - Using the Mapping Assist feature**\n<details>\n<summary>4.1 - Add Mapping Transformation</summary><br/>\n\n**Narration**\n\nFirst, they decided to explore the Mapping transformation.\n\n<hr/><br/>\n\n\n**Action** &nbsp; 4.1.1\n\nOpen the **Transformation** section.\n\n  ![](images/add-mapping-1.png)\n\n<hr/><br/>\n\n\n**Action** &nbsp; 4.1.2\n\nDrag and drop a **Mapping** node on to the wire and its terminals will be connected up for you (the out terminal of the Input node will be wired to the in terminal of the Mapping node, and the out terminal of the Mapping node will be wired to the in terminal of the Output node).\n\n  ![](images/add-mapping-2.png)\n\n***\n</details>\n\n\n<details>\n<summary>4.2 - Editing Mapping</summary><br/>\n\n**Narration**\n\nWith a mapping, they can use the Graphical Data Mapping editor to take input (source) objects and transform them before they save the resulting output (target) objects.\n\n<hr/><br/>\n\n\n**Action** &nbsp; 4.2.1\n\nDouble-click the **Mapping** node.\n\n  ![](images/edit-mapping-1.png)\n\n<hr/><br/>\n\n\n**Action** &nbsp; 4.2.2\n\nLeave the default settings and click **Finish**.\n\n  ![](images/edit-mapping-2.png)\n\n\n***\n</details>\n\n<details>\n<summary>4.3 - Adding new output</summary><br/>\n\n**Narration**\n\nInitially, they will change the output object to use the Item JSON type.\n\n<hr/><br/>\n\n\n**Action** &nbsp; 4.3.1\n\nClick on “**Add an output object**” button.\n\n  ![](images/new-output-1.png)\n\n<hr/><br/>\n\n\n**Action** &nbsp; 4.3.2\n\nOn the “Select a map output” option, open (double click) the **ShoppingListAPI** (1), open the **JSON Types** (2) and select **Item - Rest API model** (3), then click **OK** (4).\n\n  ![](images/new-output-2.png)\n\n\n<hr/><br/>\n\n\n**Action** &nbsp; 4.3.3\n\nSelect the **original Message Assembly** (1), right click and select **delete** (2) (or press delete on your keyboard).\n\n  ![](images/new-output-3.png)\n\n\n***\n</details>\n\n<details>\n<summary>4.4 - Move Department value</summary><br/>\n\n**Narration**\n\nThe input objects are shown on the left side of the canvas, and the output objects are shown on the right side. You can create connections between the input and output elements by clicking one element, and dragging the mouse to the element that you want to connect to.\n\nFocus team  easily link the Department input parameter to Department parameter of Item JSON Type.\n\n<hr/><br/>\n\n\n**Action** &nbsp; 4.4.1\n\nExpand the **JSON** message assembly on the right (1), then expand the **Data** section underneath (2). Notice that department is listed as a *parameter* (3).\n\n  ![](images/move-dept-1.png)\n\n<hr/><br/>\n\n\n**Action** &nbsp; 4.4.2\n\nOn the left Message Assembly, open the **LocalEnvironment > REST > Input > Parameters**.\n\n  ![](images/move-dept-2.png)\n\n\n<hr/><br/>\n\n\n**Action** &nbsp; 4.4.3\n\nRight-click the **department** entry (1) and select **Quick Link to Output** (2).\n\n  ![](images/move-dept-3.png)\n\n<hr/><br/>\n\n\n**Action** &nbsp; 4.4.4\n\nIn the dialog, scroll down and expand **Data : Item [1..1]** (1) and select **department:string [1..1]** (2).\n\n  ![](images/move-dept-4.png)\n\n\n***\n</details>\n\n<details>\n<summary>4.5 - Setting Cardinality</summary><br/>\n\n**Narration**\n\nThey use the Quick Fix capability to solve the cardinality issue of the new mapping.\n\n<hr/><br/>\n\n\n**Action** &nbsp; 4.5.1\n\nHover the mouse over the **Quick Fix** (light bulb) icon of the new Move box (!) and click the \"**Set cardinality to first index**” link (2).\n\n  ![](images/quick-fix-1.png)\n\n\n***\n</details>\n\n<details>\n<summary>4.6 - Assigning values</summary><br/>\n\n**Narration**\n\nNow, for demo purpose, they will use the assign function to define a hard coded value to name and description fields.  In this demo, they decided to use the description field just to inform the type of transformation node that is processing the transformation, in this case the Mapping node.\n\nGreat, Focus’ developers successfully created a mapping transformation in the ShoppingListAPI!\n\n<hr/><br/>\n\n\n**Action** &nbsp; 4.6.1\n\nOn the new Message Assembly JSON, drag and drop the **name** field to the left (1).  IBM App Connect Enterprise places an **Assign** action for this field (2). \n\n  ![](images/assign-values-1.png)\n\n<hr/><br/>\n\n\n**Action** &nbsp; 4.6.2\n\nUnder the **Properties** for the Assign action, enter “**Caramel Candy Bars**” for the name value.\n\n  ![](images/assign-values-2.png)\n\n\n<hr/><br/>\n\n\n**Action** &nbsp; 4.6.3\n\nRepeat the same steps for the description field: drag and drop the **description** field to the left (1).  IBM App Connect Enterprise places an **Assign** action for this field (2). \n\n  ![](images/assign-values-3.png)\n\n<hr/><br/>\n\n\n**Action** &nbsp; 4.6.4\n\nUnder the **Properties** for the Assign action, enter “**Request has been processed by Mapping Node**” for the name value.\n\n*Note: In this demo, we are using the description field just to inform the node that is processing the transformation.*\n\n  ![](images/assign-values-4.png)\n\n\n<hr/><br/>\n\n\n**Action** &nbsp; 4.6.5\n\nClick **File > Save all**.\n\n  ![](images/assign-values-5.png)\n\n***\n</details>\n\n\n<br/><br/>\n\n### **5 - Create local test server**\n<details>\n<summary>5.1 - Creating a local integration server</summary><br/>\n\n**Narration**\n\nAt this stage, they are ready to test the API. To publish the API, first they need to create a local integration server.\n\n<hr/><br/>\n\n\n**Action** &nbsp; 5.1.1\n\nRight-click **Integration Servers** in the **Integration Explorer** tab (1) and select **Create a local Integration Server** (2).\n\n  ![](images/local-server-1.png)\n\n<hr/><br/>\n\n\n**Action** &nbsp; 5.1.2\n\nKeep the default values and click **Finish**.\n\n  ![](images/local-server-2.png)\n\n<hr/><br/>\n\n\n\n**Action** &nbsp; 5.1.3\n\nOn the *Success* Dialog click **OK**.\n\n  ![](images/local-server-3.png)\n\n<br/>\n\n***\n</details>\n\n<details>\n<summary>5.2 - Adding CORS authorization</summary><br/>\n\n**Narration**\n\nNext, they need to configure the server so that the HTTP listener is enabled for CORS. \n\n<hr/><br/>\n\n\n**Action** &nbsp; 5.2.1\n\nExpand the **TEST_SERVER** directory under the **Independent Resources** folder and double-click the **server.conf.yaml** file to open it in the IBM App Connect Enterprise text editor to the right.\n\n  ![](images/cors-auth-1.png)\n\n<hr/><br/>\n\n\n**Action** &nbsp; 5.2.2\n\nScroll down to the **HTTPConnector** section and paste the code below:\n```\nCORSEnabled: true\nCORSAllowOrigins: '*'\nCORSAllowMethods: 'GET,HEAD,POST,PUT,PATCH,DELETE,OPTIONS'\nCORSAllowHeaders: 'Accept,Accept-Language,Content-Language,Content-Type'\n```\n\n  ![](images/cors-auth-2.png)\n\n<hr/><br/>\n\n\n\n**Action** &nbsp; 5.2.3\n\n**Save** the changes to the **server.conf.yaml** file or click **File > Save all**.\n\n  ![](images/cors-auth-3.png)\n\n<hr/><br/>\n\n\n\n**Action** &nbsp; 5.2.4\n\nRight-click the **TEST_SERVER** (1) and select **Restart** (2).\n\n  ![](images/cors-auth-4.png)\n\n<hr/><br/>\n\n\n\n**Action** &nbsp; 5.2.5\n\nClick **OK** on the Success dialog again.\n\n  ![](images/cors-auth-5.png)\n\n<br/>\n\n***\n</details>\n\n<br/><br/>\n\n### **6 - Test the API**\n<details>\n<summary>6.1 - Deploying the API</summary><br/>\n\n**Narration**\n\nNow, they need to deploy the ShoppingListAPI to the new Local Integration server. They can do it, by dragging and dropping the API to the new server.\n\n<hr/><br/>\n\n\n**Action** &nbsp; 6.1.1\n\nDeploy the REST API which we created earlier named **ShoppingListAPI** (1), by dragging and dropping it from the Application Development view on to the **TEST_SERVER** Integration Server (2).\n\n  ![](images/deploy-api-1.png)\n\n<hr/><br/>\n\n\n**Action** &nbsp; 6.1.2\n\nOn the *Progress Information* dialog, click **Close**.\n\n  ![](images/deploy-api-2.png)\n\n\n***\n</details>\n\n\n<details>\n<summary>6.2 - Starting Web User Interface</summary><br/>\n\n**Narration**\n\nAt this moment, the Focus Integration experts are ready to test the API. They start the Web User Interface.\n\n<hr/><br/>\n\n**Action** &nbsp; 6.2.1\n\nRight-click **TEST_SERVER** (1) and select **Start Web User Interface** (2). \n\n  ![](images/start-wui-1.png)\n\n***\n</details>\n\n\n<details>\n<summary>6.3 - Testing the ShoppingList API</summary><br/>\n\n**Narration**\n\nAnd select the ShoppingListAPI and the new Get Department operation. Not they can use the Try it capability, and enter any product department, for example “Candies”.\n\nGreat, the subflow was invoked and our mapping transformation created a response with our hard coded values. Focus team verified how is really simple to implement a mapping transformation using IBM App Connect.\n\n<hr/><br/>\n\n**Action** &nbsp; 6.3.1\n\nClick the **ShoppingListAPI** tile in the web user interface. \n\n  ![](images/test-api-1.png)\n\n<hr/><br/>\n\n\n**Action** &nbsp; 6.3.2\n\nSelect the **GET /shoppinglist/{department}** operation on the left. \n\n  ![](images/test-api-2.png)\n\n<hr/><br/>\n\n\n**Action** &nbsp; 6.3.3\n\nClick the **Try it** tab.\n\n  ![](images/test-api-3.png)\n\n\n<hr/><br/>\n\n\n**Action** &nbsp; 6.3.4\n\nEnter any **department** name (by now, we are not checking the department) such as **Candies** (1). Click **Send** (2).\n\n  ![](images/test-api-4.png)\n\n<hr/><br/>\n\n\n**Action** &nbsp; 6.3.5\n\nShow the **Response body**.\n\n  ![](images/test-api-5.png)\n\n***\n</details>\n\n<br/><br/>\n\n\n### **7 - Add Compute transformation**\n<details>\n<summary>7.1 - Adding Compute node</summary><br/>\n\n**Narration**\n\nFocus developers heard about ESQL language. Extended Structured Query Language (ESQL) is a programming language based on Structured Query Language (SQL) that is typically used to work with databases. ESQL is extended to access and manipulate data in messages and databases.\n\nThey would like to see how to use ESQL to transform and enrich messages using the Compute node.  Because of it, they decided to explore the Compute node transformation.\n\n<hr/><br/>\n\n\n**Action** &nbsp; 7.1.1\n\nBack to the getDepartment subflow, open again the Transformation menu and drag and drop a **Compute** node.\n\n  ![](images/add-compute-1.png)\n\n<hr/><br/>\n\n**Action** &nbsp; 7.1.2\n\nReadjust the connections of Input and output node to connect to the Compute node (the out terminal of the Input node will be wired to the in terminal of the Compute node, and the out terminal of the Compute node will be wired to the in terminal of the Output node).\n\n  ![](images/add-compute-2.png)\n\n<hr/><br/>\n\n\n**Action** &nbsp; 7.1.3\n\nClick on the **Compute** node (1). On the Compute node's properties change the *Compute mode* to be “**LocalEnvironment and Message**” (2).\n\n  ![](images/add-compute-3.png)\n\n<hr/><br/>\n\n**Action** &nbsp; 7.1.4\n\n**Save** the subflow (you can safely ignore the red crosses on the Compute node - we will fix these up in the next step!).\n\n  ![](images/add-compute-4.png)\n\n***\n</details>\n\n<details>\n<summary>7.2 - Create Broker Schema</summary><br/>\n\n**Narration**\n\nTo simplify the demo, they decided to reuse a pre-created ESQL file.\n\nFirst, they need to create a Broker Schema to include the ESQL file. A broker schema is a symbol space that defines the scope of uniqueness of the names of resources defined within it.\n\n<hr/><br/>\n\n\n**Action** &nbsp; 7.2.1\n\nRight click the **ShoppingListAPI** (1) and choose **New > Broker Schema** (2).\n\n  ![](images/broker-schema-1.png)\n\n<hr/><br/>\n\n\n**Action** &nbsp; 7.2.2\n\nType **utils** as the Schema name (1) and click **Finish** (2).\n\n  ![](images/broker-schema-2.png)\n\n<hr/><br/>\n\n\n**Action** &nbsp; 7.2.3\n\nOn the *New Broker Schema* dialog, click **OK**.\n\n  ![](images/broker-schema-3.png)\n\n\n***\n</details>\n\n<details>\n<summary>7.3 - Copy ESQL file</summary><br/>\n\n**Narration**\n\nNext, Focus developers will copy the pre-created ESQL file to the broker schema folder.\n\n<hr/><br/>\n\n**Action** &nbsp; 7.3.1\n\nSwitch to the Resource perspective using the menu **Window > Perspective > Open Perspective > Other…**\n\n  ![](images/copy-esql-1.png)\n\n\n<hr/><br/>\n\n**Action** &nbsp; 7.3.2\n\nChoose **Resource** (1) and click **Open** (2).\n\n  ![](images/copy-esql-2.png)\n\n<hr/><br/>\n\n**Action** &nbsp; 7.3.3\n\nUsing the Project Explorer view in the top left corner, copy the file **Compute.esql** from the folder named **utils** in the project named *HelperFiles* (1) into the **utils** folder in the project **ShoppingListAPI** (2).\n\n  ![](images/copy-esql-3.png)\n\n<hr/><br/>\n\n**Action** &nbsp; 7.3.4\n\nSwitch back to the *Integration Development* perspective using the **Window > Perspective > Open Perspective > Integration Development** menu.\n\n  ![](images/copy-esql-4.png)\n\n\n***\n</details>\n\n<details>\n<summary>7.4 - Update the ESQL module</summary><br/>\n\n**Narration**\n\nNow, they just need to update the Compute node to use the new ESQL file. They will use a specific module of the ESQL file: the getDepartment.\n\n<hr/><br/>\n\n**Action** &nbsp; 7.4.1\n\nReturn to the *getDepartment* subflow and click on **Compute** node again.\n\n  ![](images/update-esql-1.png)\n\n\n<hr/><br/>\n\n**Action** &nbsp; 7.4.2\n\nOn the Compute node's properties, you need to update the *ESQL module* property. Click **Browse** button.\n\n  ![](images/update-esql-2.png)\n\n<hr/><br/>\n\n**Action** &nbsp; 7.4.3\n\nSelect **{utils}:getDepartment_Compute** (1) and click **OK** (2).\n\n  ![](images/update-esql-3.png)\n\n<hr/><br/>\n\n**Action** &nbsp; 7.4.4\n\n**Save** the subflow.\n\n  ![](images/update-esql-4.png)\n\n\n***\n</details>\n\n<details>\n<summary>7.5 - Review the ESQL</summary><br/>\n\n**Narration**\n\nLet's review the ESQL file. Focus developers can create and modify their ESQL code in the ESQL editor.\n\nThe ESQL code for each of your nodes is contained within a module in an ESQL file. Here they have a specific module for GetDepartment operation.  The module is really simple, just select the Item with Department value equals the Department parameter.\n\nAll three items are hardcoded created in the Initialise procedure. In a real scenario, this data should be retrieved from Products database or Product system.\n\n<hr/><br/>\n\n**Action** &nbsp; 7.5.1\n\nDouble click the **Compute** node, to see the ESQL file.\n\n  ![](images/review-esql-1.png)\n\n\n<hr/><br/>\n\n**Action** &nbsp; 7.5.2\n\nShow the **getDepartment_Compute Module**.\n\n  ![](images/review-esql-2.png)\n\n<hr/><br/>\n\n**Action** &nbsp; 7.5.3\n\nScroll down and show the **Initialise Procedure**.\n\n  ![](images/review-esql-3.png)\n\n<hr/><br/>\n\n**Action** &nbsp; 7.5.4\n\n**Close** the ESQL file.\n\n  ![](images/review-esql-4.png)\n\n\n***\n</details>\n\n<details>\n<summary>7.6 - Test compute node</summary><br/>\n\n**Narration**\n\nAt this moment, the Focus Integration experts are ready to test the new API. They just need to redeploy the API and use the Web User Interface again to test it.\n\nNow, they will test using the three available departments: Candies, Snacks and Bakery.\n\nGreat, the subflow was invoked and our compute transformation created a response with our hard coded values. Focus team verified how is really simple to use ESQL query language to implement message transformations.\n\n<hr/><br/>\n\n**Action** &nbsp; 7.6.1\n\nRe-deploy the REST API, by dragging and dropping the **ShoppingListAPI** (1) again from the Application Development view on to the **TEST_SERVER** Integration Server (2).\n\n  ![](images/test-compute-1.png)\n\n\n<hr/><br/>\n\n**Action** &nbsp; 7.6.2\n\nOn the Progress Information dialog, click **Close**.\n\n  ![](images/test-compute-2.png)\n\n<hr/><br/>\n\n**Action** &nbsp; 7.6.3\n\nOn your browser, refresh the **Web User Interface** page.\n\n  ![](images/test-compute-3.png)\n\n<hr/><br/>\n\n**Action** &nbsp; 7.6.4\n\nOpen again the **ShoppingListAPI** (1), **GET /shoppinglist/{department}** (2), **Try it** tab (3).\n\n  ![](images/test-compute-4.png)\n\n<hr/><br/>\n\n**Action** &nbsp; 7.6.5\n\nEnter a **department** name (it could be Candies, Snacks or Bakery)  (1). Click **Send** (2).\n\n*Note: You are welcome to try any of the three departments, or try a different one to see the 404 Not Found message*.\n\n  ![](images/test-compute-5.png)\n\n<hr/><br/>\n\n**Action** &nbsp; 7.6.6\n\nShow the **Response** body.\n\n  ![](images/test-compute-6.png)\n\n\n***\n</details>\n\n<br/><br/>\n\n### **8 - Add Java transformation**\n<details>\n<summary>8.1 - Adding Java Compute node</summary><br/>\n\n**Narration**\n\nGreat, now the Focus Developers would like to see how to use Java code to tailor the behavior of their integration messages.\n\nThey want to learn how touse the JavaCompute node to examine the content of an input message, transform a message, and build new messages.\n\nBecause of it, they decided to explore the JavaCompute node.\n\n<hr/><br/>\n\n**Action** &nbsp; 8.1.1\n\nBack to the getDepartment subflow, open again the Transformation menu and drag and drop a **JavaCompute** node.\n\n  ![](images/add-javacompute-1.png)\n\n<hr/><br/>\n\n**Action** &nbsp; 8.1.2\n\nReadjust the connections of Input and output node to connect to the Java Compute node (the out terminal of the Input node will be wired to the in terminal of the Java Compute node, and the out terminal of the Java Compute node will be wired to the in terminal of the Output node).\n\n  ![](images/add-javacompute-2.png)\n\n\n***\n</details>\n\n<details>\n<summary>8.2 - Create Java Compute node class</summary><br/>\n\n**Narration**\n\nWith App Connect toolkit, they can use the same tool that they use to create Integration flow to create Java code. Alternatively, if they want to share Java classes across multiple solutions, they can store Java code in a shared library and refer to that library from one or more applications that contain message flows with JavaCompute nodes\n\nHowever, the developers decided to try the Java Compute node class wizard to create template code to accelerate the development process. They selected the Modifying message class template, and in few seconds, they have a skeleton java code to manipulate and transform the integration message.\n\n<hr/><br/>\n\n**Action** &nbsp; 8.2.1\n\nDouble click the **Java Compute** node.\n\n  ![](images/create-javaclass-1.png)\n\n<hr/><br/>\n\n**Action** &nbsp; 8.2.2\n\nOn the *New JavaCompute node class* dialog, accept the default values and click **Next**.\n\n  ![](images/create-javaclass-2.png)\n\n<hr/><br/>\n\n**Action** &nbsp; 8.2.3\n\nSelect **Modifying message class** template (1) and click **Next** (2).\n\n  ![](images/create-javaclass-3.png)\n\n<hr/><br/>\n\n**Action** &nbsp; 8.2.4\n\nOn the Java Settings view, accept the default values and click **Next**.\n\n  ![](images/create-javaclass-4.png)\n\n<hr/><br/>\n\n**Action** &nbsp; 8.2.5\n\nAccept the default Project name and click **Finish**.\n\n  ![](images/create-javaclass-5.png)\n\n\n***\n</details>\n\n<details>\n<summary>8.3 - Adding code</summary><br/>\n\n**Narration**\n\nFor this demo, they will only add a simple message code to create elements in the JSON message, for example add a new Apple Pie product item.\n\n<hr/><br/>\n\n\n**Action** &nbsp; 8.3.1\n\nOn the *GetDepartment_JavaCompute* class, **copy and paste the code below**, below the *Add user code below* comment.\n```\nMbElement outRoot = outMessage.getRootElement();\nMbElement outJsonRoot = outRoot.createElementAsLastChild(MbJSON.PARSER_NAME);\nMbElement outJsonData = outJsonRoot.createElementAsLastChild(MbElement.TYPE_NAME, MbJSON.DATA_ELEMENT_NAME, null);\noutJsonData.createElementAsLastChild(MbElement.TYPE_NAME_VALUE, \"name\", \"Apple Pie\");\noutJsonData.createElementAsLastChild(MbElement.TYPE_NAME_VALUE, \"department\", \"Bakery\");\noutJsonData.createElementAsLastChild(MbElement.TYPE_NAME_VALUE, \"description\", \"Request has been processed by Java Compute Node.\");\n```\n\n  ![](images/add-code-1.png)\n\n<hr/><br/>\n\n\n**Action** &nbsp; 8.3.2\n\nTo solve the imports issue, click on **Source > Organize Imports** menu.\n\n  ![](images/add-code-2.png)\n\n<hr/><br/>\n\n\n**Action** &nbsp; 8.3.3\n\nClick **File > Save All**.\n\n  ![](images/add-code-3.png)\n\n<hr/><br/>\n\n\n**Action** &nbsp; 8.3.4\n\n**Close** the Java class.\n\n  ![](images/add-code-4.png)\n\n***\n</details>\n\n<details>\n<summary>8.4 - Test Java Compute node</summary><br/>\n\n**Narration**\n\nAt this moment, the Focus Integration experts are ready to test the new API using the JavaCompute node. They just need to redeploy the API and use the Web User Interface again to test it.\n\nNow, they will test using the Bakery department only.\n\nGreat, the subflow was invoked and our java compute transformation created a response with our hard coded Apple Pie product. Focus team verified how is really simple to use Java code to implement message transformation.\n\n<hr/><br/>\n\n\n**Action** &nbsp; 8.4.1\n\nRe-deploy the REST API, by dragging and dropping the **ShoppingListAPI** (1) again from the Application Development view on to the **TEST_SERVER** Integration Server (2).\n\n  ![](images/test-java-1.png)\n\n<hr/><br/>\n\n\n**Action** &nbsp; 8.4.2\n\nOn the Progress Information dialog, click **Close**.\n\n  ![](images/test-java-2.png)\n\n<hr/><br/>\n\n\n**Action** &nbsp; 8.4.3\n\nOn your browser, **refresh** the *Web User Interface* page.\n\n  ![](images/test-java-3.png)\n\n<hr/><br/>\n\n\n**Action** &nbsp; 8.4.4\n\nOpen again the **ShoppingListAPI** (1), **GET /shoppinglist/{department}** (2), **Try it** tab (3).\n\n  ![](images/test-java-4.png)\n\n<hr/><br/>\n\n\n**Action** &nbsp; 8.4.5\n\nEnter **Candies** as **department** name (1). Click **Send** (2).\n\n  ![](images/test-java-5.png)\n\n<hr/><br/>\n\n\n**Action** &nbsp; 8.4.6\n\nShow the **Response** body.\n\n  ![](images/test-java-6.png)\n\n***\n</details>\n\n<br/><br/>\n\n### **9 - Add Route**\n<details>\n<summary>9.1 - Adding Route node</summary><br/>\n\n**Narration**\n\nFinally, they want to see how they can route messages through different paths in a message flow, based on the content of the message using a Route node.\n\nFocus Integration experts decided to add a route node to route messages through all different transformation nodes based on the department parameter.  The idea is to redirect to Mapping node only messages to Candies department, redirect to Compute node only messages to Snacks department and redirect to Java node only messages to Bakery department.\n\nLet's see how to do it!\n\n<hr/><br/>\n\n\n**Action** &nbsp; 9.1.1\n\nBack to the getDepartment subflow, open the **Routing** menu and drag and drop a **Route** node.\n\n  ![](images/add-route-1.png)\n\n\n<hr/><br/>\n\n**Action** &nbsp; 9.1.2\n\nDelete all existing wiring. And wire the **Input** node to the new **Route** node.\n\n  ![](images/add-route-2.png)\n\n\n***\n</details>\n\n<details>\n<summary>9.2 - Renaming Match output terminal</summary><br/>\n\n**Narration**\n\nInitially, they need to rename the existing Match output terminal to mapping. And connect this terminal with the Mapping node.\n\n<hr/><br/>\n\n**Action** &nbsp; 9.2.1\n\nRight click on **Route** node (1), and select **Rename Output Terminal** (2).\n\n  ![](images/rename-terminal-1.png)\n\n<hr/><br/>\n\n\n**Action** &nbsp; 9.2.2\n\nOn Select output terminal to rename select **Match** (1). In the *Enter new name for the selected output terminal*, enter **mapping** (2). Then click **OK** (3).\n\n  ![](images/rename-terminal-2.png)\n\n<hr/><br/>\n\n\n**Action** &nbsp; 9.2.3\n\nWire the **mapping** output terminal from **Route** node to the **in** terminal of the **Mapping node**.\n\n  ![](images/rename-terminal-3.png)\n\n\n***\n</details>\n\n<details>\n<summary>9.3 - Creating new output terminal</summary><br/>\n\n**Narration**\n\nSecond, they need to create more two output terminals to compute and java transformation. And connect these terminals to Compute and JavaCompute nodes.\n\n<hr/><br/>\n\n**Action** &nbsp; 9.3.1\n\nRight click on **Route** node (1), and select **Add Output Terminal** (2).\n\n  ![](images/new-terminal-1.png)\n\n<hr/><br/>\n\n\n**Action** &nbsp; 9.3.2\n\nEnter **compute** as the name of the new output terminal (1) and click **OK** (2).\n\n  ![](images/new-terminal-2.png)\n\n<hr/><br/>\n\n\n**Action** &nbsp; 9.3.3\n\nRepeat the same steps to create the java terminal: Right click on **Route** node (1), and select **Add Output Terminal** (2).\n\n  ![](images/new-terminal-3.png)\n\n<hr/><br/>\n\n\n**Action** &nbsp; 9.3.4\n\nEnter **java** as the name of the new output terminal (1) and click **OK** (2).\n\n  ![](images/new-terminal-4.png)\n\n<hr/><br/>\n\n\n**Action** &nbsp; 9.3.5\n\nWire the **compute** output terminal from **Route** node to the **in** terminal of the **Compute** node.\n\n*Note: if you click the output terminals from Route, you will see a dialog to select the terminal that you want to wire.*\n\n  ![](images/new-terminal-5.png)\n\n<hr/><br/>\n\n\n**Action** &nbsp; 9.3.6\n\nRepeat the same steps to wire the **java** output terminal from **Route** node to the **in** terminal of the **Java Compute** node.\n\n*Note: if you click the output terminals from Route, you will see a dialog to select the terminal that you want to wire.*\n\n  ![](images/new-terminal-6.png)\n\n***\n</details>\n\n<details>\n<summary>9.4 - Adding filter patterns</summary><br/>\n\n**Narration**\n\nGreat! Now, they are ready to define the filter table. The Route node uses XPath expressions to control processing.\n\nFocus developers define the three XPath expressions, one for each transformation node.  The filter table map the XPath with the specific output terminal. The XPath is checking the department parameter value for each department.\n\n<hr/><br/>\n\n**Action** &nbsp; 9.4.1\n\nClick on the **Route** node.\n\n  ![](images/filter-patterns-1.png)\n\n<hr/><br/>\n\n\n**Action** &nbsp; 9.4.2\n\nOn the Filter table, click **Add** button.\n\n  ![](images/filter-patterns-2.png)\n\n<hr/><br/>\n\n\n**Action** &nbsp; 9.4.3\n\nEnter **$LocalEnvironment/REST/Input/Parameters/department=\"Candies\"** in the *Filter pattern* field (1) and select **mapping** as the *Routing output terminal* (2). Then click **OK**.\n\n*Note: During the copy and paste you should have some issues with “ “,  because of it, we recommend to type the “ “ again in the Filter pattern field.*\n\n  ![](images/filter-patterns-3.png)\n\n<hr/><br/>\n\n\n**Action** &nbsp; 9.4.4\n\nClick **Add** button again.\n\n  ![](images/filter-patterns-4.png)\n\n<hr/><br/>\n\n\n**Action** &nbsp; 9.4.5\n\nEnter **$LocalEnvironment/REST/Input/Parameters/department=\"Snacks”** in the *Filter pattern* field (1) and select **mapping** as the *Routing output terminal* (2). Then click **OK**.\n\n*Note: During the copy and paste you should have some issues with “ “,  because of it, we recommend to type the “ “ again in the Filter pattern field.*\n\n  ![](images/filter-patterns-5.png)\n\n<hr/><br/>\n\n\n**Action** &nbsp; 9.4.6\n\nClick Add button again.\n\n  ![](images/filter-patterns-5.png)\n\n<hr/><br/>\n\n\n**Action** &nbsp; 9.4.7\n\nEnter **$LocalEnvironment/REST/Input/Parameters/department=\"Bakery”** in the *Filter pattern* field (1) and select **mapping** as the *Routing output terminal* (2). Then click **OK**.\n\n*Note: During the copy and paste you should have some issues with “ “,  because of it, we recommend to type the “ “ again in the Filter pattern field.*\n\n  ![](images/filter-patterns-7.png)\n\n***\n</details>\n\n<details>\n<summary>9.5 - Connecting nodes</summary><br/>\n\n**Narration**\n\nFinally, the Focus team connects all the nodes to finalize the flow.\n\n<hr/><br/>\n\n**Action** &nbsp; 9.5.1\n\nWire the out terminal of **Mapping** (1), **Compute** (2) and **Java Compute** (3) nodes to the in terminal of the **Output** node (4).\n\n  ![](images/route-connect-1.png)\n\n<hr/><br/>\n\n\n**Action** &nbsp; 9.5.2\n\nWire the **default** (1) and **failure** (2) terminal of **Route** node to the in terminal of the **Output** node (3).\n\n  ![](images/route-connect-2.png)\n\n<hr/><br/>\n\n\n**Action** &nbsp; 9.5.3\n\nClick **File > Save All**.\n\n  ![](images/route-connect-3.png)\n\n\n\n***\n</details>\n\n<details>\n<summary>9.6- Test Route node</summary><br/>\n\n**Narration**\n\nAt this stage, the Focus Integration experts are ready to test the new API using the route node. They just need to redeploy the API and use the Web User Interface again to test it.\n\nNow, they will test using all three departments: Candies, Bakery and Snacks.\n\nGreat, the subflow was invoked and  the message is routed through all different transformation nodes based on the department parameter.\n\n<hr/><br/>\n\n\n**Action** &nbsp; 9.6.1\n\nRe-deploy the REST API, by dragging and dropping the **ShoppingListAPI** (1) again from the Application Development view on to the **TEST_SERVER** Integration Server (2).\n\n  ![](images/test-route-1.png)\n\n<hr/><br/>\n\n\n**Action** &nbsp; 9.6.2\n\nOn the Progress Information dialog, click **Close**.\n\n  ![](images/test-route-2.png)\n\n<hr/><br/>\n\n\n**Action** &nbsp; 9.6.3\n\nOn your browser, **refresh** the **Web User Interface** page.\n\n  ![](images/test-route-3.png)\n\n<hr/><br/>\n\n\n**Action** &nbsp; 9.6.4\n\nOpen again the **ShoppingListAPI** (1), **GET /shoppinglist/{department}** (2), **Try it** tab (3).\n\n  ![](images/test-route-4.png)\n\n<hr/><br/>\n\n\n**Action** &nbsp; 9.6.5\n\nEnter **Candies** (or Bakery, or Snacks) as **department** name (1). Click **Send** (2).\n\n*Note: You are welcome to try any of the three departments.*\n\n  ![](images/test-route-5.png)\n\n<hr/><br/>\n\n\n**Action** &nbsp; 9.6.6\n\nShow the **Response** body and show that each department is processed by different Transformation node (show the description field).\n\n  ![](images/test-route-6.png)\n\n***\n</details>\n\n<br/><br/>\n\n### **10 - Test on App Connect Enterprise**\n<details>\n<summary>10.1 - Exporting BAR File</summary><br/>\n\n**Narration**\n\nAt this stage, Focus team is ready to deploy their Integration flow in a App Connect Server. They just need to generate a BAR (broker archive) file. The App Connect Enterprise server uses BAR files to save compiled message flows, libraries, and other elements critical to the Integration flow.\n\n<hr/><br/>\n\n**Action** &nbsp; 10.1.1\n\nRight click the **ShoppingListAPI** (1) and choose **New > BAR file** (2).\n\n  ![](images/bar-file-1.png)\n\n<hr/><br/>\n\n**Action** &nbsp; 10.1.2\n\nOn the Window New Bar file, type **shoppinglist** as the bar file name (1) and click **Finish** (2).\n\n  ![](images/bar-file-2.png)\n\n<hr/><br/>\n\n**Action** &nbsp; 10.1.3\n\nOn the *Prepare screen*, mark the **REST APIs** checkbox (1). Check **Compile and in-line resources** (2). Click **Build and Save** (3).\n\n  ![](images/bar-file-3.png)\n\n<hr/><br/>\n\n**Action** &nbsp; 10.1.4\n\nNow, a popup window displays *Operation completed successfully*. Click **OK**.\n\n  ![](images/bar-file-4.png)\n\n***\n</details>\n\n<details>\n<summary>10.2 - Accessing App Connect Enterprise environment</summary><br/>\n\n**Narration**\n\nIBM App Connect is an industry-leading integration solution that connects any of your applications and data, no matter where they reside. With hundreds of prebuilt connectors and customizable templates, App Connect helps users of all skill levels rapidly connect Software as a Service (SaaS) applications and build integration flows.\n\nFor this demo, Focus Corp is using a trial account of IBM App Connect Enterprise as a Service on AWS.\n\n<hr/><br/>\n\n**Action** &nbsp; 10.2.1\n\nIn your email inbox (that you used to create the App Connect trial account), search for **IBM SaaS** (1), open the ”**Your IBM App Connect trial is ready**” email (2).\n\n  ![](images/ace-access-1.png)\n\n<hr/><br/>\n\n\n**Action** &nbsp; 10.2.2\n\nNow, click the **Access trial** button.\n\n  ![](images/ace-access-2.png)\n\n<hr/><br/>\n\n\n**Action** &nbsp; 10.2.3\n\n**Log in** with your App Connect *username* and *password*.\n\n  ![](images/ace-access-3.png)\n\n<hr/><br/>\n\n\n**Action** &nbsp; 10.2.4\n\nUse the Instance switcher to change to the **Dashboard** instance.\n\n  ![](images/ace-access-4.png)\n\n***\n</details>\n\n<details>\n<summary>10.3 - Creating Integration server</summary><br/>\n\n**Narration**\n\nFocus Integration Experts begin in the IBM App Connect Dashboard. Here they can administer integration servers and integration runtimes, which are deployed from the BAR files mentioned earlier. They want to deploy the Integration flow defined in the previous steps.\n\nBecause they need to deploy a simple integration, let’s select with the Quick start integration type.\n\nNow they need to provide the BAR file. The BAR file contains all the resources that are needed to deploy an integration. The BAR file parameters will expose both the integration and its operations.\n\nThey can use the Configuration component to apply any customizations to the integration server when they deploy it. For their scenario, they don’t need to use the configuration package.\n\nNow, they need to define a name for their Integration server, for example shoppinglist.\n\nThat is it! After few minutes their server should be ready with their integration flow.\n\n<hr/><br/>\n\n**Action** &nbsp; 10.3.1\n\nClick **Deploy integrations**.\n\n  ![](images/inter-server-1.png)\n\n<hr/><br/>\n\n**Action** &nbsp; 10.3.2\n\nSelect **Quick start integration** option (1) and click **Next** (2).\n\n  ![](images/inter-server-2.png)\n\n<hr/><br/>\n\n**Action** &nbsp; 10.3.3\n\nClick to upload your BAR File. And select the **shoppinglist.bar** (1) file (it is in your workspace folder in a Bar Files directory). And click **Next** (B).\n\n  ![](images/inter-server-3.png)\n\n<hr/><br/>\n\n**Action** &nbsp; 10.3.4\n\nYou don’t need any Integration configuration, click **Next**.\n\n  ![](images/inter-server-4.png)\n\n<hr/><br/>\n\n**Action** &nbsp; 10.3.5\n\nEnter the Integration Server name as **shoppinglist** (1). Disable the option to **Force Flow Basic Auth** (2). Then click **Create** (3).\n\n  ![](images/inter-server-5.png)\n\n<hr/><br/>\n\n**Action** &nbsp; 10.3.6\n\nThe deployment process takes up to 5 minutes, **refresh** the browser to see the BAR file deployed and started.\n\n  ![](images/inter-server-6.png)\n\n***\n</details>\n\n<details>\n<summary>10.4 - Testing the API</summary><br/>\n\n**Narration**\n\nTo finalize, the Focus Integration experts would like to test the new API in the App Connect Enterprise environment. They just need to open the Integration server and the API.\n\nNow, using the Try it capability, they will test using all three departments: Candies, Bakery and Snacks.\n\nGreat, the subflow was invoked and  the message is routed through all different transformation nodes based on the department parameter.\n\n<hr/><br/>\n\n**Action** &nbsp; 10.4.1\n\nClick the **shoppinglist** server icon.\n\n  ![](images/final-test-1.png)\n\n<hr/><br/>\n\n**Action** &nbsp; 10.4.2\n\nClick the **ShoppingListAPI** icon.\n\n  ![](images/final-test-2.png)\n\n<hr/><br/>\n\n**Action** &nbsp; 10.4.3\n\nIgnore the Open API Validation errors. Click on **GET /shoppinglist/{department}**,\n\n  ![](images/final-test-3.png)\n\n<hr/><br/>\n\n**Action** &nbsp; 10.4.4\n\nOpen the **Try it** tab.\n\n  ![](images/final-test-4.png)\n\n<hr/><br/>\n\n**Action** &nbsp; 10.4.5\n\nEnter **Candies** (or **Bakery**, or **Snacks**) as *department* name (1). Click **Send** (2).\n\n*Note: You are welcome to try any of the three departments.*\n\n  ![](images/final-test-5.png)\n\n<hr/><br/>\n\n**Action** &nbsp; 10.4.6\n\nShow the **Response** body and show that each department is processed by different Transformation node (show the description field).\n\n  ![](images/final-test-6.png)\n\n***\n</details>\n\n\n<br/><br/>\n\n### **Summary**\n\n<br/>\nLet’s summarize what Focus developers have done today. In this demo they: <br/>\n<ul>\n<li>Created Rest API using the App Connect Toolkit</li>\n<li>Created new API operation using the OpenAPI editor</li>\n<li>Implemented mapping transformation using the Mapping node</li>\n<li>Implemented compute transformation using ESQL query language and compute node</li>\n<li>Implemented java transformation using Java code and JavaCompute node</li>\n<li>Implemented messaging routing using Route node</li>\n<li>Deployed and tested the Integration flow on IBM App Connect Enterprise as a Service on AWS</li>\n</ul><br/>\nIn this demo, Focus Integration experts learned how to build complex, multi-style integrations with support for multiple programming languages and fully integrated with source and pipeline management tools using the IBM App Connect toolkit.\n<br/><br/>\nThank you for attending today’s presentation.\n<br/>\n","fileAbsolutePath":"/Users/rafaelosorio/Documents/GitHub/learninghub/src/pages/demos/ace-toolkit/demo-script.mdx"}}},"staticQueryHashes":["1364590287","137577622","137577622","2102389209","2102389209","2456312558","2746626797","2746626797","3018647132","3018647132","3037994772","3037994772","768070550"]}